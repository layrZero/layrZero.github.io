"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[3178],{8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>i});var s=t(6540);const r={},o=s.createContext(r);function a(n){const e=s.useContext(o);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),s.createElement(o.Provider,{value:e},n.children)}},8878:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"trading-platform/python/ema-crossover-strategy","title":"EMA Crossover Strategy","description":"Here is a coding snippet of python based EMA Crossover strategy implementing using placesmartorder function.","source":"@site/docs/trading-platform/python/ema-crossover-strategy.md","sourceDirName":"trading-platform/python","slug":"/trading-platform/python/ema-crossover-strategy","permalink":"/docs/trading-platform/python/ema-crossover-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/ema-crossover-strategy.md","tags":[],"version":"current","frontMatter":{}}');var r=t(4848),o=t(8453);const a={},i="EMA Crossover Strategy",l={},c=[];function p(n){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"ema-crossover-strategy",children:"EMA Crossover Strategy"})}),"\n",(0,r.jsx)(e.p,{children:"Here is a coding snippet of python based EMA Crossover strategy implementing using placesmartorder function."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from openalgo import api\nimport pandas as pd\nimport numpy as np\nimport time\nimport threading\nfrom datetime import datetime, timedelta\n\n# Get API key from openalgo portal\napi_key = \'your-openalgo-api-key\'\n\n\n# Set the strategy details and trading parameters\nstrategy = "EMA Crossover Python"\nsymbol = "BHEL"  # OpenAlgo Symbol\nexchange = "NSE"\nproduct = "MIS"\nquantity = 1\n\n# EMA periods\nfast_period = 5\nslow_period = 10\n\n# Set the API Key\nclient = api(api_key=api_key, host=\'http://127.0.0.1:5000\')\n\ndef calculate_ema_signals(df):\n    """\n    Calculate EMA crossover signals.\n    """\n    close = df[\'close\']\n    \n    # Calculate EMAs\n    ema_fast = close.ewm(span=fast_period, adjust=False).mean()\n    ema_slow = close.ewm(span=slow_period, adjust=False).mean()\n    \n    # Create crossover signals\n    crossover = pd.Series(False, index=df.index)\n    crossunder = pd.Series(False, index=df.index)\n    \n    # Previous values of EMAs\n    prev_fast = ema_fast.shift(1)\n    prev_slow = ema_slow.shift(1)\n    \n    # Current values of EMAs\n    curr_fast = ema_fast\n    curr_slow = ema_slow\n    \n    # Generate crossover signals\n    crossover = (prev_fast < prev_slow) & (curr_fast > curr_slow)\n    crossunder = (prev_fast > prev_slow) & (curr_fast < curr_slow)\n    \n    return pd.DataFrame({\n        \'EMA_Fast\': ema_fast,\n        \'EMA_Slow\': ema_slow,\n        \'Crossover\': crossover,\n        \'Crossunder\': crossunder\n    }, index=df.index)\n\ndef ema_strategy():\n    """\n    The EMA crossover trading strategy.\n    """\n    position = 0\n\n    while True:\n        try:\n            # Dynamic date range: 7 days back to today\n            end_date = datetime.now().strftime("%Y-%m-%d")\n            start_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")\n\n            # Fetch 1-minute historical data using OpenAlgo\n            df = client.history(\n                symbol=symbol,\n                exchange=exchange,\n                interval="1m",\n                start_date=start_date,\n                end_date=end_date\n            )\n\n            # Check for valid data\n            if df.empty:\n                print("DataFrame is empty. Retrying...")\n                time.sleep(15)\n                continue\n\n            # Verify required columns\n            if \'close\' not in df.columns:\n                raise KeyError("Missing \'close\' column in DataFrame")\n\n            # Round the close column\n            df[\'close\'] = df[\'close\'].round(2)\n\n            # Calculate EMAs and signals\n            signals = calculate_ema_signals(df)\n\n            # Get latest signals\n            crossover = signals[\'Crossover\'].iloc[-2]  # Using -2 to avoid partial candle\n            crossunder = signals[\'Crossunder\'].iloc[-2]\n\n            # Execute Buy Order\n            if crossover and position <= 0:\n                position = quantity\n                response = client.placesmartorder(\n                    strategy=strategy,\n                    symbol=symbol,\n                    action="BUY",\n                    exchange=exchange,\n                    price_type="MARKET",\n                    product=product,\n                    quantity=quantity,\n                    position_size=position\n                )\n                print("Buy Order Response:", response)\n\n            # Execute Sell Order\n            elif crossunder and position >= 0:\n                position = quantity * -1\n                response = client.placesmartorder(\n                    strategy=strategy,\n                    symbol=symbol,\n                    action="SELL",\n                    exchange=exchange,\n                    price_type="MARKET",\n                    product=product,\n                    quantity=quantity,\n                    position_size=position\n                )\n                print("Sell Order Response:", response)\n\n            # Log strategy information\n            print("\\nStrategy Status:")\n            print("-" * 50)\n            print(f"Position: {position}")\n            print(f"LTP: {df[\'close\'].iloc[-1]}")\n            print(f"Fast EMA ({fast_period}): {signals[\'EMA_Fast\'].iloc[-2]:.2f}")\n            print(f"Slow EMA ({slow_period}): {signals[\'EMA_Slow\'].iloc[-2]:.2f}")\n            print(f"Buy Signal: {crossover}")\n            print(f"Sell Signal: {crossunder}")\n            print("-" * 50)\n\n        except Exception as e:\n            print(f"Error in strategy: {str(e)}")\n            time.sleep(15)\n            continue\n\n        # Wait before the next cycle\n        time.sleep(15)\n\nif __name__ == "__main__":\n    print(f"Starting {fast_period}/{slow_period} EMA Crossover Strategy...")\n    ema_strategy()\n'})})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}}}]);