"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[5043],{5108:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"trading-platform/amibroker/spot-futures-to-options-module-single-leg","title":"Spot/Futures to Options Module (Single Leg)","description":"This tutorial provides instructions on how to utilize simple buy and sell trading signals in Spot/Future charts to place option orders (including ATM, ITM, and OTM options) on the OpenAlgo platform. Implementing this system can help traders mitigate risk, particularly in the event of unexpected market movements that may result in significant losses. Additionally, implementing ATM or ITM option buying strategies, as opposed to futures, may help to reduce the risk of extreme black swan events and significantly mitigate the potential for large gap up or gap down risks when carrying forward positions.","source":"@site/docs/trading-platform/amibroker/spot-futures-to-options-module-single-leg.md","sourceDirName":"trading-platform/amibroker","slug":"/trading-platform/amibroker/spot-futures-to-options-module-single-leg","permalink":"/docs/trading-platform/amibroker/spot-futures-to-options-module-single-leg","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/amibroker/spot-futures-to-options-module-single-leg.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SmartOrder Chart Module","permalink":"/docs/trading-platform/amibroker/smartorder-chart-module"},"next":{"title":"Spot/Futures to Options Module (Two Leg)","permalink":"/docs/trading-platform/amibroker/spot-futures-to-options-module-two-leg"}}');var r=n(4848),o=n(8453);const i={},l="Spot/Futures to Options Module (Single Leg)",s={},p=[];function S(t){const e={br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"spotfutures-to-options-module-single-leg",children:"Spot/Futures to Options Module (Single Leg)"})}),"\n",(0,r.jsx)(e.p,{children:"This tutorial provides instructions on how to utilize simple buy and sell trading signals in Spot/Future charts to place option orders (including ATM, ITM, and OTM options) on the OpenAlgo platform. Implementing this system can help traders mitigate risk, particularly in the event of unexpected market movements that may result in significant losses. Additionally, implementing ATM or ITM option buying strategies, as opposed to futures, may help to reduce the risk of extreme black swan events and significantly mitigate the potential for large gap up or gap down risks when carrying forward positions."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Features of the Options Execution Module"})}),"\n",(0,r.jsxs)(e.p,{children:["1)Simple Drag and Drop Module on top of any Amibroker trading strategy with the proper buy,sell,short,cover defined variables.",(0,r.jsx)(e.br,{}),"\n","2)Place Smart Option Orders to intelligent send orders by manipulating the current existing positions.",(0,r.jsx)(e.br,{}),"\n","3)Option Strike calculation at Amibroker end (Trades can configure the Underlying symbol as Spot./Futures) based on their trading requirement) accordingly, options strikes will be calculated."]}),"\n",(0,r.jsx)(e.p,{children:"Internet Functions Method (Modern)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-clike",children:'/* \nOpenAlgo - Modern Spot/Futures to Options Trading Module \nCreated By: Rajandran R (Founder - Marketcalls / Creator OpenAlgo) \nCreated On: 23 Dec 2024 \nWebsite: www.marketcalls.in / www.openalgo.in \n*/\n\n_SECTION_BEGIN("OpenAlgo - Spot/Futures to Options Module");\n\n// Parameter Definitions\nRequestTimedRefresh(1, False);\nEnableTextOutput(False);\n\napikey = ParamStr("OpenAlgo API Key", "******");\nstrategy = ParamStr("Strategy Name", "Test Strategy");\nspot = ParamList("Spot Symbol", "NIFTY|BANKNIFTY|FINNIFTY|SENSEX|CRUDEOILM");\nexpiry = ParamStr("Expiry Date", "17SEP25");\nexchange = ParamList("Exchange", "NFO|BFO|MCX", 0);\nsymbol = ParamStr("Underlying Symbol", "NIFTY");   //Amibroker Symbols Spot/Futures (Calculation of Strike Price)\niInterval = Param("Strike Interval", 50, 1, 10000, 1);\nStrikeCalculation = ParamList("Strike Calculation", "PREVOPEN|PREVCLOSE|TODAYSOPEN", 0);\nLotSize = Param("Lot Size", 75, 1, 10000, 1);\noffsetCE = Param("CE Offset", 0, -40, 40, 1);  //0 - ATM Options,  +4 - 4 strike OTM , -2 = 2 strike wide ITM options\noffsetPE = Param("PE Offset", 0, -40, 40, 1);\npricetype = ParamList("Order Type", "MARKET", 0);\nproduct = ParamList("Product", "MIS|NRML", 1);\ntradetype = ParamList("Option Trade Type", "BUY|SELL", 0);  //Option Buyer - Option Seller\nquantity = Param("Quantity (Lot Size)", 1, 0, 10000) * LotSize;\nhost = ParamStr("Host", "http://127.0.0.1:5000");\nver = ParamStr("API Version", "v1");\nVoiceAlert = ParamList("Voice Alert", "Disable|Enable", 1);\nEntryDelay = Param("Entry Delay", 0, 0, 1, 1);\nExitDelay = Param("Exit Delay", 0, 0, 1, 1);\nEnableAlgo = ParamList("AlgoStatus", "Disable|Enable|LongOnly|ShortOnly", 0);\n\nSetChartOptions(0, chartShowArrows | chartShowDates);\n_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) {{VALUES}}", O, H, L, C, SelectedValue(ROC(C, 1))));\n\nbridgeurl = host + "/api/" + ver;\n\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = static_name_+interval(2)+strategy+"algostatus";\n\n\n//OpenAlgo Dashboard\n\nGfxSelectFont( "BOOK ANTIQUA", 14, 100 );\nGfxSetBkMode( 1 );\nif(EnableAlgo == "Enable")\n{\nAlgoStatus = "Algo Enabled";\nGfxSetTextColor( colorGreen ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=1)\n{\n_TRACE("Algo Status : Enabled");\nStaticVarSet(static_name_algo, 1);\n}\n}\nif(EnableAlgo == "Disable")\n{\nAlgoStatus = "Algo Disabled";\nGfxSetTextColor( colorRed ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=0)\n{\n_TRACE("Algo Status : Disabled");\nStaticVarSet(static_name_algo, 0);\n}\n}\n\n// Strike Price Calculations\nif (StrikeCalculation == "PREVOPEN") {\n    SetForeign(symbol);\n    spotC = Ref(Open, -1);\n    RestorePriceArrays();\n} else if (StrikeCalculation == "PREVCLOSE") {\n    SetForeign(symbol);\n    spotC = Ref(Close, -1);\n    RestorePriceArrays();\n} else if (StrikeCalculation == "TODAYSOPEN") {\n    SetForeign(symbol);\n    spotC = TimeFrameGetPrice("O", inDaily);\n    RestorePriceArrays();\n}\n\n\n//Maintain Array to Store ATM Strikes for each and every bar\nstrike = IIf(spotC % iInterval > iInterval/2, spotC - (spotC%iInterval) + iInterval,\n\t\t\tspotC - (spotC%iInterval));\n\t\t\t\n//Entry Strikes\t\n\n\t\t\nstrikeCE = strike + (offsetCE * iInterval);\nstrikePE = strike - (offsetPE * iInterval);\n\nbuycontinue = Flip(Buy,Sell);\nshortcontinue  = Flip(Short,Cover);\n\nprintf("\\n Spot Price :"+spotC);\nprintf("\\n Strike CE :"+strikeCE);\nprintf("\\n Strike PE :"+strikePE);\n\n\nglobal ExitStrikeCE;\nglobal ExitStrikePE;\nglobal entryoptions;\nglobal exitoptons;\n\n// Trading Variables\nAlgoBuy = LastValue(Ref(Buy, -EntryDelay));\nAlgoSell = LastValue(Ref(Sell, -ExitDelay));\nAlgoShort = LastValue(Ref(Short, -EntryDelay));\nAlgoCover = LastValue(Ref(Cover, -ExitDelay));\n\n//Exit Strikes\nif(tradetype=="BUY")\n{\nExitStrikeCE = ValueWhen(Ref(Buy,-Entrydelay),strikeCE); \nExitStrikePE = ValueWhen(Ref(Short,-Entrydelay),strikePE);\n\n\n\nentryoptions = WriteIf(AlgoBuy,spot+expiry+LastValue(strikeCE)+"CE", WriteIf(AlgoShort,spot+expiry+LastValue(strikePE)+"PE",""));\nexitoptions = WriteIf(AlgoSell,spot+expiry+LastValue(ExitStrikeCE)+"CE", WriteIf(AlgoCover,spot+expiry+LastValue(ExitStrikePE)+"PE",""));\n\n\n}\nif(tradetype=="SELL")\n{\nExitStrikeCE = ValueWhen(Ref(Short,-Entrydelay),strikeCE); \nExitStrikePE = ValueWhen(Ref(Buy,-Entrydelay),strikePE);\n\n\n\nentryoptions = WriteIf(AlgoBuy,spot+expiry+LastValue(strikePE)+"PE", WriteIf(AlgoShort,spot+expiry+LastValue(strikeCE)+"CE",""));\nexitoptions = WriteIf(AlgoSell,spot+expiry+LastValue(ExitStrikeCE)+"PE", WriteIf(AlgoCover,spot+expiry+LastValue(ExitStrikeCE)+"CE",""));\n\n}\n\nprintf("\\n\\n\\nEntry Symbol : "+entryoptions);\nprintf("\\nExit Symbol : "+exitoptions);\n\n\n\n\n// Define Functions for Order Placement and Exit\nfunction PlaceOrder(action, optionType, qty) {\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", " +\n               "\\"strategy\\": \\"" + strategy + "\\", " +\n               "\\"symbol\\": \\"" + entryoptions + "\\", " +\n               "\\"action\\": \\"" + action + "\\", " +\n               "\\"exchange\\": \\"" + exchange + "\\", " +\n               "\\"pricetype\\": \\"" + pricetype + "\\", " +\n               "\\"product\\": \\"" + product + "\\", " +\n               "\\"quantity\\": \\"" + qty + "\\"}";\n    headers = "Content-Type: application/json\\r\\nAccept-Encoding: gzip, deflate\\r\\n";\n    InternetSetHeaders(headers);\n    ih = InternetPostRequest(bridgeurl + "/placeorder", postData);\n\n    if (ih) {\n        response = "";\n        while ((line = InternetReadString(ih)) != "") {\n            response += line;\n        }\n        _TRACE("PlaceOrder Request : "+postData);\n        _TRACEF("PlaceOrder Response: %s", response);\n        if (VoiceAlert == "Enable") Say(action + " Order Placed.");\n        InternetClose(ih);\n    } else {\n        _TRACE("Failed to place order.");\n    }\n}\n\nfunction ExitOrder(action, optionType) {\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", " +\n               "\\"strategy\\": \\"" + strategy + "\\", " +\n               "\\"symbol\\": \\"" + exitoptions + "\\", " +\n               "\\"action\\": \\"" + action + "\\", " +\n               "\\"exchange\\": \\"" + exchange + "\\", " +\n               "\\"pricetype\\": \\"" + pricetype + "\\", " +\n               "\\"product\\": \\"" + product + "\\", " +\n               "\\"position_size\\": \\"" + "0" + "\\", " +\n               "\\"quantity\\": \\"0\\"}";\n    headers = "Content-Type: application/json\\r\\nAccept-Encoding: gzip, deflate\\r\\n";\n    InternetSetHeaders(headers);\n    ih = InternetPostRequest(bridgeurl + "/placesmartorder", postData);\n\n    if (ih) {\n        response = "";\n        while ((line = InternetReadString(ih)) != "") {\n            response += line;\n        }\n        _TRACE("PlaceOrder Request : "+postData);\n        _TRACEF("ExitOrder Response: %s", response);\n        if (VoiceAlert == "Enable") Say(action + " Exit Order Placed.");\n        InternetClose(ih);\n    } else {\n        _TRACE("Failed to exit order.");\n    }\n}\n\n\nif (EnableAlgo != "Disable") {\n    lasttime = StrFormat("%0.f", LastValue(BarIndex()));\n\n    SetChartBkColor(colorDarkGrey);\n\n    if (EnableAlgo == "Enable" OR EnableAlgo == "LongOnly" OR EnableAlgo == "ShortOnly") {\n        if (AlgoBuy == True AND AlgoCover == True AND StaticVarGet(static_name_ + "buyCoverAlgo") == 0 AND StaticVarGetText(static_name_ + "buyCoverAlgo_barvalue") != lasttime) {\n            if (tradetype == "BUY") {\n                // Long Call and Exit Long Put\n                ExitOrder("SELL", "PE");\n                PlaceOrder("BUY", "CE", quantity);\n            } else if (tradetype == "SELL") {\n                // Short Put and Exit Short Call\n                ExitOrder("BUY", "CE");\n                PlaceOrder("SELL", "PE", quantity);\n            }\n            _TRACE("Buy Cover Order Triggered.");\n            StaticVarSet(static_name_ + "buyCoverAlgo", 1);\n            StaticVarSetText(static_name_ + "buyCoverAlgo_barvalue", lasttime);\n        } else if (AlgoBuy != True OR AlgoCover != True) {\n            StaticVarSet(static_name_ + "buyCoverAlgo", 0);\n            StaticVarSetText(static_name_ + "buyCoverAlgo_barvalue", "");\n        }\n\n        if (AlgoBuy == True AND AlgoCover != True AND StaticVarGet(static_name_ + "buyAlgo") == 0 AND StaticVarGetText(static_name_ + "buyAlgo_barvalue") != lasttime) {\n            if (tradetype == "BUY") {\n                PlaceOrder("BUY", "CE", quantity);\n            } else if (tradetype == "SELL") {\n                PlaceOrder("SELL", "PE", quantity);\n            }\n            _TRACE("Buy Order Triggered.");\n            StaticVarSet(static_name_ + "buyAlgo", 1);\n            StaticVarSetText(static_name_ + "buyAlgo_barvalue", lasttime);\n        } else if (AlgoBuy != True) {\n            StaticVarSet(static_name_ + "buyAlgo", 0);\n            StaticVarSetText(static_name_ + "buyAlgo_barvalue", "");\n        }\n\n        if (AlgoSell == True AND AlgoShort != True AND StaticVarGet(static_name_ + "sellAlgo") == 0 AND StaticVarGetText(static_name_ + "sellAlgo_barvalue") != lasttime) {\n            if (tradetype == "BUY") {\n                ExitOrder("SELL", "CE");\n            } else if (tradetype == "SELL") {\n                ExitOrder("BUY", "PE");\n            }\n            _TRACE("Sell Order Triggered.");\n            StaticVarSet(static_name_ + "sellAlgo", 1);\n            StaticVarSetText(static_name_ + "sellAlgo_barvalue", lasttime);\n        } else if (AlgoSell != True) {\n            StaticVarSet(static_name_ + "sellAlgo", 0);\n            StaticVarSetText(static_name_ + "sellAlgo_barvalue", "");\n        }\n\n        if (AlgoShort == True AND AlgoSell == True AND StaticVarGet(static_name_ + "ShortSellAlgo") == 0 AND StaticVarGetText(static_name_ + "ShortSellAlgo_barvalue") != lasttime) {\n            if (tradetype == "BUY") {\n                ExitOrder("SELL", "CE");\n                PlaceOrder("BUY", "PE", quantity);\n            } else if (tradetype == "SELL") {\n                ExitOrder("BUY", "PE");\n                PlaceOrder("SELL", "CE", quantity);\n            }\n            _TRACE("Short Sell Order Triggered.");\n            StaticVarSet(static_name_ + "ShortSellAlgo", 1);\n            StaticVarSetText(static_name_ + "ShortSellAlgo_barvalue", lasttime);\n        } else if (AlgoShort != True OR AlgoSell != True) {\n            StaticVarSet(static_name_ + "ShortSellAlgo", 0);\n            StaticVarSetText(static_name_ + "ShortSellAlgo_barvalue", "");\n        }\n\n        if (AlgoShort == True AND AlgoSell != True AND StaticVarGet(static_name_ + "ShortAlgo") == 0 AND StaticVarGetText(static_name_ + "ShortAlgo_barvalue") != lasttime) {\n            if (tradetype == "BUY") {\n                PlaceOrder("BUY", "PE", quantity);\n            } else if (tradetype == "SELL") {\n                PlaceOrder("SELL", "CE", quantity);\n            }\n            _TRACE("Short Order Triggered.");\n            StaticVarSet(static_name_ + "ShortAlgo", 1);\n            StaticVarSetText(static_name_ + "ShortAlgo_barvalue", lasttime);\n        } else if (AlgoShort != True) {\n            StaticVarSet(static_name_ + "ShortAlgo", 0);\n            StaticVarSetText(static_name_ + "ShortAlgo_barvalue", "");\n        }\n\n        if (AlgoCover == True AND AlgoBuy != True AND StaticVarGet(static_name_ + "CoverAlgo") == 0 AND StaticVarGetText(static_name_ + "CoverAlgo_barvalue") != lasttime) {\n            if (tradetype == "BUY") {\n                ExitOrder("SELL", "PE");\n            } else if (tradetype == "SELL") {\n                ExitOrder("BUY", "CE");\n            }\n            _TRACE("Cover Order Triggered.");\n            StaticVarSet(static_name_ + "CoverAlgo", 1);\n            StaticVarSetText(static_name_ + "CoverAlgo_barvalue", lasttime);\n        } else if (AlgoCover != True) {\n            StaticVarSet(static_name_ + "CoverAlgo", 0);\n            StaticVarSetText(static_name_ + "CoverAlgo_barvalue", "");\n        }\n    }\n}\n\n_SECTION_END();\n\n\n'})}),"\n",(0,r.jsx)(e.p,{children:"VB Script Method (Legacy)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-clike",children:'\n/*\nOpenAlgo - Smart Spot/Futures to Options Trading Module\nCreated By : Rajandran R(Founder - Marketcalls / Creator OpenAlgo )\nCreated on : 31 MAY 2024.\nWebsite : www.marketcalls.in / www.openalgo.in\n*/\n\n\n_SECTION_BEGIN("Openalgo - Spot/Futures to Options Module");\n\n\n// Send orders even if Amibroker is minimized or Chart is not active\nRequestTimedRefresh(1, False); \nEnableTextOutput(False);\n\n\napikey = ParamStr("OpenAlgo API Key", "******");\n\nstrategy = ParamStr("Strategy Name", "Test Strategy");\n\nspot = Paramlist("Spot Symbol","NIFTY|BANKNIFTY|FINNIFTY|SENSEX");\nexpiry = ParamStr("Expiry Date","06JUN24");\n\nexchange = ParamList("Exchange","NFO|BFO|MCX",0); \nSymbol = ParamStr("Underlying Symbol","NIFTY");\niInterval= Param("Strike Interval",50,1,10000,1);\nStrikeCalculation = Paramlist("Strike Calculation","PREVOPEN|PREVCLOSE|TODAYSOPEN",0);\nLotSize = Param("Lot Size",25,1,10000,1);\n\noffsetCE = Param("CE Offset",0,-40,40,1);\noffsetPE = Param("PE Offset",0,-40,40,1);\n\npricetype = ParamList("Order Type","MARKET",0);\nproduct = ParamList("Product","MIS|NRML",1);\ntradetype = ParamList("Option Trade Type","BUY|SELL",0);\n\nquantity = Param("quanity(Lot Size)",1,0,10000)*LotSize;\nprice = 0; \ndisclosed_quantity = 0;\ntrigger_price = 0;\n\nhost = ParamStr("host","http://127.0.0.1:5000");\nver = ParamStr("API Version","v1");\n\n\nVoiceAlert = ParamList("Voice Alert","Disable|Enable",1);\n\nEntrydelay = Param("Entry Delay",0,0,1,1);\nExitdelay = Param("Exit Delay",0,0,1,1);\nEnableAlgo = ParamList("AlgoStatus","Disable|Enable|LongOnly|ShortOnly",0);\n\n\nbridgeurl = host+"/api/"+ver;\nresp = "";\n\n\n//Static Variables for Order protection\n\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";\n\n\nAlgoBuy = lastvalue(Ref(Buy,-Entrydelay));\nAlgoSell = lastvalue(Ref(Sell,-Exitdelay));\nAlgoShort = lastvalue(Ref(Short,-Entrydelay));\nAlgoCover = lastvalue(Ref(Cover,-Exitdelay));\n\n//Plots Dashboard\n\nGfxSelectFont( "BOOK ANTIQUA", 14, 100 );\nGfxSetBkMode( 1 );\nif (EnableAlgo != "")\n{\nAlgoStatus = EnableAlgo;\nGfxSetTextColor( IIf(EnableAlgo == "Enable", colorGreen, \n\t\t\t\t\tIIf(EnableAlgo == "LongOnly",colorYellow,\n\t\t\t\t\t\tIIf(EnableAlgo == "ShortOnly",colorOrange,colorRed)) ));\nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);\nStaticVarSet(static_name_algo, IIf(EnableAlgo == "Enable", 1,\nIIf(EnableAlgo == "LongOnly", 2, IIf(EnableAlgo == "ShortOnly", 3, 0))));\n//_TRACE("Algo Status : "+EnableAlgo);\n}\n\n\n\n\n\n//optionCEtype = WriteIf(offsetCE == 0, "ATM CE", WriteIf(offsetCE<0,"ITM"+abs(offsetCE)+" CE","OTM"+abs(offsetCE)+" CE"));\n//optionPEtype = WriteIf(offsetPE == 0, "ATM PE", WriteIf(offsetPE<0,"ITM"+abs(offsetPE)+" PE","OTM"+abs(offsetPE)+" PE"));\n\nif(StrikeCalculation=="PREVOPEN")\n{\nSetForeign(Symbol);\nspotC = Ref(OPEN,-1);\nRestorePriceArrays();\n}\n\nif(StrikeCalculation=="PREVCLOSE")\n{\nSetForeign(Symbol);\nspotC = Ref(Close,-1);\nRestorePriceArrays();\n}\n\nif(StrikeCalculation=="TODAYSOPEN")\n{\nSetForeign(Symbol);\nspotC = TimeFrameGetPrice("O",inDaily);\nRestorePriceArrays();\n}\n\n//Maintain Array to Store ATM Strikes for each and every bar\nstrike = IIf(spotC % iInterval > iInterval/2, spotC - (spotC%iInterval) + iInterval,\n\t\t\tspotC - (spotC%iInterval));\n\t\t\t\n//Entry Strikes\t\n\t\t\nstrikeCE = strike + (offsetCE * iInterval);\nstrikePE = strike - (offsetPE * iInterval);\n\nbuycontinue = Flip(Buy,Sell);\nshortcontinue  = Flip(Short,Cover);\n\n\nExitStrikeCE = "";\nExitStrikePE = "";\nentryoptions = "";\nexitoptons = "";\n\n//Exit Strikes\nif(tradetype=="BUY")\n{\nExitStrikeCE = ValueWhen(Ref(Buy,-Entrydelay),strikeCE); \nExitStrikePE = ValueWhen(Ref(Short,-Entrydelay),strikePE);\n\nentryoptions = WriteIf(Buy,spot+expiry+strikeCE+"CE", WriteIf(Short,spot+expiry+strikePE+"PE",""));\nexitoptons = WriteIf(sell,spot+expiry+ExitStrikeCE+"CE", WriteIf(cover,spot+expiry+ExitStrikePE+"PE",""));\n\n\n}\nif(tradetype=="SELL")\n{\nExitStrikeCE = ValueWhen(Ref(Short,-Entrydelay),strikeCE); \nExitStrikePE = ValueWhen(Ref(Buy,-Entrydelay),strikePE);\n\nentryoptions = WriteIf(Buy,spot+expiry+strikePE+"PE", WriteIf(Short,spot+expiry+strikeCE+"CE",""));\nexitoptons = WriteIf(sell,spot+expiry+ExitStrikePE+"PE", WriteIf(cover,spot+expiry+ExitStrikeCE+"CE",""));\n\n}\n\nprintf("\\n\\n\\nEntry Symbol : "+entryoptions);\nprintf("\\nExit Symbol : "+exitoptons);\n\n\n_SECTION_END();\n\n\n\n\n_SECTION_BEGIN("OpenAlgo Bridge Controls");\n\nEnableScript("VBScript"); \n<%\nPublic Sub PlaceOrder(action, OptionType, quantity)\n\t\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    \n\n\t\n    \n    symbol = AFL.Var("entryoptions")\n    \n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placeorder"\n    \n    \' MsgBox "API Request: " & jsonRequestBody, vbInformation, "API Information"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " api_url :" & url\n\n    \n    \' MsgBox "API Request: " & oXMLHTTP.responseText, vbInformation, "API Information"\n    \n    \n    AFL("api_request") = api_parameters  \n    AFL("api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\nPublic Sub ExitOrder(action, OptionType)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n   \t\n    \n\tsymbol = AFL.Var("exitoptons")\n    \n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n    position_size = "0"\n    quantity = "0"\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & _\n    """,""position_size"":""" & position_size & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placesmartorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " Position Size :" & position_size & " api_url :" & url\n\n    \n    AFL("ex_api_request") = api_parameters  \n    AFL("ex_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n%>\n\nopenalgo = GetScriptObject();\n\n\n\n_SECTION_END();\n\n\nif(EnableAlgo != "Disable")\n    {\n        lasttime = StrFormat("%0.f",LastValue(BarIndex()));\n        \n       \n        \n        SetChartBkColor(colorDarkGrey);\n        if(EnableAlgo == "Enable")\n        {   \n\t\t\t\n\t\t\t\n            if (AlgoBuy==True AND AlgoCover == True AND StaticVarGet(static_name_+"buyCoverAlgo")==0 AND StaticVarGetText(static_name_+"buyCoverAlgo_barvalue") != lasttime )\n            {\n            \n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//Long Call and Exit Long Put Option\n\t\t\t\topenalgo.ExitOrder("SELL", "PE"); \n\t\t\t\topenalgo.PlaceOrder("BUY", "CE",quantity);\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Short Put and Exit Short Call Option\n\t\t\t\topenalgo.ExitOrder("BUY" , "CE"); \n\t\t\t\topenalgo.PlaceOrder("SELL" ,"PE",quantity);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t_TRACE("Exit API Request : "+ex_api_request);\n\t\t\t\t_TRACE("Exit API Response : "+ex_api_response);\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue",lasttime);  \n                StaticVarSet(static_name_+"buyCoverAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n        \n            }\n            else if ((AlgoBuy != True OR AlgoCover != True))\n            {   \n                StaticVarSet(static_name_+"buyCoverAlgo",0);\n                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue","");\n            }\n            \n            if (AlgoBuy==True AND AlgoCover != True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)\n            {\n            \n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t//Long Call and Exit Long Put Option\n\t\t\t\topenalgo.PlaceOrder("BUY","CE",quantity);\n\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Short Put\n\t\t\t\topenalgo.PlaceOrder("SELL","PE",quantity);\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoBuy != True)\n            {   \n                StaticVarSet(static_name_+"buyAlgo",0);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue","");\n                \n            }\n            if (AlgoSell==true AND AlgoShort != True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)\n            {     \n\t\t\t\t\n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t//Exit Long Call Option\n\t\t\t\t\n\t\t\t\topenalgo.ExitOrder("SELL","CE"); \n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Exit Short Put Option\n\t\t\t\topenalgo.ExitOrder("BUY","PE"); \n\t\t\t\t\n\t\t\t\t}\n                \n                _TRACE("Exit API Request : "+ex_api_request);\n\t\t\t\t_TRACE("Exit API Response : "+ex_api_response);\n\n                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoSell != True )\n            {   \n                StaticVarSet(static_name_+"sellAlgo",0);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue","");\n            }\n            if (AlgoShort==True AND AlgoSell==True AND  StaticVarGet(static_name_+"ShortSellAlgo")==0 AND StaticVarGetText(static_name_+"ShortSellAlgo_barvalue") != lasttime)\n            {\n            \n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t//Long Put and Exit Long Call Option\n\t\t\t\topenalgo.ExitOrder("SELL","CE"); \n\t\t\t\topenalgo.PlaceOrder("BUY","PE",quantity);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Short Call and Exit Short Put Option\n\t\t\t\topenalgo.ExitOrder("BUY","PE");\n\t\t\t\topenalgo.PlaceOrder("SELL","CE",quantity);\n\t\t\t\t \n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t_TRACE("Exit API Request : "+ex_api_request);\n\t\t\t\t_TRACE("Exit API Response : "+ex_api_response);\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n\t\t\t\t\n                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"ShortSellAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if ((AlgoShort != True OR AlgoSell != True))\n            {   \n                StaticVarSet(static_name_+"ShortSellAlgo",0);\n                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue","");\n            }\n                \n            if (AlgoShort==True  AND  AlgoSell != True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND  StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)\n            {\n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t//Long Put\n\t\t\t\topenalgo.PlaceOrder("BUY","PE",quantity);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Short Call\n\t\t\t\topenalgo.PlaceOrder("SELL","CE",quantity);\n\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoShort != True )\n            {   \n                StaticVarSet(static_name_+"ShortAlgo",0);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");\n            }\n            if (AlgoCover==true AND AlgoBuy != True AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)\n            {\n\t\t\t\t\n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t//Exit Long Put Option\n\t\t\t\t\n\t\t\t\topenalgo.ExitOrder("SELL","PE"); \n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Exit Short Call Option\n\t\t\t\topenalgo.ExitOrder("BUY","CE"); \n\t\t\t\t\n\t\t\t\t}\n               \n               \n\t\t\t\t_TRACE("Exit API Request : "+ex_api_request);\n\t\t\t\t_TRACE("Exit API Response : "+ex_api_response);\n\n\t\t\t\t\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoCover != True )\n            {   \n                StaticVarSet(static_name_+"CoverAlgo",0);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");\n            }\n        }\n        \n      else if(EnableAlgo == "LongOnly")\n        {\n        \n\t\t\t if (AlgoBuy==True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)\n            {\n            \n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t//Long Call and Exit Long Put Option\n\t\t\t\topenalgo.PlaceOrder("BUY","CE",quantity);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Short Put\n\t\t\t\topenalgo.PlaceOrder("SELL","PE",quantity);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            \n            \n            else if (AlgoBuy != True )\n            {  \n                StaticVarSet(static_name_+"buyAlgo",0);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue","");\n            \n            }\n            \n             if (AlgoSell==True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)\n            { \n            \n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t//Exit Long Call Option\n\t\t\t\t\n\t\t\t\topenalgo.ExitOrder("SELL","CE"); \n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Exit Short Put Option\n\t\t\t\topenalgo.ExitOrder("BUY","PE"); \n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t_TRACE("Exit API Request : "+ex_api_request);\n\t\t\t\t_TRACE("Exit API Response : "+ex_api_response);\n\n                StaticVarSet(static_name_+"sellAlgo",1);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);\n            }\n            else if (AlgoSell != True )\n            {  \n                StaticVarSet(static_name_+"sellAlgo",0);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue","");\n            \n            }\n            \n        } \n        else if(EnableAlgo == "ShortOnly")\n        {\n            if (AlgoShort==True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)\n            {\n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t//Long Put\n\t\t\t\topenalgo.PlaceOrder("BUY","PE",quantity);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Short Call\n\t\t\t\topenalgo.PlaceOrder("SELL","CE",quantity);\n\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoShort != True )\n            {   \n                StaticVarSet(static_name_+"ShortAlgo",0);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");\n            }\n            if (AlgoCover==true AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)\n            {\n            \n\t\t\t\tif(tradetype=="BUY")\n\t\t\t\t{\n\t\t\t\t//Exit Long Put Option\n\t\t\t\t\n\t\t\t\topenalgo.ExitOrder("SELL","PE"); \n\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(tradetype=="SELL")\n\t\t\t\t{\n\t\t\t\t//Exit Short Call Option\n\t\t\t\topenalgo.ExitOrder("BUY","CE"); \n\t\t\t\t\n\t\t\t\t}\n               \n               \n\t\t\t\t_TRACE("Exit API Request : "+ex_api_request);\n\t\t\t\t_TRACE("Exit API Response : "+ex_api_response);\n\n\t\t\t\t\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoCover != True)\n            {   \n                StaticVarSet(static_name_+"CoverAlgo",0);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");\n            }\n        } \n        \n    }\n    \n  \n_SECTION_END();\n\n'})})]})}function c(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(S,{...t})}):S(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>l});var a=n(6540);const r={},o=a.createContext(r);function i(t){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function l(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:i(t.components),a.createElement(o.Provider,{value:e},t.children)}}}]);