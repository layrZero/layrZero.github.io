"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[5354],{4758:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"trading-platform/python/indicators/volatility","title":"Volatility","description":"Volatility indicators measure the degree of price variation in financial instruments. They help traders assess market uncertainty, risk levels, and potential breakout conditions. OpenAlgo provides a comprehensive collection of volatility indicators optimized for performance and accuracy.","source":"@site/docs/trading-platform/python/indicators/volatility.md","sourceDirName":"trading-platform/python/indicators","slug":"/trading-platform/python/indicators/volatility","permalink":"/docs/trading-platform/python/indicators/volatility","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/indicators/volatility.md","tags":[],"version":"current","frontMatter":{}}');var r=l(4848),s=l(8453);const a={},d="Volatility",t={},o=[{value:"Import Statement",id:"import-statement",level:3},{value:"Available Volatility Indicators",id:"available-volatility-indicators",level:3},{value:"Average True Range (ATR)",id:"average-true-range-atr",level:3},{value:"Usage",id:"usage",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"Bollinger Bands",id:"bollinger-bands",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Keltner Channel",id:"keltner-channel",level:3},{value:"Usage",id:"usage-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Donchian Channel",id:"donchian-channel",level:3},{value:"Usage",id:"usage-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Chaikin Volatility",id:"chaikin-volatility",level:3},{value:"Usage",id:"usage-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"Normalized Average True Range (NATR)",id:"normalized-average-true-range-natr",level:3},{value:"Usage",id:"usage-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"Relative Volatility Index (RVI)",id:"relative-volatility-index-rvi",level:3},{value:"Usage",id:"usage-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"Ultimate Oscillator",id:"ultimate-oscillator",level:3},{value:"Usage",id:"usage-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-7",level:4},{value:"True Range",id:"true-range",level:3},{value:"Usage",id:"usage-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-8",level:4},{value:"Mass Index",id:"mass-index",level:3},{value:"Usage",id:"usage-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example",id:"example-9",level:4},{value:"Bollinger Bands %B",id:"bollinger-bands-b",level:3},{value:"Usage",id:"usage-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example",id:"example-10",level:4},{value:"Bollinger Bandwidth",id:"bollinger-bandwidth",level:3},{value:"Usage",id:"usage-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Example",id:"example-11",level:4},{value:"Chandelier Exit",id:"chandelier-exit",level:3},{value:"Usage",id:"usage-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Example",id:"example-12",level:4},{value:"Historical Volatility",id:"historical-volatility",level:3},{value:"Usage",id:"usage-13",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Example",id:"example-13",level:4},{value:"Ulcer Index",id:"ulcer-index",level:3},{value:"Usage",id:"usage-14",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Example",id:"example-14",level:4},{value:"STARC Bands",id:"starc-bands",level:3},{value:"Usage",id:"usage-15",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Example",id:"example-15",level:4},{value:"Complete Example: Volatility Analysis",id:"complete-example-volatility-analysis",level:3},{value:"Common Use Cases",id:"common-use-cases",level:3},{value:"Performance Tips",id:"performance-tips",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"volatility",children:"Volatility"})}),"\n",(0,r.jsx)(n.p,{children:"Volatility indicators measure the degree of price variation in financial instruments. They help traders assess market uncertainty, risk levels, and potential breakout conditions. OpenAlgo provides a comprehensive collection of volatility indicators optimized for performance and accuracy."}),"\n",(0,r.jsx)(n.h3,{id:"import-statement",children:"Import Statement"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from openalgo import ta\nfrom openalgo import api\n\n# Initialize API client\nclient = api(api_key=\'your_api_key_here\', host=\'http://127.0.0.1:5000\')\n\n# Get sample data\ndf = client.history(symbol="SBIN", exchange="NSE", interval="5m", \n                   start_date="2025-04-01", end_date="2025-04-08")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"available-volatility-indicators",children:"Available Volatility Indicators"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"average-true-range-atr",children:"Average True Range (ATR)"}),"\n",(0,r.jsx)(n.p,{children:"ATR measures market volatility by decomposing the entire range of an asset price for that period. It's one of the most widely used volatility indicators."}),"\n",(0,r.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"atr_result = ta.atr(high, low, close, period=14)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"close"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": Number of periods for ATR calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": ATR values in the same format as input"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate 14-period ATR\natr_14 = ta.atr(df['high'], df['low'], df['close'], period=14)\ndf['ATR_14'] = atr_14\n\n# Calculate 21-period ATR\natr_21 = ta.atr(df['high'], df['low'], df['close'], period=21)\ndf['ATR_21'] = atr_21\n\nprint(df[['close', 'ATR_14', 'ATR_21']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"bollinger-bands",children:"Bollinger Bands"}),"\n",(0,r.jsx)(n.p,{children:"Bollinger Bands consist of a middle band (SMA) and two outer bands that are standard deviations away from the middle band, used to identify overbought and oversold conditions."}),"\n",(0,r.jsx)(n.h4,{id:"usage-1",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"upper, middle, lower = ta.bbands(data, period=20, std_dev=2.0)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": Number of periods for moving average and standard deviation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"std_dev"})," ",(0,r.jsx)(n.em,{children:"(float, default=2.0)"}),": Number of standard deviations for the bands"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tuple"}),": (upper_band, middle_band, lower_band) arrays"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Bollinger Bands\nbb_upper, bb_middle, bb_lower = ta.bbands(df['close'], period=20, std_dev=2.0)\ndf['BB_Upper'] = bb_upper\ndf['BB_Middle'] = bb_middle\ndf['BB_Lower'] = bb_lower\n\n# Calculate tighter bands\nbb_upper_tight, bb_middle_tight, bb_lower_tight = ta.bbands(df['close'], period=20, std_dev=1.5)\ndf['BB_Upper_Tight'] = bb_upper_tight\ndf['BB_Lower_Tight'] = bb_lower_tight\n\nprint(df[['close', 'BB_Upper', 'BB_Middle', 'BB_Lower']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"keltner-channel",children:"Keltner Channel"}),"\n",(0,r.jsx)(n.p,{children:"Keltner Channels are volatility-based envelopes set above and below an exponential moving average, using ATR to set channel distance."}),"\n",(0,r.jsx)(n.h4,{id:"usage-2",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"upper, middle, lower = ta.keltner(high, low, close, ema_period=20, atr_period=10, multiplier=2.0)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"close"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ema_period"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": Period for the EMA calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"atr_period"})," ",(0,r.jsx)(n.em,{children:"(int, default=10)"}),": Period for the ATR calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"multiplier"})," ",(0,r.jsx)(n.em,{children:"(float, default=2.0)"}),": Multiplier for the ATR"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tuple"}),": (upper_channel, middle_line, lower_channel) arrays"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Keltner Channel\nkc_upper, kc_middle, kc_lower = ta.keltner(df['high'], df['low'], df['close'])\ndf['KC_Upper'] = kc_upper\ndf['KC_Middle'] = kc_middle\ndf['KC_Lower'] = kc_lower\n\n# Custom parameters\nkc_upper_custom, kc_middle_custom, kc_lower_custom = ta.keltner(\n    df['high'], df['low'], df['close'], \n    ema_period=14, atr_period=14, multiplier=1.5\n)\n\nprint(df[['close', 'KC_Upper', 'KC_Middle', 'KC_Lower']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"donchian-channel",children:"Donchian Channel"}),"\n",(0,r.jsx)(n.p,{children:"Donchian Channels are formed by taking the highest high and lowest low of the last n periods, providing dynamic support and resistance levels."}),"\n",(0,r.jsx)(n.h4,{id:"usage-3",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"upper, middle, lower = ta.donchian(high, low, period=20)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": Number of periods for the channel calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tuple"}),": (upper_channel, middle_line, lower_channel) arrays"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Donchian Channel\ndc_upper, dc_middle, dc_lower = ta.donchian(df['high'], df['low'], period=20)\ndf['DC_Upper'] = dc_upper\ndf['DC_Middle'] = dc_middle\ndf['DC_Lower'] = dc_lower\n\n# Different periods\ndc_upper_10, dc_middle_10, dc_lower_10 = ta.donchian(df['high'], df['low'], period=10)\ndf['DC_Upper_10'] = dc_upper_10\ndf['DC_Lower_10'] = dc_lower_10\n\nprint(df[['high', 'low', 'DC_Upper', 'DC_Middle', 'DC_Lower']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"chaikin-volatility",children:"Chaikin Volatility"}),"\n",(0,r.jsx)(n.p,{children:"Chaikin Volatility measures the rate of change of the trading range, indicating periods of increasing or decreasing volatility."}),"\n",(0,r.jsx)(n.h4,{id:"usage-4",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"cv_result = ta.chaikin(high, low, ema_period=10, roc_period=10)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ema_period"})," ",(0,r.jsx)(n.em,{children:"(int, default=10)"}),": Period for EMA of high-low range"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"roc_period"})," ",(0,r.jsx)(n.em,{children:"(int, default=10)"}),": Period for rate of change calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Chaikin Volatility values"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Chaikin Volatility\ncv = ta.chaikin(df['high'], df['low'])\ndf['Chaikin_Volatility'] = cv\n\n# Custom parameters\ncv_custom = ta.chaikin(df['high'], df['low'], ema_period=14, roc_period=14)\ndf['CV_Custom'] = cv_custom\n\nprint(df[['close', 'Chaikin_Volatility', 'CV_Custom']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"normalized-average-true-range-natr",children:"Normalized Average True Range (NATR)"}),"\n",(0,r.jsx)(n.p,{children:"NATR is ATR expressed as a percentage of closing price, making it useful for comparing volatility across different price levels."}),"\n",(0,r.jsx)(n.h4,{id:"usage-5",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"natr_result = ta.natr(high, low, close, period=14)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"close"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": Period for ATR calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": NATR values (percentage)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate NATR\nnatr = ta.natr(df['high'], df['low'], df['close'], period=14)\ndf['NATR'] = natr\n\n# Different period\nnatr_21 = ta.natr(df['high'], df['low'], df['close'], period=21)\ndf['NATR_21'] = natr_21\n\nprint(df[['close', 'NATR', 'NATR_21']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"relative-volatility-index-rvi",children:"Relative Volatility Index (RVI)"}),"\n",(0,r.jsx)(n.p,{children:"RVI applies the RSI calculation to standard deviation instead of price changes, measuring volatility momentum."}),"\n",(0,r.jsx)(n.h4,{id:"usage-6",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"rvi_result = ta.rvi(data, stdev_period=10, rsi_period=14)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"stdev_period"})," ",(0,r.jsx)(n.em,{children:"(int, default=10)"}),": Period for standard deviation calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"rsi_period"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": Period for RSI calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": RVI values (0-100 range)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate RVI\nrvi = ta.rvi(df['close'])\ndf['RVI'] = rvi\n\n# Custom parameters\nrvi_custom = ta.rvi(df['close'], stdev_period=14, rsi_period=21)\ndf['RVI_Custom'] = rvi_custom\n\nprint(df[['close', 'RVI', 'RVI_Custom']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"ultimate-oscillator",children:"Ultimate Oscillator"}),"\n",(0,r.jsx)(n.p,{children:"Ultimate Oscillator combines short, medium, and long-term price action into one oscillator, incorporating volatility analysis."}),"\n",(0,r.jsx)(n.h4,{id:"usage-7",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"uo_result = ta.ultimate_oscillator(high, low, close, period1=7, period2=14, period3=28)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"close"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period1"})," ",(0,r.jsx)(n.em,{children:"(int, default=7)"}),": Short period"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period2"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": Medium period"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period3"})," ",(0,r.jsx)(n.em,{children:"(int, default=28)"}),": Long period"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Ultimate Oscillator values (0-100 range)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Ultimate Oscillator\nuo = ta.ultimate_oscillator(df['high'], df['low'], df['close'])\ndf['Ultimate_Oscillator'] = uo\n\n# Custom periods\nuo_custom = ta.ultimate_oscillator(df['high'], df['low'], df['close'], \n                                  period1=5, period2=10, period3=20)\ndf['UO_Custom'] = uo_custom\n\nprint(df[['close', 'Ultimate_Oscillator', 'UO_Custom']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"true-range",children:"True Range"}),"\n",(0,r.jsx)(n.p,{children:"True Range measures volatility that accounts for gaps between periods."}),"\n",(0,r.jsx)(n.h4,{id:"usage-8",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"tr_result = ta.true_range(high, low, close)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"close"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": True Range values"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate True Range\ntr = ta.true_range(df['high'], df['low'], df['close'])\ndf['True_Range'] = tr\n\nprint(df[['high', 'low', 'close', 'True_Range']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"mass-index",children:"Mass Index"}),"\n",(0,r.jsx)(n.p,{children:"Mass Index uses the high-low range to identify trend reversals based on range expansion."}),"\n",(0,r.jsx)(n.h4,{id:"usage-9",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"mass_result = ta.massindex(high, low, length=10)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"length"})," ",(0,r.jsx)(n.em,{children:"(int, default=10)"}),": Period for sum calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Mass Index values"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-9",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Mass Index\nmass = ta.massindex(df['high'], df['low'])\ndf['Mass_Index'] = mass\n\n# Different period\nmass_14 = ta.massindex(df['high'], df['low'], length=14)\ndf['Mass_Index_14'] = mass_14\n\nprint(df[['close', 'Mass_Index', 'Mass_Index_14']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"bollinger-bands-b",children:"Bollinger Bands %B"}),"\n",(0,r.jsx)(n.p,{children:"%B shows where price is in relation to the Bollinger Bands, with 1 indicating price at upper band and 0 at lower band."}),"\n",(0,r.jsx)(n.h4,{id:"usage-10",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"percent_b = ta.bbpercent(data, period=20, std_dev=2.0)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": Period for moving average and standard deviation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"std_dev"})," ",(0,r.jsx)(n.em,{children:"(float, default=2.0)"}),": Number of standard deviations for the bands"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": %B values"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-10",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Bollinger Bands %B\nbb_percent = ta.bbpercent(df['close'])\ndf['BB_Percent_B'] = bb_percent\n\n# Custom parameters\nbb_percent_tight = ta.bbpercent(df['close'], period=14, std_dev=1.5)\ndf['BB_Percent_B_Tight'] = bb_percent_tight\n\nprint(df[['close', 'BB_Percent_B', 'BB_Percent_B_Tight']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"bollinger-bandwidth",children:"Bollinger Bandwidth"}),"\n",(0,r.jsx)(n.p,{children:"Bollinger Bandwidth measures the width of the Bollinger Bands, useful for identifying volatility squeezes."}),"\n",(0,r.jsx)(n.h4,{id:"usage-11",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"bandwidth = ta.bbwidth(data, period=20, std_dev=2.0)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": Period for moving average and standard deviation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"std_dev"})," ",(0,r.jsx)(n.em,{children:"(float, default=2.0)"}),": Number of standard deviations for the bands"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Bandwidth values"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-11",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Bollinger Bandwidth\nbb_width = ta.bbwidth(df['close'])\ndf['BB_Bandwidth'] = bb_width\n\n# Different standard deviation\nbb_width_tight = ta.bbwidth(df['close'], std_dev=1.5)\ndf['BB_Bandwidth_Tight'] = bb_width_tight\n\nprint(df[['close', 'BB_Bandwidth', 'BB_Bandwidth_Tight']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"chandelier-exit",children:"Chandelier Exit"}),"\n",(0,r.jsx)(n.p,{children:"Chandelier Exit is a trailing stop-loss technique that follows price action using highest/lowest values and ATR."}),"\n",(0,r.jsx)(n.h4,{id:"usage-12",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"long_exit, short_exit = ta.chandelier_exit(high, low, close, period=22, multiplier=3.0)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"close"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=22)"}),": Period for highest/lowest and ATR calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"multiplier"})," ",(0,r.jsx)(n.em,{children:"(float, default=3.0)"}),": ATR multiplier"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tuple"}),": (long_exit, short_exit) arrays"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-12",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Chandelier Exit\nce_long, ce_short = ta.chandelier_exit(df['high'], df['low'], df['close'])\ndf['CE_Long_Exit'] = ce_long\ndf['CE_Short_Exit'] = ce_short\n\n# Custom parameters\nce_long_custom, ce_short_custom = ta.chandelier_exit(\n    df['high'], df['low'], df['close'], period=14, multiplier=2.0\n)\ndf['CE_Long_Custom'] = ce_long_custom\ndf['CE_Short_Custom'] = ce_short_custom\n\nprint(df[['close', 'CE_Long_Exit', 'CE_Short_Exit']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"historical-volatility",children:"Historical Volatility"}),"\n",(0,r.jsx)(n.p,{children:"Historical Volatility measures the standard deviation of logarithmic returns over a specified period."}),"\n",(0,r.jsx)(n.h4,{id:"usage-13",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"hv_result = ta.hv(close, length=10, annual=365, per=1)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"close"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"length"})," ",(0,r.jsx)(n.em,{children:"(int, default=10)"}),": Period for volatility calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"annual"})," ",(0,r.jsx)(n.em,{children:"(int, default=365)"}),": Annual periods for scaling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"per"})," ",(0,r.jsx)(n.em,{children:"(int, default=1)"}),": Timeframe periods (1 for daily/intraday, 7 for weekly+)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Historical volatility values (annualized percentages)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-13",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Historical Volatility\nhv = ta.hv(df['close'], length=20)\ndf['Historical_Volatility'] = hv\n\n# Different periods\nhv_10 = ta.hv(df['close'], length=10)\nhv_30 = ta.hv(df['close'], length=30)\ndf['HV_10'] = hv_10\ndf['HV_30'] = hv_30\n\nprint(df[['close', 'Historical_Volatility', 'HV_10', 'HV_30']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"ulcer-index",children:"Ulcer Index"}),"\n",(0,r.jsx)(n.p,{children:"Ulcer Index measures downside risk by calculating the depth and duration of drawdowns from recent highs."}),"\n",(0,r.jsx)(n.h4,{id:"usage-14",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'ui_result = ta.ulcerindex(data, length=14, smooth_length=14, signal_length=52, \n                         signal_type="SMA", return_signal=False)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"length"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": Period for highest calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"smooth_length"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": Period for smoothing squared drawdowns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"signal_length"})," ",(0,r.jsx)(n.em,{children:"(int, default=52)"}),": Period for signal line calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"signal_type"})," ",(0,r.jsx)(n.em,{children:'(str, default="SMA")'}),': Signal smoothing type ("SMA" or "EMA")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"return_signal"})," ",(0,r.jsx)(n.em,{children:"(bool, default=False)"}),": Whether to return signal line"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"})," or ",(0,r.jsx)(n.strong,{children:"tuple"}),": Ulcer Index values (and signal if return_signal=True)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-14",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Ulcer Index\nui = ta.ulcerindex(df['close'])\ndf['Ulcer_Index'] = ui\n\n# With signal line\nui_with_signal, ui_signal = ta.ulcerindex(df['close'], return_signal=True)\ndf['UI_Signal'] = ui_signal\n\n# Custom parameters\nui_custom = ta.ulcerindex(df['close'], length=21, smooth_length=21)\ndf['UI_Custom'] = ui_custom\n\nprint(df[['close', 'Ulcer_Index', 'UI_Signal', 'UI_Custom']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"starc-bands",children:"STARC Bands"}),"\n",(0,r.jsx)(n.p,{children:"STARC Bands use a Simple Moving Average and Average True Range to create volatility-based bands."}),"\n",(0,r.jsx)(n.h4,{id:"usage-15",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"upper, middle, lower = ta.starc(high, low, close, ma_period=5, atr_period=15, multiplier=1.33)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"close"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ma_period"})," ",(0,r.jsx)(n.em,{children:"(int, default=5)"}),": Period for SMA calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"atr_period"})," ",(0,r.jsx)(n.em,{children:"(int, default=15)"}),": Period for ATR calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"multiplier"})," ",(0,r.jsx)(n.em,{children:"(float, default=1.33)"}),": ATR multiplier"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-15",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tuple"}),": (upper_band, middle_line, lower_band) arrays"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-15",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate STARC Bands\nstarc_upper, starc_middle, starc_lower = ta.starc(df['high'], df['low'], df['close'])\ndf['STARC_Upper'] = starc_upper\ndf['STARC_Middle'] = starc_middle\ndf['STARC_Lower'] = starc_lower\n\n# Custom parameters\nstarc_upper_custom, starc_middle_custom, starc_lower_custom = ta.starc(\n    df['high'], df['low'], df['close'], \n    ma_period=10, atr_period=20, multiplier=2.0\n)\n\nprint(df[['close', 'STARC_Upper', 'STARC_Middle', 'STARC_Lower']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"complete-example-volatility-analysis",children:"Complete Example: Volatility Analysis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from openalgo import ta, api\nimport pandas as pd\n\n# Initialize API and get data\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\ndf = client.history(symbol=\"SBIN\", exchange=\"NSE\", interval=\"5m\", \n                   start_date=\"2025-04-01\", end_date=\"2025-04-08\")\n\n# Calculate multiple volatility indicators\ndf['ATR'] = ta.atr(df['high'], df['low'], df['close'], period=14)\ndf['NATR'] = ta.natr(df['high'], df['low'], df['close'], period=14)\n\n# Bollinger Bands\nbb_upper, bb_middle, bb_lower = ta.bbands(df['close'], period=20, std_dev=2.0)\ndf['BB_Upper'] = bb_upper\ndf['BB_Middle'] = bb_middle\ndf['BB_Lower'] = bb_lower\ndf['BB_Width'] = ta.bbwidth(df['close'], period=20, std_dev=2.0)\ndf['BB_Percent_B'] = ta.bbpercent(df['close'], period=20, std_dev=2.0)\n\n# Keltner Channel\nkc_upper, kc_middle, kc_lower = ta.keltner(df['high'], df['low'], df['close'])\ndf['KC_Upper'] = kc_upper\ndf['KC_Middle'] = kc_middle\ndf['KC_Lower'] = kc_lower\n\n# Donchian Channel\ndc_upper, dc_middle, dc_lower = ta.donchian(df['high'], df['low'], period=20)\ndf['DC_Upper'] = dc_upper\ndf['DC_Middle'] = dc_middle\ndf['DC_Lower'] = dc_lower\n\n# Advanced volatility indicators\ndf['RVI'] = ta.rvi(df['close'])\ndf['Historical_Vol'] = ta.hv(df['close'], length=20)\ndf['Ulcer_Index'] = ta.ulcerindex(df['close'])\ndf['Mass_Index'] = ta.massindex(df['high'], df['low'])\n\n# Chandelier Exit levels\nce_long, ce_short = ta.chandelier_exit(df['high'], df['low'], df['close'])\ndf['CE_Long'] = ce_long\ndf['CE_Short'] = ce_short\n\n# Volatility analysis\nprint(\"=== Volatility Analysis ===\")\nprint(f\"Average ATR: {df['ATR'].mean():.2f}\")\nprint(f\"Average NATR: {df['NATR'].mean():.2f}%\")\nprint(f\"Average Historical Volatility: {df['Historical_Vol'].mean():.2f}%\")\nprint(f\"Average BB Width: {df['BB_Width'].mean():.4f}\")\n\n# Recent values\nprint(\"\\n=== Recent Volatility Indicators ===\")\nrecent_data = df[['close', 'ATR', 'NATR', 'BB_Width', 'RVI', 'Historical_Vol']].tail()\nprint(recent_data)\n\n# Volatility squeeze detection (BB Width < KC Width equivalent)\ndf['Squeeze'] = (df['BB_Upper'] - df['BB_Lower']) < (df['KC_Upper'] - df['KC_Lower'])\nprint(f\"\\nVolatility Squeeze periods: {df['Squeeze'].sum()} out of {len(df)} periods\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Volatility Breakouts"}),": Use BB Width and Mass Index to identify low volatility periods before breakouts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Risk Management"}),": Use ATR and NATR for position sizing and stop-loss placement"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Overbought/Oversold"}),": Use BB %B and RVI to identify extreme price levels"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trend Strength"}),": Higher volatility often accompanies strong trends"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Market Regime"}),": Compare different volatility measures to understand market conditions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Efficient Calculations"}),": Use vectorized operations for multiple timeframes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Management"}),": Calculate only needed indicators to save memory"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameter Optimization"}),": Test different periods for your specific market and timeframe"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Combination Analysis"}),": Use multiple volatility indicators together for confirmation"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>a,x:()=>d});var i=l(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);