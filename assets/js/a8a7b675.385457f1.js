"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[3088],{4505:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"trading-platform/python/indicators/hybrid","title":"Hybrid","description":"Hybrid indicators combine multiple analytical approaches to provide comprehensive market analysis. These indicators often merge trend, momentum, volatility, and volume components for enhanced signal quality.","source":"@site/docs/trading-platform/python/indicators/hybrid.md","sourceDirName":"trading-platform/python/indicators","slug":"/trading-platform/python/indicators/hybrid","permalink":"/docs/trading-platform/python/indicators/hybrid","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/indicators/hybrid.md","tags":[],"version":"current","frontMatter":{}}');var a=r(4848),l=r(8453);const s={},o="Hybrid",t={},d=[{value:"Import Statement",id:"import-statement",level:3},{value:"Available Hybrid Indicators",id:"available-hybrid-indicators",level:3},{value:"Average Directional Index (ADX)",id:"average-directional-index-adx",level:3},{value:"Usage",id:"usage",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"Aroon Indicator",id:"aroon-indicator",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Pivot Points",id:"pivot-points",level:3},{value:"Usage",id:"usage-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Parabolic SAR",id:"parabolic-sar",level:3},{value:"Usage",id:"usage-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Directional Movement Index (DMI)",id:"directional-movement-index-dmi",level:3},{value:"Usage",id:"usage-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"Williams Fractals",id:"williams-fractals",level:3},{value:"Usage",id:"usage-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"Random Walk Index (RWI)",id:"random-walk-index-rwi",level:3},{value:"Usage",id:"usage-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"Complete Example: Comprehensive Trend Analysis",id:"complete-example-comprehensive-trend-analysis",level:3},{value:"Advanced Usage: Multi-Timeframe Analysis",id:"advanced-usage-multi-timeframe-analysis",level:3},{value:"Performance Tips",id:"performance-tips",level:3},{value:"Common Use Cases",id:"common-use-cases",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"hybrid",children:"Hybrid"})}),"\n",(0,a.jsx)(n.p,{children:"Hybrid indicators combine multiple analytical approaches to provide comprehensive market analysis. These indicators often merge trend, momentum, volatility, and volume components for enhanced signal quality."}),"\n",(0,a.jsx)(n.h3,{id:"import-statement",children:"Import Statement"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from openalgo import api, ta\n\n# Get data using OpenAlgo API\nclient = api(api_key=\'your_api_key_here\', host=\'http://127.0.0.1:5000\')\ndf = client.history(symbol="SBIN", exchange="NSE", interval="5m", \n                   start_date="2025-04-01", end_date="2025-04-08")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"available-hybrid-indicators",children:"Available Hybrid Indicators"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"average-directional-index-adx",children:"Average Directional Index (ADX)"}),"\n",(0,a.jsx)(n.p,{children:"ADX measures the strength of a trend regardless of direction, providing both directional indicators (+DI, -DI) and trend strength (ADX)."}),"\n",(0,a.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"di_plus, di_minus, adx = ta.adx(high, low, close, period=14)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"high"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"low"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"close"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int, default=14)"}),": Period for ADX calculation"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tuple"}),": (+DI, -DI, ADX) arrays in the same format as input"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate ADX system\ndi_plus, di_minus, adx = ta.adx(df['high'], df['low'], df['close'], period=14)\n\ndf['DI_Plus'] = di_plus\ndf['DI_Minus'] = di_minus  \ndf['ADX'] = adx\n\n# Trend analysis\ndf['Trend_Strength'] = df['ADX'].apply(lambda x: 'Strong' if x > 25 else 'Weak' if x > 20 else 'No Trend')\ndf['Trend_Direction'] = df.apply(lambda row: 'Bullish' if row['DI_Plus'] > row['DI_Minus'] \n                                 else 'Bearish' if row['DI_Minus'] > row['DI_Plus'] else 'Neutral', axis=1)\n\nprint(df[['close', 'DI_Plus', 'DI_Minus', 'ADX', 'Trend_Strength', 'Trend_Direction']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"aroon-indicator",children:"Aroon Indicator"}),"\n",(0,a.jsx)(n.p,{children:"Aroon indicators measure the time since the highest high and lowest low, indicating trend strength and potential reversals."}),"\n",(0,a.jsx)(n.h4,{id:"usage-1",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"aroon_up, aroon_down = ta.aroon(high, low, period=14)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"high"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"low"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int, default=14)"}),": Period for Aroon calculation"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tuple"}),": (aroon_up, aroon_down) arrays in the same format as input"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate Aroon indicators\naroon_up, aroon_down = ta.aroon(df['high'], df['low'], period=25)\n\ndf['Aroon_Up'] = aroon_up\ndf['Aroon_Down'] = aroon_down\ndf['Aroon_Oscillator'] = df['Aroon_Up'] - df['Aroon_Down']\n\n# Signal interpretation\ndf['Aroon_Signal'] = df.apply(lambda row: \n    'Strong Uptrend' if row['Aroon_Up'] > 70 and row['Aroon_Down'] < 30\n    else 'Strong Downtrend' if row['Aroon_Down'] > 70 and row['Aroon_Up'] < 30\n    else 'Sideways' if abs(row['Aroon_Up'] - row['Aroon_Down']) < 20\n    else 'Trending', axis=1)\n\nprint(df[['close', 'Aroon_Up', 'Aroon_Down', 'Aroon_Oscillator', 'Aroon_Signal']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"pivot-points",children:"Pivot Points"}),"\n",(0,a.jsx)(n.p,{children:"Traditional pivot points calculate support and resistance levels based on previous period's high, low, and close."}),"\n",(0,a.jsx)(n.h4,{id:"usage-2",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"pivot, r1, s1, r2, s2, r3, s3 = ta.pivot_points(high, low, close)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"high"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"low"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"close"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tuple"}),": (pivot, r1, s1, r2, s2, r3, s3) arrays"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate Pivot Points\npivot, r1, s1, r2, s2, r3, s3 = ta.pivot_points(df['high'], df['low'], df['close'])\n\ndf['Pivot'] = pivot\ndf['Resistance_1'] = r1\ndf['Support_1'] = s1\ndf['Resistance_2'] = r2\ndf['Support_2'] = s2\ndf['Resistance_3'] = r3\ndf['Support_3'] = s3\n\n# Identify price position relative to pivot\ndf['Price_Position'] = df.apply(lambda row:\n    'Above R2' if row['close'] > row['Resistance_2']\n    else 'Above R1' if row['close'] > row['Resistance_1']\n    else 'Above Pivot' if row['close'] > row['Pivot']\n    else 'Below Pivot' if row['close'] < row['Support_1']\n    else 'Below S1' if row['close'] < row['Support_2']\n    else 'Below S2' if row['close'] < row['Support_2']\n    else 'Near Pivot', axis=1)\n\nprint(df[['close', 'Pivot', 'Resistance_1', 'Support_1', 'Price_Position']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"parabolic-sar",children:"Parabolic SAR"}),"\n",(0,a.jsx)(n.p,{children:"Parabolic SAR provides trailing stop levels and trend direction signals."}),"\n",(0,a.jsx)(n.h4,{id:"usage-3",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"sar_values, trend_direction = ta.psar(high, low, acceleration=0.02, maximum=0.2)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"high"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"low"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"acceleration"})," ",(0,a.jsx)(n.em,{children:"(float, default=0.02)"}),": Acceleration factor"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"maximum"})," ",(0,a.jsx)(n.em,{children:"(float, default=0.2)"}),": Maximum acceleration factor"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tuple"}),": (sar_values, trend_direction) arrays"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate Parabolic SAR\nsar_values, trend_direction = ta.psar(df['high'], df['low'])\n\ndf['SAR'] = sar_values\ndf['SAR_Trend'] = trend_direction\n\n# Generate trading signals\ndf['SAR_Signal'] = df.apply(lambda row:\n    'Buy' if row['close'] > row['SAR'] and row['SAR_Trend'] == -1  # Uptrend\n    else 'Sell' if row['close'] < row['SAR'] and row['SAR_Trend'] == 1  # Downtrend\n    else 'Hold', axis=1)\n\n# Calculate distance from SAR (risk management)\ndf['SAR_Distance'] = abs(df['close'] - df['SAR'])\ndf['SAR_Distance_Pct'] = (df['SAR_Distance'] / df['close']) * 100\n\nprint(df[['close', 'SAR', 'SAR_Signal', 'SAR_Distance_Pct']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"directional-movement-index-dmi",children:"Directional Movement Index (DMI)"}),"\n",(0,a.jsx)(n.p,{children:"DMI focuses on the directional indicators (+DI and -DI) without the ADX component."}),"\n",(0,a.jsx)(n.h4,{id:"usage-4",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"di_plus, di_minus = ta.dmi(high, low, close, period=14)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"high"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"low"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"close"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int, default=14)"}),": Period for DMI calculation"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tuple"}),": (+DI, -DI) arrays in the same format as input"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate DMI\ndi_plus, di_minus = ta.dmi(df['high'], df['low'], df['close'])\n\ndf['DI_Plus'] = di_plus\ndf['DI_Minus'] = di_minus\ndf['DI_Spread'] = df['DI_Plus'] - df['DI_Minus']\n\n# Generate directional signals\ndf['DMI_Signal'] = df.apply(lambda row:\n    'Strong Buy' if row['DI_Plus'] > row['DI_Minus'] and row['DI_Spread'] > 10\n    else 'Buy' if row['DI_Plus'] > row['DI_Minus']\n    else 'Strong Sell' if row['DI_Minus'] > row['DI_Plus'] and row['DI_Spread'] < -10\n    else 'Sell' if row['DI_Minus'] > row['DI_Plus']\n    else 'Neutral', axis=1)\n\nprint(df[['close', 'DI_Plus', 'DI_Minus', 'DI_Spread', 'DMI_Signal']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"williams-fractals",children:"Williams Fractals"}),"\n",(0,a.jsx)(n.p,{children:"Williams Fractals identify turning points (fractals) in price action using local highs and lows."}),"\n",(0,a.jsx)(n.h4,{id:"usage-5",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"fractal_up, fractal_down = ta.fractals(high, low, periods=2)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"high"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"low"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"periods"})," ",(0,a.jsx)(n.em,{children:"(int, default=2)"}),": Number of periods to check (minimum 2)"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tuple"}),": (fractal_up, fractal_down) boolean arrays indicating fractal points"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate Williams Fractals\nfractal_up, fractal_down = ta.fractals(df['high'], df['low'], periods=2)\n\ndf['Fractal_Up'] = fractal_up\ndf['Fractal_Down'] = fractal_down\n\n# Mark fractal levels\ndf['Fractal_High'] = df['high'].where(df['Fractal_Up'])\ndf['Fractal_Low'] = df['low'].where(df['Fractal_Down'])\n\n# Count recent fractals for market structure analysis\nwindow = 20\ndf['Recent_Fractal_Highs'] = df['Fractal_Up'].rolling(window).sum()\ndf['Recent_Fractal_Lows'] = df['Fractal_Down'].rolling(window).sum()\n\ndf['Market_Structure'] = df.apply(lambda row:\n    'Bullish Structure' if row['Recent_Fractal_Lows'] > row['Recent_Fractal_Highs']\n    else 'Bearish Structure' if row['Recent_Fractal_Highs'] > row['Recent_Fractal_Lows']\n    else 'Balanced', axis=1)\n\nprint(df[['close', 'Fractal_High', 'Fractal_Low', 'Market_Structure']].dropna().tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"random-walk-index-rwi",children:"Random Walk Index (RWI)"}),"\n",(0,a.jsx)(n.p,{children:"RWI measures how much a security's price movement differs from a random walk, helping identify trending vs. random price movements."}),"\n",(0,a.jsx)(n.h4,{id:"usage-6",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"rwi_high, rwi_low = ta.rwi(high, low, close, period=14)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"high"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"low"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"close"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int, default=14)"}),": Period for RWI calculation"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tuple"}),": (rwi_high, rwi_low) arrays in the same format as input"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate Random Walk Index\nrwi_high, rwi_low = ta.rwi(df['high'], df['low'], df['close'], period=14)\n\ndf['RWI_High'] = rwi_high\ndf['RWI_Low'] = rwi_low\ndf['RWI_Max'] = df[['RWI_High', 'RWI_Low']].max(axis=1)\n\n# Interpret RWI signals\ndf['RWI_Signal'] = df.apply(lambda row:\n    'Strong Uptrend' if row['RWI_High'] > 1.0 and row['RWI_High'] > row['RWI_Low']\n    else 'Strong Downtrend' if row['RWI_Low'] > 1.0 and row['RWI_Low'] > row['RWI_High']\n    else 'Weak Uptrend' if row['RWI_High'] > row['RWI_Low'] and row['RWI_High'] > 0.6\n    else 'Weak Downtrend' if row['RWI_Low'] > row['RWI_High'] and row['RWI_Low'] > 0.6\n    else 'Random Walk', axis=1)\n\n# Calculate trend strength\ndf['Trend_Strength_RWI'] = df['RWI_Max'].apply(lambda x:\n    'Very Strong' if x > 1.5\n    else 'Strong' if x > 1.0\n    else 'Moderate' if x > 0.6\n    else 'Weak')\n\nprint(df[['close', 'RWI_High', 'RWI_Low', 'RWI_Signal', 'Trend_Strength_RWI']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"complete-example-comprehensive-trend-analysis",children:"Complete Example: Comprehensive Trend Analysis"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import pandas as pd\nfrom openalgo import api, ta\n\n# Get market data\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\ndf = client.history(symbol=\"SBIN\", exchange=\"NSE\", interval=\"5m\", \n                   start_date=\"2025-04-01\", end_date=\"2025-04-08\")\n\n# Calculate multiple hybrid indicators\nprint(\"Calculating hybrid indicators...\")\n\n# ADX System\ndi_plus, di_minus, adx = ta.adx(df['high'], df['low'], df['close'])\ndf['DI_Plus'] = di_plus\ndf['DI_Minus'] = di_minus\ndf['ADX'] = adx\n\n# Aroon System\naroon_up, aroon_down = ta.aroon(df['high'], df['low'])\ndf['Aroon_Up'] = aroon_up\ndf['Aroon_Down'] = aroon_down\ndf['Aroon_Osc'] = df['Aroon_Up'] - df['Aroon_Down']\n\n# Parabolic SAR\nsar_values, sar_trend = ta.psar(df['high'], df['low'])\ndf['SAR'] = sar_values\ndf['SAR_Trend'] = sar_trend\n\n# Random Walk Index\nrwi_high, rwi_low = ta.rwi(df['high'], df['low'], df['close'])\ndf['RWI_High'] = rwi_high\ndf['RWI_Low'] = rwi_low\n\n# Williams Fractals\nfractal_up, fractal_down = ta.fractals(df['high'], df['low'])\ndf['Fractal_Up'] = fractal_up\ndf['Fractal_Down'] = fractal_down\n\n# Create comprehensive trend signal\ndef comprehensive_trend_signal(row):\n    signals = []\n    \n    # ADX Signal\n    if row['ADX'] > 25:\n        if row['DI_Plus'] > row['DI_Minus']:\n            signals.append('ADX_Bull')\n        else:\n            signals.append('ADX_Bear')\n    \n    # Aroon Signal\n    if row['Aroon_Up'] > 70:\n        signals.append('Aroon_Bull')\n    elif row['Aroon_Down'] > 70:\n        signals.append('Aroon_Bear')\n    \n    # SAR Signal\n    if row['close'] > row['SAR']:\n        signals.append('SAR_Bull')\n    else:\n        signals.append('SAR_Bear')\n    \n    # RWI Signal\n    if row['RWI_High'] > 1.0 and row['RWI_High'] > row['RWI_Low']:\n        signals.append('RWI_Bull')\n    elif row['RWI_Low'] > 1.0 and row['RWI_Low'] > row['RWI_High']:\n        signals.append('RWI_Bear')\n    \n    # Count bullish vs bearish signals\n    bull_count = len([s for s in signals if 'Bull' in s])\n    bear_count = len([s for s in signals if 'Bear' in s])\n    \n    if bull_count > bear_count and bull_count >= 2:\n        return f'Bullish ({bull_count}/{len(signals)})'\n    elif bear_count > bull_count and bear_count >= 2:\n        return f'Bearish ({bear_count}/{len(signals)})'\n    else:\n        return f'Neutral ({bull_count}B/{bear_count}B)'\n\ndf['Comprehensive_Signal'] = df.apply(comprehensive_trend_signal, axis=1)\n\n# Calculate signal strength\ndf['Signal_Strength'] = df.apply(lambda row:\n    row['ADX'] * 0.3 + abs(row['Aroon_Osc']) * 0.3 + \n    max(row['RWI_High'], row['RWI_Low']) * 40, axis=1)\n\n# Display results\nresult_columns = ['close', 'ADX', 'Aroon_Osc', 'SAR', 'RWI_High', 'RWI_Low', \n                 'Comprehensive_Signal', 'Signal_Strength']\n\nprint(\"\\nComprehensive Trend Analysis:\")\nprint(df[result_columns].tail(10))\n\n# Summary statistics\nprint(f\"\\nSignal Distribution:\")\nprint(df['Comprehensive_Signal'].value_counts())\n\nprint(f\"\\nAverage Signal Strength: {df['Signal_Strength'].mean():.2f}\")\nprint(f\"Current Signal Strength: {df['Signal_Strength'].iloc[-1]:.2f}\")\n"})}),"\n",(0,a.jsx)(n.h3,{id:"advanced-usage-multi-timeframe-analysis",children:"Advanced Usage: Multi-Timeframe Analysis"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Function to get multiple timeframe data\ndef get_multi_timeframe_data(symbol, exchange, start_date, end_date):\n    timeframes = ['1m', '5m', '15m', '1h']\n    data = {}\n    \n    for tf in timeframes:\n        try:\n            df = client.history(symbol=symbol, exchange=exchange, interval=tf,\n                              start_date=start_date, end_date=end_date)\n            data[tf] = df\n        except Exception as e:\n            print(f\"Error fetching {tf} data: {e}\")\n    \n    return data\n\n# Multi-timeframe trend analysis\ndef analyze_multi_timeframe_trend(data_dict):\n    results = {}\n    \n    for timeframe, df in data_dict.items():\n        # Calculate key hybrid indicators\n        di_plus, di_minus, adx = ta.adx(df['high'], df['low'], df['close'])\n        aroon_up, aroon_down = ta.aroon(df['high'], df['low'])\n        \n        latest_adx = adx.iloc[-1] if not pd.isna(adx.iloc[-1]) else 0\n        latest_di_plus = di_plus.iloc[-1] if not pd.isna(di_plus.iloc[-1]) else 0\n        latest_di_minus = di_minus.iloc[-1] if not pd.isna(di_minus.iloc[-1]) else 0\n        latest_aroon_up = aroon_up.iloc[-1] if not pd.isna(aroon_up.iloc[-1]) else 0\n        latest_aroon_down = aroon_down.iloc[-1] if not pd.isna(aroon_down.iloc[-1]) else 0\n        \n        # Determine trend\n        if latest_adx > 25:\n            if latest_di_plus > latest_di_minus:\n                trend = 'Bullish'\n            else:\n                trend = 'Bearish'\n        else:\n            trend = 'Sideways'\n        \n        results[timeframe] = {\n            'Trend': trend,\n            'ADX': latest_adx,\n            'Aroon_Strength': abs(latest_aroon_up - latest_aroon_down)\n        }\n    \n    return results\n\n# Example usage\n# mtf_data = get_multi_timeframe_data(\"SBIN\", \"NSE\", \"2025-04-01\", \"2025-04-08\")\n# mtf_analysis = analyze_multi_timeframe_trend(mtf_data)\n# print(\"Multi-Timeframe Analysis:\", mtf_analysis)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Vectorized Operations"}),": Use pandas operations for better performance with large datasets"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Memory Optimization"}),": Calculate only needed indicators to reduce memory usage"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Caching"}),": Store intermediate calculations for reuse across multiple indicators"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Batch Processing"}),": Process multiple symbols together when possible"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Trend Confirmation"}),": Use ADX with Aroon for trend strength validation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Entry Timing"}),": Combine SAR with DMI for precise entry points"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Support/Resistance"}),": Use Pivot Points with Fractals for key levels"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Risk Management"}),": Use RWI to distinguish trending from random movements"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multi-Timeframe"}),": Align signals across different timeframes for higher probability trades"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(6540);const a={},l=i.createContext(a);function s(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);