"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[9482],{532:(t,e,n)=>{n.d(e,{A:()=>a});const a=n.p+"assets/files/symbols-fbdde453d0a6a192a2268acee07dcae6.zip"},8453:(t,e,n)=>{n.d(e,{R:()=>l,x:()=>i});var a=n(6540);const r={},o=a.createContext(r);function l(t){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:l(t.components),a.createElement(o.Provider,{value:e},t.children)}},9507:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>S,frontMatter:()=>l,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"trading-platform/amibroker/csv-exploration-module","title":"CSV Exploration Module","description":"This CSV Exploration Module can be used to trade intraday/positional strategies for any exchanges\\\\","source":"@site/docs/trading-platform/amibroker/csv-exploration-module.md","sourceDirName":"trading-platform/amibroker","slug":"/trading-platform/amibroker/csv-exploration-module","permalink":"/docs/trading-platform/amibroker/csv-exploration-module","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/amibroker/csv-exploration-module.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Button Trading with Stoploss","permalink":"/docs/trading-platform/amibroker/button-trading-with-stoploss"},"next":{"title":"Equity Exploration Module","permalink":"/docs/trading-platform/amibroker/equity-exploration-module"}}');var r=n(4848),o=n(8453);const l={},i="CSV Exploration Module",s={},u=[];function c(t){const e={a:"a",br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"csv-exploration-module",children:"CSV Exploration Module"})}),"\n",(0,r.jsxs)(e.p,{children:["This CSV Exploration Module can be used to trade intraday/positional strategies for any exchanges",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.br,{}),"\n","Download the CSV Files (Keep the csv file in the filepath defined in the AFL Code path)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(532).A+"",children:"Get the CSV files here"})}),"\n",(0,r.jsx)(e.p,{children:"Amibroker AFL Code for CSV Exploration Module (Internet Functions Module - Modern Method)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-clike",children:'////////////////////////////////////////////////////////////\n// OpenAlgo - CSV Exploration Module (Refactored to Modern Methods)\n// Ensure CSV file is placed in the specified path\n// Ensure Symbol mapping is done in the CSV properly\n// Ensure corresponding Watchlist Symbols are created for Exploration\n//\n// Coded by Rajandran R - Creator, OpenAlgo\n// Original Date : 19/08/2024\n// Refactored to Modern Methods : (Current Date)\n////////////////////////////////////////////////////////////\n\n_SECTION_BEGIN("Exploration Module Order Controls");\n\nRequestTimedRefresh(1, False); // Optional if you want periodic refresh\n\nstrategy = ParamStr("Strategy Name", "Exploration Strategy");\napikey = ParamStr("OpenAlgo API Key", "******");\npricetype = ParamStr("Price Type", "MARKET");\nhost = ParamStr("host","http://127.0.0.1:5000");\nver = ParamStr("API Version","v1");\n\nbridgeurl = host+"/api/"+ver;\n\nEntryDelay = Param("Entry Delay",0,0,1,1);\nExitDelay = Param("Exit Delay",0,0,1,1);\nfilepath = ParamStr("Filepath","C:\\\\symbols\\\\symbols.csv");\nEnableAlgo = ParamList("OpenAlgo","Disable|Enable|LongOnly|ShortOnly");\n\n// Configure Trade Execution Delay (for recently generated signals)\nAlgoBuy = LastValue(Ref(Buy,-EntryDelay));\nAlgoSell = LastValue(Ref(Sell,-ExitDelay));\nAlgoShort = LastValue(Ref(Short,-EntryDelay));\nAlgoCover = LastValue(Ref(Cover,-ExitDelay));\n\n// multiple order suppression purpose - need static variables\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";\n\n// Algo Dashboard\nGfxSelectFont("BOOK ANTIQUA", 14, 100);\nGfxSetBkMode(1);\n\nif(EnableAlgo == "Enable")\n{\n    AlgoStatus = "Algo Enabled";\n    GfxSetTextColor(colorGreen); \n    GfxTextOut("Algostatus : "+AlgoStatus , 20, 40); \n    if(Nz(StaticVarGet(static_name_algo),0)!=1)\n    {\n        _TRACE("Algo Status : Enabled");\n        StaticVarSet(static_name_algo, 1);\n    }\n}\nif(EnableAlgo == "Disable")\n{\n    AlgoStatus = "Algo Disabled";\n    GfxSetTextColor(colorRed); \n    GfxTextOut("Algostatus : "+AlgoStatus , 20, 40); \n    if(Nz(StaticVarGet(static_name_algo),0)!=0)\n    {\n        _TRACE("Algo Status : Disabled");\n        StaticVarSet(static_name_algo, 0);\n    }\n}\nif(EnableAlgo == "LongOnly")\n{\n    AlgoStatus = "Long Only";\n    GfxSetTextColor(colorYellow); \n    GfxTextOut("Algostatus : "+AlgoStatus , 20, 40); \n    if(Nz(StaticVarGet(static_name_algo),0)!=2)\n    {\n        _TRACE("Algo Status : Long Only");\n        StaticVarSet(static_name_algo, 2);\n    }\n}\nif(EnableAlgo == "ShortOnly")\n{\n    AlgoStatus = "Short Only";\n    GfxSetTextColor(colorOrange); \n    GfxTextOut("Algostatus : "+AlgoStatus , 20, 40); \n    if(Nz(StaticVarGet(static_name_algo),0)!=3)\n    {\n        _TRACE("Algo Status : Short Only");\n        StaticVarSet(static_name_algo, 3);\n    }\n}\n\n// Function to place order using modern methods (InternetPostRequest)\nfunction PlaceOrder(action, quantity, symbol, exchange, pricetype, product, apikey, strategy) \n{\n    jsonRequestBody = \n        "{"+\n        "\\"apikey\\":\\"" + apikey + "\\"," +\n        "\\"strategy\\":\\"" + strategy + "\\"," +\n        "\\"symbol\\":\\"" + symbol + "\\"," +\n        "\\"action\\":\\"" + action + "\\"," +\n        "\\"exchange\\":\\"" + exchange + "\\"," +\n        "\\"pricetype\\":\\"" + pricetype + "\\"," +\n        "\\"product\\":\\"" + product + "\\"," +\n        "\\"quantity\\":\\"" + quantity + "\\"" +\n        "}";\n\n    url = bridgeurl + "/placeorder";\n\n    headers = "Content-Type: application/json\\r\\n" +\n              "Cache-Control: no-cache\\r\\n" +\n              "Pragma: no-cache\\r\\n";\n    InternetSetHeaders(headers);\n\n    _TRACE("API Request: " + jsonRequestBody + " URL: " + url);\n\n    ih = InternetPostRequest(url, jsonRequestBody);\n    if (ih)\n    {\n        response = "";\n        line = "";\n        while((line = InternetReadString(ih)) != "")\n        {\n            response += line;\n        }\n        InternetClose(ih);\n        _TRACE("API Response: " + response);\n    } \n    else \n    {\n        _TRACE("Failed to place order. Check if API server is running.");\n    }\n\n    return;\n}\n\n// Execution Module\nif(Status("action") == actionExplore)\n{\n    symbol= "";\n    tradingsymbol = "";\n    exchange = "";\n    product = "";\n    quantity = 0;\n\n    fh = fopen(filepath,"r");\n\n    if(fh)\n    {\n        while(!feof(fh))\n        {\n            data = fgets(fh); //read the single line of content\n\n            symbol = StrExtract(data,0);\n            itradingsymbol = StrExtract(data,1);\n            iexchange = StrExtract(data,2);\n            iproduct = StrExtract(data,3);\n            iquantity = StrExtract(data,4);\n\n            if(symbol == Name())\n            {\n                tradingsymbol = itradingsymbol;\n                exchange = iexchange;\n                product = iproduct;\n                quantity = StrToNum(iquantity);\n\n                printf("Symbol :"+symbol);\n                printf("\\nTrading Symbol :"+tradingsymbol);\n                printf("\\nExchange :"+exchange);\n                printf("\\nProduct :"+product);\n                printf("\\nQuantity :"+quantity);\n            } \n        } \n    } \n    else \n    {\n        printf("Error Opening the file");\n    }\n\n    fclose(fh);\n\n    entryquantity = quantity;\n    exitbuyquantity = quantity;\n    exitshortquantity = quantity;\n\n    bsr = Buy AND Cover;\n    ssr = Short AND Sell;\n\n    iSignal  = IIf(bsr,\'L\', IIf(ssr,\'R\', IIf(Buy,\'B\', IIf(Sell,\'S\', IIf(Short,\'S\',\'B\')))));\n    Filter = Buy OR Sell OR Short OR Cover;\n\n    AddTextColumn(tradingsymbol,"Trading Symbol");\n    AddTextColumn(exchange,"Exchange");\n    AddTextColumn(product,"Product");\n    AddColumn(IIf(Buy,\'B\',\'-\'), "Long Entry",format=formatChar);\n    AddColumn(IIf(Sell,\'X\',\'-\'), "Long Exit",format=formatChar);\n    AddColumn(IIf(Short,\'S\',\'-\'), "Short Entry",format=formatChar);\n    AddColumn(IIf(Cover,\'C\',\'-\'), "Short  Exit",format=formatChar);\n    AddColumn(IIf(bsr, entryquantity+exitshortquantity,\n            IIf(ssr, entryquantity+exitbuyquantity,\n            IIf(Buy OR Short, entryquantity,\n            IIf(Sell, exitbuyquantity,\n            IIf(Cover, exitshortquantity, Null))))),\n            "Trading Quantity",1);\n    AddColumn(iSignal, "Signal Value",format=formatChar);\n    AddColumn(C,"LTP",1.2);\n    SetSortColumns(2);\n\n    //Execution Module\n    if(EnableAlgo != "Disable")\n    {\n        lasttime = StrFormat("%0.f",LastValue(BarIndex()));\n        SetChartBkColor(colorDarkGrey);\n\n        if(EnableAlgo == "Enable")\n        {   \n            // Reverse Long Entry\n            if (AlgoBuy==True AND AlgoCover == True AND StaticVarGet(static_name_+"buyCoverAlgo")==0 AND StaticVarGetText(static_name_+"buyCoverAlgo_barvalue") != lasttime )\n            {\n                PlaceOrder("BUY", LastValue(entryquantity+exitshortquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue",lasttime);  \n                StaticVarSet(static_name_+"buyCoverAlgo",1);\n            }\n            else if ((AlgoBuy != True OR AlgoCover != True))\n            {   \n                StaticVarSet(static_name_+"buyCoverAlgo",0);\n                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue","");\n            }\n\n            // Long Entry \n            if (AlgoBuy==True AND AlgoCover != True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)\n            {\n                PlaceOrder("BUY", LastValue(entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"buyAlgo",1);\n            }\n            else if (AlgoBuy != True)\n            {   \n                StaticVarSet(static_name_+"buyAlgo",0);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue","");\n            }\n\n            // Long Exit\n            if (AlgoSell==true AND AlgoShort != True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)\n            {     \n                PlaceOrder("SELL", LastValue(exitbuyquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"sellAlgo",1);\n            }\n            else if (AlgoSell != True )\n            {   \n                StaticVarSet(static_name_+"sellAlgo",0);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue","");\n            }\n\n            // Reverse Short Entry\n            if (AlgoShort==True AND AlgoSell==True AND StaticVarGet(static_name_+"ShortSellAlgo")==0 AND StaticVarGetText(static_name_+"ShortSellAlgo_barvalue") != lasttime)\n            {\n                PlaceOrder("SELL", LastValue(exitbuyquantity+entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"ShortSellAlgo",1);\n            }\n            else if ((AlgoShort != True OR AlgoSell != True))\n            {   \n                StaticVarSet(static_name_+"ShortSellAlgo",0);\n                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue","");\n            }\n\n            // Short Entry\n            if (AlgoShort==True  AND  AlgoSell != True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND  StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)\n            {\n                PlaceOrder("SELL", LastValue(entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"ShortAlgo",1);\n            }\n            else if (AlgoShort != True )\n            {   \n                StaticVarSet(static_name_+"ShortAlgo",0);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");\n            }\n\n            // Short Exit\n            if (AlgoCover==true AND AlgoBuy != True AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)\n            {\n                PlaceOrder("BUY", LastValue(exitshortquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"CoverAlgo",1);\n            }\n            else if (AlgoCover != True )\n            {   \n                StaticVarSet(static_name_+"CoverAlgo",0);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");\n            }\n        }\n\n        else if(EnableAlgo == "LongOnly")\n        {\n            // Long Entry\n            if (AlgoBuy==True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)\n            {  \n                PlaceOrder("BUY", LastValue(entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"buyAlgo",1); \n            }\n            else if (AlgoBuy != True)\n            {\n                StaticVarSet(static_name_+"buyAlgo",0);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue","");\n            }\n\n            // Long Exit\n            if (AlgoSell==true AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)\n            {\n                PlaceOrder("SELL", LastValue(exitbuyquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"sellAlgo",1);\n            }\n            else if (AlgoSell != True )\n            {\n                StaticVarSet(static_name_+"sellAlgo",0);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue","");\n            }\n        }\n\n        else if(EnableAlgo == "ShortOnly")\n        {\n            // Short Entry\n            if (AlgoShort==True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)\n            {\n                PlaceOrder("SELL", LastValue(entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"ShortAlgo",1);\n            }\n            else if (AlgoShort != True )\n            {\n                StaticVarSet(static_name_+"ShortAlgo",0);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");\n            }\n\n            // Short Exit\n            if (AlgoCover==true AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)\n            {\n                PlaceOrder("BUY", LastValue(exitshortquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"CoverAlgo",1);\n                _TRACE("Strategy : "+ strategy +" AlgoStatus : "+ EnableAlgo +" Chart Symbol : "+ Name() +"  Trading Symbol : "+  symbol +"  Quantity : "+ quantity +"  Signal : Cover Signal  TimeFrame : "+ Interval(2)+"  Latest Price : "+LastValue(C));\n            }\n            else if (AlgoCover != True)\n            {\n                StaticVarSet(static_name_+"CoverAlgo",0);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");\n            }\n        }\n    }\n}\n\n_SECTION_END();\n\n'})}),"\n",(0,r.jsx)(e.p,{children:"Amibroker AFL Code for CSV Exploration Module (VB Script Module - Legacy Method)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-clike",children:'\n//OpenAlgo - CSV Exploration Module\n//Ensure CSV file is placed in the right path\n//Ensure Symbol mapping is done in the CSV properly\n//Ensure Corresponding Watchlist Symbols are Created for Exploration\n\n//////////////////////////////////////////////\n//Amibroker CSV Exploration Module\n//Coded by Rajandran R - Creator, OpenAlgo\n//Date : 19/08/2024\n//////////////////////////////////////////////\n\n\n\n_SECTION_BEGIN("Exploration Module Order Controls");\n\n\nstrategy = ParamStr("Strategy Name", "Exploration Strategy");\napikey = ParamStr("OpenAlgo API Key", "******");\npricetype = ParamStr("Price Type", "MARKET");\nhost = ParamStr("host","http://127.0.0.1:5000");\nver = ParamStr("API Version","v1");\n\nbridgeurl = host+"/api/"+ver;\n\nEntryDelay = Param("Entry Delay",0,0,1,1);\nExitDelay = Param("Exit Delay",0,0,1,1);\nfilepath = ParamStr("Filepath","C:\\\\symbols\\\\symbols.csv");\nEnableAlgo = ParamList("OpenAlgo","Disable|Enable|LongOnly|ShortOnly");\n\n\n//Configure Trade Execution Delay (for recently signals)\n\nAlgoBuy = LastValue(Ref(Buy,-EntryDelay));\nAlgoSell = LastValue(Ref(Sell,-ExitDelay));\nAlgoShort = LastValue(Ref(Short,-EntryDelay));\nAlgoCover = LastValue(Ref(Cover,-ExitDelay));\n\n//multiple order supression purpose we need static variables\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";\n\n\n//Algo Dashboard\n\nGfxSelectFont( "BOOK ANTIQUA", 14, 100 );\nGfxSetBkMode( 1 );\nif(EnableAlgo == "Enable")\n{\nAlgoStatus = "Algo Enabled";\nGfxSetTextColor( colorGreen ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=1)\n{\n_TRACE("Algo Status : Enabled");\nStaticVarSet(static_name_algo, 1);\n}\n}\nif(EnableAlgo == "Disable")\n{\nAlgoStatus = "Algo Disabled";\nGfxSetTextColor( colorRed ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=0)\n{\n_TRACE("Algo Status : Disabled");\nStaticVarSet(static_name_algo, 0);\n}\n}\nif(EnableAlgo == "LongOnly")\n{\nAlgoStatus = "Long Only";\nGfxSetTextColor( colorYellow ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=2)\n{\n_TRACE("Algo Status : Long Only");\nStaticVarSet(static_name_algo, 2);\n}\n}\nif(EnableAlgo == "ShortOnly")\n{\nAlgoStatus = "Short Only";\nGfxSetTextColor( colorOrange ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=3)\n{\n_TRACE("Algo Status : Short Only");\nStaticVarSet(static_name_algo, 3);\n}\n}\n\n\nEnableScript("VBScript"); \n<%\nPublic Sub PlaceOrder(action, quantity)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("tradingsymbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placeorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " api_url :" & url\n\n    \n    AFL("api_request") = api_parameters  \n    AFL("api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\n%>\n\nopenalgo = GetScriptObject();\n\n//Execution Module\n\n\nif(Status("action") == actionExplore)\n//if(Status("action") == actionIndicator)\n{\n\nsymbol= "";\ntradingsymbol = "";\nexchange = "";\nproduct = "";\nquantity = "";\n\nfh = fopen(filepath,"r");\n\n\nif(fh)\n{\n\nwhile(!feof(fh))\n{\n\ndata = fgets(fh); //read the single line of content\n\nsymbol = StrExtract(data,0);\nitradingsymbol = StrExtract(data,1);\niexchange = StrExtract(data,2);\niproduct = StrExtract(data,3);\niquantity = StrExtract(data,4);\n\nif(symbol == Name())\n{\n\ntradingsymbol = itradingsymbol;\nexchange = iexchange;\nproduct = iproduct;\nquantity = StrToNum(iquantity);\n\n\nprintf("Symbol :"+symbol);\nprintf("\\nTrading Symbol :"+tradingsymbol);\nprintf("\\nExchange :"+exchange);\nprintf("\\nProduct :"+product);\nprintf("\\nQuantity :"+quantity);\n\n} //end of if\n\n\n} //end of while\n\n} //end of if\n\nelse \n{\n\nprintf("Error Opening the file");\n\n}\n\nfclose(fh);\n\n\nentryquantity = quantity;\nexitbuyquantity = quantity;\nexitshortquantity = quantity;\n\nbsr = Buy AND Cover;\nssr = Short AND Sell;\n\niSignal  = IIf(bsr,\'L\',IIf(ssr,\'R\',IIf(Buy,\'B\',IIf(Sell,\'S\',IIf(Short,\'S\',\'B\')))));\nFilter = Buy OR Sell OR Short OR Cover;\nAddTextColumn(tradingsymbol,"Trading Symbol");\nAddTextColumn(exchange,"Exchange");\nAddTextColumn(product,"Product");\nAddColumn(IIf(Buy,\'B\',\'-\'), "Long Entry",format=formatChar);\nAddColumn(IIf(Sell,\'X\',\'-\'), "Long Exit",format=formatChar);\nAddColumn(IIf(Short,\'S\',\'-\'), "Short Entry",format=formatChar);\nAddColumn(IIf(Cover,\'C\',\'-\'), "Short  Exit",format=formatChar);\nAddColumn(IIf(bsr, entryquantity+exitshortquantity,IIf(ssr,entryquantity+exitbuyquantity,IIf(Buy OR Short,entryquantity,IIf(Sell,exitbuyquantity,IIf(Cover,exitshortquantity,Null))))),"Trading Quantity",1);\nAddColumn(iSignal, "Signal Value",format=formatChar);\nAddColumn(C,"LTP",1.2);\nSetSortColumns(2);\n\n \n\n//Execution Module\n\nif(EnableAlgo != "Disable")\n    {\n        lasttime = StrFormat("%0.f",LastValue(BarIndex()));\n        \n        SetChartBkColor(colorDarkGrey);\n        if(EnableAlgo == "Enable")\n        {   \n            if (AlgoBuy==True AND AlgoCover == True AND StaticVarGet(static_name_+"buyCoverAlgo")==0 AND StaticVarGetText(static_name_+"buyCoverAlgo_barvalue") != lasttime )\n            {\n            // reverse Long Entry \n\t\t\t\tquantity = lastvalue(entryquantity+exitshortquantity);\n                openalgo.PlaceOrder("BUY",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n\t\t\t\t\n                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue",lasttime);  \n                StaticVarSet(static_name_+"buyCoverAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if ((AlgoBuy != True OR AlgoCover != True))\n            {   \n                StaticVarSet(static_name_+"buyCoverAlgo",0);\n                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue","");\n            }\n            \n            if (AlgoBuy==True AND AlgoCover != True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)\n            {\n            // Long Entry \n\t\t\t\tquantity = LastValue(entryquantity);\n                \n                openalgo.PlaceOrder("BUY",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                \n                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar\n            }\n            \n            else if (AlgoBuy != True)\n            {   \n                StaticVarSet(static_name_+"buyAlgo",0);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue","");\n                \n            }\n            if (AlgoSell==true AND AlgoShort != True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)\n            {     \n            // Long Exit \n\t\t\t\tquantity = LastValue(exitbuyquantity);\n\t\t\t\t\n                openalgo.PlaceOrder("SELL",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n\t\t\t\t\n                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar\n            }\n            else if (AlgoSell != True )\n            {   \n                StaticVarSet(static_name_+"sellAlgo",0);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue","");\n            }\n            if (AlgoShort==True AND AlgoSell==True AND  StaticVarGet(static_name_+"ShortSellAlgo")==0 AND StaticVarGetText(static_name_+"ShortSellAlgo_barvalue") != lasttime)\n            {\n            // reverse Short Entry \n\t\t\t\tquantity = LastValue(exitbuyquantity+entryquantity);\n                \n                openalgo.PlaceOrder("SELL",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                \n                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"ShortSellAlgo",1); //Algo Order was triggered, no more order on this bar\n            }\n            else if ((AlgoShort != True OR AlgoSell != True))\n            {   \n                StaticVarSet(static_name_+"ShortSellAlgo",0);\n                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue","");\n            }\n                \n            if (AlgoShort==True  AND  AlgoSell != True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND  StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)\n            {\n            // Short Entry\n\t\t\t\tquantity = LastValue(entryquantity);\n                \n                openalgo.PlaceOrder("SELL",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                \n                \n                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar\n            }\n            else if (AlgoShort != True )\n            {   \n                StaticVarSet(static_name_+"ShortAlgo",0);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");\n            }\n            if (AlgoCover==true AND AlgoBuy != True AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)\n            {\n            // Short Exit\n\t\t\t\tquantity = LastValue(exitshortquantity);\n                \n                openalgo.PlaceOrder("BUY",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                \n                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar\n            }\n            else if (AlgoCover != True )\n            {   \n                StaticVarSet(static_name_+"CoverAlgo",0);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");\n            }\n        }\n        \n           else if(EnableAlgo == "LongOnly")\n        {\n            \n            if (AlgoBuy==True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)\n            {  \n            //  Long Entry\n\t\t\t\tquantity = LastValue(entryquantity);\n                \n                openalgo.PlaceOrder("BUY",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                \n                \n                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar\n            }\n            else if (AlgoBuy != True)\n            {   \n                StaticVarSet(static_name_+"buyAlgo",0);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue","");\n            }\n            if (AlgoSell==true AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)\n            {  \n            // Long Exit\n\t\t\t\tquantity = LastValue(exitbuyquantity);\n                \n                openalgo.PlaceOrder("SELL",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                \n                \n                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar\n            }\n            else if (AlgoSell != True )\n            {   \n                StaticVarSet(static_name_+"sellAlgo",0);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue","");\n            }\n        }\n        else if(EnableAlgo == "ShortOnly")\n        {\n            if (AlgoShort==True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)\n            {\n            // Short Entry\n\t\t\t\tquantity = LastValue(entryquantity);\n                \n                openalgo.PlaceOrder("SELL",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                \n                \n                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar\n            }\n            else if (AlgoShort != True )\n            {   \n                StaticVarSet(static_name_+"ShortAlgo",0);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");\n            }\n            if (AlgoCover==true AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)\n            {\n            // Short Exit\n\t\t\t\tquantity = LastValue(exitshortquantity);\n                \n                openalgo.PlaceOrder("BUY",quantity);\n                \n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                \n                \n                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar\n                _TRACE("Strategy : "+ strategy +"AlgoStatus : "+ EnableAlgo +"Chart Symbol : "+ Name() +"  Trading Symbol : "+  symbol +"  Quantity : "+ quantity +"  Signal : Cover Signal  TimeFrame : "+ Interval(2)+"  Response : "+ resp +"  ChardId : "+ GetChartID() + " Latest Price : "+LastValue(C));\n            }\n            else if (AlgoCover != True)\n            {   \n                StaticVarSet(static_name_+"CoverAlgo",0);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");\n            }\n        }\n        \n    \n    }//end main if\n\n} \n  \n_SECTION_END();\n\n\n'})})]})}function S(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(c,{...t})}):c(t)}}}]);