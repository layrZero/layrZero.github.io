"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[4154],{1602:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image (42)-93a15187078ac13f1b41e36f3f6c3825.png"},1641:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image (43)-60ab625e363a55b9957afd041a137c36.png"},5471:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image (45)-51e8a8cac0541e3591801da177386247.png"},6494:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image (46)-c75383b49f1d5f2316ee3d2ee78657f7.png"},7141:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image (47)-807ef5b8b64efa8f452e27a3b94c2f65.png"},7978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"trading-platform/amibroker/line-trading-module","title":"Line Trading Module","description":"The line Trading Automation tool is designed for Manual traders who want to perform level-based trade execution faster and also bring some advanced trade management in their trades (multiple entries, targets, stops, pyramiding, martingale, etc)","source":"@site/docs/trading-platform/amibroker/line-trading-module.md","sourceDirName":"trading-platform/amibroker","slug":"/trading-platform/amibroker/line-trading-module","permalink":"/docs/trading-platform/amibroker/line-trading-module","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/amibroker/line-trading-module.md","tags":[],"version":"current","frontMatter":{}}');var r=n(4848),i=n(8453);const o={},s="Line Trading Module",l={},d=[{value:"<strong>What is Line Trading Automation 1.0?</strong>",id:"what-is-line-trading-automation-10",level:3},{value:"<strong>Smart Order Exits</strong>",id:"smart-order-exits",level:3},{value:"<strong>Requirements</strong>",id:"requirements",level:3},{value:"<strong>Type of Entry and Exits (Amibroker Terms)</strong>",id:"type-of-entry-and-exits-amibroker-terms",level:3},{value:"Type of Trendline Signals",id:"type-of-trendline-signals",level:3},{value:"Type of Entry and Exit Trendlines",id:"type-of-entry-and-exit-trendlines",level:3},{value:"Drawing Trend Line and Assigning Study Name",id:"drawing-trend-line-and-assigning-study-name",level:3},{value:"Pyramiding and Pyramiding Settings with Targets",id:"pyramiding-and-pyramiding-settings-with-targets",level:3},{value:"Creating Multiple Entries and Multiple Stops using Line Automation Module",id:"creating-multiple-entries-and-multiple-stops-using-line-automation-module",level:3}];function u(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"line-trading-module",children:"Line Trading Module"})}),"\n",(0,r.jsx)(t.p,{children:"The line Trading Automation tool is designed for Manual traders who want to perform level-based trade execution faster and also bring some advanced trade management in their trades (multiple entries, targets, stops, pyramiding, martingale, etc)"}),"\n",(0,r.jsx)(t.p,{children:"\\"}),"\n",(0,r.jsx)("img",{src:n(1602).A}),"\n",(0,r.jsx)(t.h3,{id:"what-is-line-trading-automation-10",children:(0,r.jsx)(t.strong,{children:"What is Line Trading Automation 1.0?"})}),"\n",(0,r.jsx)(t.p,{children:"\u2022Draw Horizontal Lines or Trend Lines in Amibroker When the levels are touched then the Line Trade Automation Module will convert into signals and orders will be transmitted to the broker automatically."}),"\n",(0,r.jsxs)(t.p,{children:["\u2022Module ",(0,r.jsx)(t.strong,{children:"Supports Multiple Entry, Targets, Stoploss levels"})," can be drawn and converted into orders, Supports pyramiding."]}),"\n",(0,r.jsxs)(t.p,{children:["\u2022Module ",(0,r.jsx)(t.strong,{children:"prevents placing multiple orders"})," at the same signal"]}),"\n",(0,r.jsxs)(t.p,{children:["\u2022Supports ",(0,r.jsx)(t.strong,{children:"Intraday and Positional Trades"})]}),"\n",(0,r.jsxs)(t.p,{children:["\u2022Supports ",(0,r.jsx)(t.strong,{children:"3 Long Entry, 3 Long Exit(Target/Stoploss), 3 Short Entries"}),", and ",(0,r.jsx)(t.strong,{children:"3 Short Exit (Target/Stoploss)"})," Line based trading."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-clike",children:'//Module - Line Pair Tading Automation Module \n//Rajandran R - Creator of OpenAlgo\n//website - openalgo.in / marketcalls.in\n//OpenAlgo - Amibroker SmartOrder Chart Trading Module v1.0\n//Date - 29/05/2024\n\n\n_SECTION_BEGIN("OpenAlgo Trading Controls");\n\nRequestTimedRefresh(1,False);\n\napikey = ParamStr("OpenAlgo API Key", "******");\nstrategy = ParamStr("Strategy", "Amibroker");\nsymbol = ParamStr("Symbol", "YESBANK");\nexchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");\npricetype = ParamStr("Price Type", "MARKET");\nproduct = ParamList("Product", "MIS|NRML|CNC");\nquantity = Param("Quantity", 1,1,1000,1);\n\nEntrydelay = Param("Entry Delay",0,0,1,1);\nExitdelay = Param("Exit Delay",0,0,1,1);\n\nhost = ParamStr("host","http://127.0.0.1:5000");\nver = ParamStr("API Version","v1");\n\nVoiceAlert = ParamList("Voice Alert","Disable|Enable",1);\nEnableAlgo = ParamList("Algo Mode","Disable|Enable",0); // Algo Mode\n\n\nbridgeurl = host+"/api/"+ver;\nresp = "";\n\n//Static Variables for Order protection\n\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";\n//Mapping of Orders\n\niBuy = "BUY";\niSell = "SELL";\n\nGfxSelectFont( "BOOK ANTIQUA", 14, 100 );\nGfxSetBkMode( 1 );\nif(EnableAlgo == "Enable")\n{\nAlgoStatus = "Algo Enabled";\nGfxSetTextColor( colorGreen ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=1)\n{\n_TRACE("Algo Status : Enabled");\nStaticVarSet(static_name_algo, 1);\n}\n}\nif(EnableAlgo == "Disable")\n{\nAlgoStatus = "Algo Disabled";\nGfxSetTextColor( colorRed ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=0)\n{\n_TRACE("Algo Status : Disabled");\nStaticVarSet(static_name_algo, 0);\n}\n}\n\n\n\n\n_SECTION_BEGIN("OpenAlgo Bridge Controls");\n\nEnableScript("VBScript"); \n<%\nPublic Sub PlaceOrder(action, quantity)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placeorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " api_url :" & url\n\n    \n    AFL("api_request") = api_parameters  \n    AFL("api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\nPublic Sub PlaceSmartOrder(action, quantity,position_size)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n    \n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & _\n    """,""position_size"":""" & position_size & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placesmartorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " Position Size :" & position_size & " api_url :" & url\n\n    \n    AFL("sm_api_request") = api_parameters  \n    AFL("sm_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\nPublic Sub ExitOrder(action)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n    position_size = "0"\n    quantity = "0"\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & _\n    """,""position_size"":""" & position_size & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placesmartorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " Position Size :" & position_size & " api_url :" & url\n\n    \n    AFL("ex_api_request") = api_parameters  \n    AFL("ex_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\n\nPublic Sub SquareoffAll()\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n      \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/closeposition"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " api_url :" & url\n\n    \n    AFL("sq_api_request") = api_parameters  \n    AFL("sq_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\n%>\n\nopenalgo = GetScriptObject();\n\n\n\n_SECTION_END();\n\n_SECTION_BEGIN("Line Pair Trading Module");\n\nSetBarsRequired(-2,-2); //turning off quick afl\nSetChartOptions(0,chartShowArrows|chartShowDates);\n_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 ) ) ));\nPlot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); \n_SECTION_END();\n\n//Static Variables will be saved in Amibroker every 60 seconds once\nSetOption("StaticVarAutoSave",60);\n\n// Send orders even if Amibroker is minimized or Chart is not active\nRequestTimedRefresh(0.1, False); \nEnableTextOutput(False);\n\nIntradayMode = ParamList("Intraday Mode","ON|OFF",0);\nStartTradeTime = ParamTime("Start Time","09:30");\nEndTradeTime = ParamTime("End Time","15:00");\nExitTradeTime = ParamTime("Squareoff Time","15:15");\n\n\nBuyMode=ParamToggle("Buy Mode","BUY ABOVE|BUY BELOW",0);\nSellMode=ParamToggle("Sell Mode","SELL ABOVE|SELL BELOW",0);\nShortMode=ParamToggle("Short Mode","SHORT ABOVE|SHORT BELOW",1);\nCoverMode=ParamToggle("Cover Mode","COVER ABOVE|COVER BELOW",1);\n\nExitPos = ParamList("Exit Positions","CURRENT|ALLOPENPOSITIONS");\n\nbuyquantity1 = Param("Buy Quantity1",1,0,10000,1);\nbuyquantity2 = Param("Buy Quantity2",1,0,10000,1);\nbuyquantity3 = Param("Buy Quantity3",1,0,10000,1);\nshortquantity1 = Param("Short Quantity1",1,0,10000,1);\nshortquantity2 = Param("Short Quantity2",1,0,10000,1);\nshortquantity3 = Param("Short Quantity3",1,0,10000,1);\n\nclear = ParamTrigger("Reset Trades and Signals","Press to Reset");\nstaticvar = Name()+Interval()+GetChartID();\nif(clear)\n{\n\nStaticVarRemove(staticvar+"*");\n_TRACE("Static Variables Cleared");\n}\n\nPlot( C, "Price", colorBlack, styleCandle );\n\nif(BuyMode==0) \tBuydisplaytext = "Buy Above";\nif(BuyMode==1)  Buydisplaytext = "Buy Below";\nif(SellMode==0) Selldisplaytext = "Sell Above";\nif(SellMode==1) Selldisplaytext = "Sell Below";\n\t\nif(ShortMode==0) Shortdisplaytext = "Short Above";\nif(ShortMode==1) Shortdisplaytext = "Short Below";\nif(CoverMode==0) Coverdisplaytext = "Cover Above";\nif(CoverMode==1) Coverdisplaytext = "Cover Below";\n\n\nB1 = LastValue(Study("B1", GetChartID() ));\nB2 = LastValue(Study("B2", GetChartID() ));\nB3 = LastValue(Study("B3", GetChartID() ));\nX1 = LastValue(Study("X1", GetChartID() ));\nX2 = LastValue(Study("X2", GetChartID() ));\nX3 = LastValue(Study("X3", GetChartID() ));\n\nS1 = LastValue(Study("S1", GetChartID() ));\nS2 = LastValue(Study("S2", GetChartID() ));\nS3 = LastValue(Study("S3", GetChartID() ));\nC1 = LastValue(Study("C1", GetChartID() ));\nC2 = LastValue(Study("C2", GetChartID() ));\nC3 = LastValue(Study("C3", GetChartID() ));\n\nfunction lineplot(value,text,quantity,displaytext)\n{\n\n\n\t\n\ntextcolor = IIf(text=="B1" OR text=="B2" OR text=="B3", colorGreen, \n\t\t\t\tIIf(text=="X1" OR text=="X2" OR text=="X3", colorRed, \n\t\t\t\t\tIIf(text=="S1" OR text=="S2" OR text=="S3", colorBrown, \n\t\t\t\t\t\tIIf(text=="C1" OR text=="C2" OR text=="C3", colorBlue,colorGrey40))));\n\nx = LastValue( ValueWhen( ExRem( value, 0 ), DateTime() ) );\nif( x!= 0 AND (text=="B1" OR text=="B2" OR text=="B3"))\n  PlotText(text+"    "+Displaytext+" : "+value+"    Qty ="+quantity,BarCount-40,value,colorWhite,textcolor,10);\n\nif( x!= 0  AND (text=="S1" OR text=="S2" OR text=="S3"))\n  PlotText(text+"    "+Displaytext+" : "+value+"    Qty ="+quantity,BarCount-40,value,colorWhite,textcolor,10);\n\nif( x!= 0 AND ExitPos=="CURRENT" AND (text=="X1" OR text=="X2" OR text=="X3"))\n  PlotText(text+"    "+Displaytext+" : "+value+"    Qty ="+quantity,BarCount-40,value,colorWhite,textcolor,10);\n\nif( x!= 0 AND ExitPos=="CURRENT" AND (text=="C1" OR text=="C2" OR text=="C3"))\n  PlotText(text+"    "+Displaytext+" : "+value+"    Qty ="+quantity,BarCount-40,value,colorWhite,textcolor,10);\n\nif( x!= 0 AND ExitPos=="ALLOPENPOSITIONS" AND (text=="X1" OR text=="X2" OR text=="X3"))\n  PlotText(text+"    "+Displaytext+" : "+value+"    Qty = All",BarCount-40,value,colorWhite,textcolor,10);\n\nif( x!= 0 AND ExitPos=="ALLOPENPOSITIONS" AND (text=="C1" OR text=="C2" OR text=="C3"))\n  PlotText(text+"    "+Displaytext+" : "+value+"   Qty = All",BarCount-40,value,colorWhite,textcolor,10);\n\n\n}\n\n\n\nlineplot(B1,"B1",buyquantity1,Buydisplaytext);\nlineplot(B2,"B2",buyquantity2,Buydisplaytext);\nlineplot(B3,"B3",buyquantity3,Buydisplaytext);\nlineplot(X1,"X1",buyquantity1,Selldisplaytext);\nlineplot(X2,"X2",buyquantity2,Selldisplaytext);\nlineplot(X3,"X3",buyquantity3,Selldisplaytext);\nlineplot(S1,"S1",shortquantity1,Shortdisplaytext);\nlineplot(S2,"S2",shortquantity2,Shortdisplaytext);\nlineplot(S3,"S3",shortquantity3,Shortdisplaytext);\nlineplot(C1,"C1",shortquantity1,Coverdisplaytext);\nlineplot(C2,"C2",shortquantity2,Coverdisplaytext);\nlineplot(C3,"C3",shortquantity3,Coverdisplaytext);\n\nif(EnableAlgo != "Disable")\n{\n    lasttime = StrFormat("%0.f",LastValue(BarIndex()));\n    SetChartBkColor(colorDarkGrey);\n    \nif(IntradayMode=="ON" AND LastValue(TimeNum())== ExitTradeTime AND Nz(StaticVarGet(staticvar+"SquareOff"))==0)\n{\n\n\nopenalgo.ExitOrder("SELL");\n\n\nStaticVarSet(staticvar+"SquareOffIndex",LastValue(BarIndex()));\nStaticVarSet(staticvar+"SquareOff",1);\n_TRACE("Squareoff Alert Triggered");\n}\n\n\nif(BuyMode==0 AND LastValue(Cross(H,B1)) AND Nz(StaticVarGet(staticvar+"B1"))==0)\n{\n\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nopenalgo.placeorder("BUY",buyquantity1);\nStaticVarSet(staticvar+"B1index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"B1",1);\n_TRACE("Buy Above B1 Triggered");\n}\n}\n\n\n\nif(BuyMode==1 AND LastValue(Cross(B1,L)) AND Nz(StaticVarGet(staticvar+"B1"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("BUY",buyquantity1);\nStaticVarSet(staticvar+"B1index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"B1",1);\n_TRACE("Buy Below B1 Triggered");\n}\n}\n\nif(BuyMode==0 AND LastValue(Cross(H,B2)) AND Nz(StaticVarGet(staticvar+"B2"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("BUY",buyquantity2);\nStaticVarSet(staticvar+"B2index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"B2",1);\n_TRACE("Buy Above B2 Triggered");\n}\n}\n\nif(BuyMode==1 AND LastValue(Cross(B2,L)) AND Nz(StaticVarGet(staticvar+"B2"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("BUY",buyquantity2);\nStaticVarSet(staticvar+"B2index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"B2",1);\n_TRACE("Buy Below B2 Triggered");\n}\n}\n\nif(BuyMode==0 AND LastValue(Cross(H,B3)) AND Nz(StaticVarGet(staticvar+"B3"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("BUY",buyquantity3);\nStaticVarSet(staticvar+"B3index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"B3",1);\n_TRACE("Buy Above B3 Triggered");\n}\n}\n\nif(BuyMode==1 AND LastValue(Cross(B3,L)) AND Nz(StaticVarGet(staticvar+"B3"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("BUY",buyquantity3);\nStaticVarSet(staticvar+"B3index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"B3",1);\n_TRACE("Buy Below B3 Triggered");\n}\n}\n\n\n\nif(SellMode==0 AND LastValue(Cross(H,X1)) AND Nz(StaticVarGet(staticvar+"X1"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.placeorder("SELL",buyquantity1);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("SELL");\n}\n\nStaticVarSet(staticvar+"X1index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"X1",1);\n_TRACE("Sell Above X1 Triggered");\n}\n}\n\nif(SellMode==1 AND LastValue(Cross(X1,L)) AND Nz(StaticVarGet(staticvar+"X1"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.placeorder("SELL",buyquantity1);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("SELL");\n}\n\n\nStaticVarSet(staticvar+"X1index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"X1",1);\n_TRACE("Sell Below X1 Triggered");\n}\n}\nif(SellMode==0 AND LastValue(Cross(H,X2)) AND Nz(StaticVarGet(staticvar+"X2"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.placeorder("SELL",buyquantity2);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("SELL");\n}\n\n\nStaticVarSet(staticvar+"X2index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"X2",1);\n_TRACE("Sell Above X2 Triggered");\n}\n}\nif(SellMode==1 AND LastValue(Cross(X2,L)) AND Nz(StaticVarGet(staticvar+"X2"))==0)\n{\nif((IntradayMode=="ON" AND TimeNum()== ExitTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.placeorder("SELL",buyquantity2);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("SELL");\n}\n\nStaticVarSet(staticvar+"X2index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"X2",1);\n_TRACE("Sell Below X2 Triggered");\n}\n}\nif(SellMode==0 AND LastValue(Cross(H,X3)) AND Nz(StaticVarGet(staticvar+"X3"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.placeorder("SELL",buyquantity3);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("SELL");\n}\n\n\n\nStaticVarSet(staticvar+"X3index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"X3",1);\n_TRACE("Sell Above X3 Triggered");\n}\n}\nif(SellMode==1 AND LastValue(Cross(X3,L)) AND Nz(StaticVarGet(staticvar+"X3"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.placeorder("SELL",buyquantity3);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("SELL");\n}\n\n\nStaticVarSet(staticvar+"X3index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"X3",1);\n_TRACE("Sell Below X3 Triggered");\n}\n}\n\nif(ShortMode==0 AND LastValue(Cross(H,S1)) AND Nz(StaticVarGet(staticvar+"S1"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("SELL",shortquantity1);\nStaticVarSet(staticvar+"S1index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"S1",1);\n_TRACE("Short Above S1 Triggered");\n}\n}\n\nif(ShortMode==1 AND LastValue(Cross(S1,L)) AND Nz(StaticVarGet(staticvar+"S1"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("SELL",shortquantity1);\nStaticVarSet(staticvar+"S1index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"S1",1);\n_TRACE("Short Below S1 Triggered");\n}\n}\n\nif(ShortMode==0 AND LastValue(Cross(H,S2)) AND Nz(StaticVarGet(staticvar+"S2"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("SELL",shortquantity2);\nStaticVarSet(staticvar+"S2index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"S2",1);\n_TRACE("Short Above S2 Triggered");\n}\n}\n\nif(ShortMode==1 AND LastValue(Cross(S2,L)) AND Nz(StaticVarGet(staticvar+"S2"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("SELL",shortquantity2);\nStaticVarSet(staticvar+"S2index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"S2",1);\n_TRACE("Short Below S2 Triggered");\n}\n}\n\nif(ShortMode==0 AND LastValue(Cross(H,S3)) AND Nz(StaticVarGet(staticvar+"S3"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("SELL",shortquantity3);\nStaticVarSet(staticvar+"S3index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"S3",1);\n_TRACE("Short Above S3 Triggered");\n}\n}\n\nif(ShortMode==1 AND LastValue(Cross(S3,L)) AND Nz(StaticVarGet(staticvar+"S3"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\nopenalgo.placeorder("SELL",shortquantity3);\nStaticVarSet(staticvar+"S3index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"S3",1);\n_TRACE("Short Below S3 Triggered");\n}\n}\n\n\nif(CoverMode==0 AND LastValue(Cross(H,C1)) AND Nz(StaticVarGet(staticvar+"C1"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.PlaceOrder("BUY",shortquantity1);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("BUY");\n}\n\nStaticVarSet(staticvar+"C1index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"C1",1);\n_TRACE("Cover Above C1 Triggered");\n}\n}\n\nif(CoverMode==1 AND LastValue(Cross(C1,L)) AND Nz(StaticVarGet(staticvar+"C1"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.PlaceOrder("BUY",shortquantity1);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("BUY");\n}\n\n\n\nStaticVarSet(staticvar+"C1index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"C1",1);\n_TRACE("Cover Below C1 Triggered");\n}\n}\n\nif(CoverMode==0 AND LastValue(Cross(H,C2)) AND Nz(StaticVarGet(staticvar+"C2"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.PlaceOrder("BUY",shortquantity2);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("BUY");\n}\n\n\nStaticVarSet(staticvar+"C2index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"C2",1);\n_TRACE("Cover Above C2 Triggered");\n}\n}\nif(CoverMode==1 AND LastValue(Cross(C2,L)) AND Nz(StaticVarGet(staticvar+"C2"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.PlaceOrder("BUY",shortquantity2);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("BUY");\n}\n\n\nStaticVarSet(staticvar+"C2index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"C2",1);\n_TRACE("Cover Below C2 Triggered");\n}\n}\n\nif(CoverMode==0 AND LastValue(Cross(H,C3)) AND Nz(StaticVarGet(staticvar+"C3"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.PlaceOrder("BUY",shortquantity3);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("BUY");\n}\n\n\n\n\nStaticVarSet(staticvar+"C3index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"C3",1);\n_TRACE("Cover Above C3 Triggered");\n}\n}\n\n\n\n\nif(CoverMode==1 AND LastValue(Cross(C3,L)) AND Nz(StaticVarGet(staticvar+"C3"))==0)\n{\nif((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")\n{\n\n\nif(ExitPos=="CURRENT")\n{\n//If positive open positions are there only then exit the Current Order Quantity \nopenalgo.PlaceOrder("BUY",shortquantity3);\n}\nif(ExitPos=="ALLOPENPOSITIONS")\n{\n//If positive open positions are there only then exit the All Open Positions \nopenalgo.ExitOrder("BUY");\n}\n\nStaticVarSet(staticvar+"C3index",LastValue(BarIndex()));\nStaticVarSet(staticvar+"C3",1);\n_TRACE("Cover Below C3 Triggered");\n}\n}\n\n//Plot Signals and Arrows\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B1index"), shapeSquare, shapeNone),colorGreen, 0, L, Offset=-40);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B1index"), shapeSquare, shapeNone),colorLime, 0,L, Offset=-50);                      \nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B1index"), shapeUpArrow, shapeNone),colorWhite, 0,L, Offset=-45);\n\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B2index"), shapeSquare, shapeNone),colorGreen, 0, L, Offset=-40);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B2index"), shapeSquare, shapeNone),colorLime, 0,L, Offset=-50);                      \nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B2index"), shapeUpArrow, shapeNone),colorWhite, 0,L, Offset=-45);\n\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B3index"), shapeSquare, shapeNone),colorGreen, 0, L, Offset=-40);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B3index"), shapeSquare, shapeNone),colorLime, 0,L, Offset=-50);                      \nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B3index"), shapeUpArrow, shapeNone),colorWhite, 0,L, Offset=-45);\n\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S1index"), shapeSquare, shapeNone),colorRed, 0, H, Offset=40);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S1index"), shapeSquare, shapeNone),colorOrange, 0,H, Offset=50);                      \nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S1index"), shapeDownArrow, shapeNone),colorWhite, 0,H, Offset=-45);\n\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S2index"), shapeSquare, shapeNone),colorRed, 0, H, Offset=40);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S2index"), shapeSquare, shapeNone),colorOrange, 0,H, Offset=50);                      \nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S2index"), shapeDownArrow, shapeNone),colorWhite, 0,H, Offset=-45);\n\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S3index"), shapeSquare, shapeNone),colorRed, 0, H, Offset=40);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S3index"), shapeSquare, shapeNone),colorOrange, 0,H, Offset=50);                      \nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S3index"), shapeDownArrow, shapeNone),colorWhite, 0,H, Offset=-45);\n\n\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"X1index"),  shapeStar,shapeNone), colorBrightGreen, 0, High, 12);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"X2index"),  shapeStar,shapeNone), colorBrightGreen, 0, High, 12);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"X3index"),  shapeStar,shapeNone), colorBrightGreen, 0, High, 12);\n\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"C1index"),  shapeStar,shapeNone), colorRed, 0, Low, -12);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"C2index"),  shapeStar,shapeNone), colorRed, 0, Low, -12);\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"C3index"),  shapeStar,shapeNone), colorRed, 0, Low, -12);\n\nif(IntradayMode=="ON")\n{\nPlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"SquareOffIndex"),  shapeStar,shapeNone), colorYellow, 0, Low, -12);\n}\n\n}\n\n_SECTION_END();\n'})}),"\n",(0,r.jsx)(t.h3,{id:"smart-order-exits",children:(0,r.jsx)(t.strong,{children:"Smart Order Exits"})}),"\n",(0,r.jsxs)(t.p,{children:["\u2022",(0,r.jsx)(t.strong,{children:"Smart Orders"})," are enabled while exiting the position."]}),"\n",(0,r.jsxs)(t.p,{children:["\u2022If there are no open positions and if exit orders are triggered then those orders are ",(0,r.jsx)(t.strong,{children:"smartly ignored"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["\u2022Provision to close only ",(0,r.jsx)(t.strong,{children:"Current Quantity"})," and ",(0,r.jsx)(t.strong,{children:"All  Open Positions"})," is provided so that traders can flexibly use their own exit methods"]}),"\n",(0,r.jsx)(t.h3,{id:"requirements",children:(0,r.jsx)(t.strong,{children:"Requirements"})}),"\n",(0,r.jsx)(t.p,{children:"\u25cfOpenAlgo Downloaded and Configured"}),"\n",(0,r.jsx)(t.p,{children:"\u25cfOpenAlgo Supported Broker"}),"\n",(0,r.jsx)(t.p,{children:"\u25cfAmibroker 6.0 or Higher"}),"\n",(0,r.jsx)(t.p,{children:"\u25cfRealtime Datafeed Subscription"}),"\n",(0,r.jsx)(t.h3,{id:"type-of-entry-and-exits-amibroker-terms",children:(0,r.jsx)(t.strong,{children:"Type of Entry and Exits (Amibroker Terms)"})}),"\n",(0,r.jsx)(t.p,{children:"where the characters \u2018B\u2019. \u2018X\u2019, \u2018S\u2019, \u2018C\u2019 are used along with horizontal or trendline study names."}),"\n",(0,r.jsx)("img",{src:n(1641).A}),"\n",(0,r.jsx)(t.h3,{id:"type-of-trendline-signals",children:"Type of Trendline Signals"}),"\n",(0,r.jsx)(t.p,{children:"\\"}),"\n",(0,r.jsx)("img",{src:n(8888).A}),"\n",(0,r.jsx)(t.h3,{id:"type-of-entry-and-exit-trendlines",children:"Type of Entry and Exit Trendlines"}),"\n",(0,r.jsx)(t.p,{children:"\\"}),"\n",(0,r.jsx)("img",{src:n(5471).A}),"\n",(0,r.jsx)(t.h3,{id:"drawing-trend-line-and-assigning-study-name",children:"Drawing Trend Line and Assigning Study Name"}),"\n",(0,r.jsx)(t.p,{children:"\\"}),"\n",(0,r.jsx)("img",{src:n(6494).A}),"\n",(0,r.jsx)(t.h3,{id:"pyramiding-and-pyramiding-settings-with-targets",children:"Pyramiding and Pyramiding Settings with Targets"}),"\n",(0,r.jsx)(t.p,{children:"\\"}),"\n",(0,r.jsx)("img",{src:n(7141).A}),"\n",(0,r.jsx)(t.h3,{id:"creating-multiple-entries-and-multiple-stops-using-line-automation-module",children:"Creating Multiple Entries and Multiple Stops using Line Automation Module"}),"\n",(0,r.jsx)(t.p,{children:"\\"}),"\n",(0,r.jsx)("img",{src:n(9972).A})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(6540);const r={},i=a.createContext(r);function o(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:t},e.children)}},8888:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image (44)-dfa9e867d969be8faa96a24bf84f073c.png"},9972:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image (48)-ca948bf6ee4005477c6c64eae42ccb09.png"}}]);