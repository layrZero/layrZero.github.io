"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[6406],{4521:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"trading-platform/python/indicators/momentum","title":"Momentum","description":"Momentum indicators measure the speed and strength of price movements, helping identify overbought/oversold conditions and potential trend reversals.","source":"@site/docs/trading-platform/python/indicators/momentum.md","sourceDirName":"trading-platform/python/indicators","slug":"/trading-platform/python/indicators/momentum","permalink":"/docs/trading-platform/python/indicators/momentum","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/indicators/momentum.md","tags":[],"version":"current","frontMatter":{}}');var i=r(4848),s=r(8453);const a={},d="Momentum",t={},o=[{value:"Import Statement",id:"import-statement",level:3},{value:"Available Momentum Indicators",id:"available-momentum-indicators",level:3},{value:"Relative Strength Index (RSI)",id:"relative-strength-index-rsi",level:3},{value:"Usage",id:"usage",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"Moving Average Convergence Divergence (MACD)",id:"moving-average-convergence-divergence-macd",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Stochastic Oscillator",id:"stochastic-oscillator",level:3},{value:"Usage",id:"usage-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Commodity Channel Index (CCI)",id:"commodity-channel-index-cci",level:3},{value:"Usage",id:"usage-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Williams %R",id:"williams-r",level:3},{value:"Usage",id:"usage-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"Balance of Power (BOP)",id:"balance-of-power-bop",level:3},{value:"Usage",id:"usage-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"Elder Ray Index",id:"elder-ray-index",level:3},{value:"Usage",id:"usage-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"Fisher Transform",id:"fisher-transform",level:3},{value:"Usage",id:"usage-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-7",level:4},{value:"Connors RSI (CRSI)",id:"connors-rsi-crsi",level:3},{value:"Usage",id:"usage-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-8",level:4},{value:"Complete Example: Multiple Momentum Indicators",id:"complete-example-multiple-momentum-indicators",level:3},{value:"Signal Interpretation Guide",id:"signal-interpretation-guide",level:3},{value:"RSI",id:"rsi",level:4},{value:"MACD",id:"macd",level:4},{value:"Stochastic",id:"stochastic",level:4},{value:"CCI",id:"cci",level:4},{value:"Williams %R",id:"williams-r-1",level:4},{value:"Performance Tips",id:"performance-tips",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"momentum",children:"Momentum"})}),"\n",(0,i.jsx)(n.p,{children:"Momentum indicators measure the speed and strength of price movements, helping identify overbought/oversold conditions and potential trend reversals."}),"\n",(0,i.jsx)(n.h3,{id:"import-statement",children:"Import Statement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from openalgo import ta\n"})}),"\n",(0,i.jsx)(n.h3,{id:"available-momentum-indicators",children:"Available Momentum Indicators"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"relative-strength-index-rsi",children:"Relative Strength Index (RSI)"}),"\n",(0,i.jsx)(n.p,{children:"RSI is a momentum oscillator that measures the speed and magnitude of price changes, oscillating between 0 and 100."}),"\n",(0,i.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"rsi_result = ta.rsi(data, period=14)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"data"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"period"})," ",(0,i.jsx)(n.em,{children:"(int, default=14)"}),": Number of periods for RSI calculation"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"array"}),": RSI values (range: 0 to 100) in the same format as input"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from openalgo import api, ta\n\n# Get market data\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\ndf = client.history(symbol=\"SBIN\", exchange=\"NSE\", interval=\"5m\", \n                   start_date=\"2025-04-01\", end_date=\"2025-04-08\")\n\n# Calculate RSI\ndf['RSI_14'] = ta.rsi(df['close'], 14)\ndf['RSI_21'] = ta.rsi(df['close'], 21)\n\nprint(df[['close', 'RSI_14', 'RSI_21']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"moving-average-convergence-divergence-macd",children:"Moving Average Convergence Divergence (MACD)"}),"\n",(0,i.jsx)(n.p,{children:"MACD is a trend-following momentum indicator showing the relationship between two exponential moving averages."}),"\n",(0,i.jsx)(n.h4,{id:"usage-1",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"macd_line, signal_line, histogram = ta.macd(data, fast_period=12, slow_period=26, signal_period=9)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"data"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"fast_period"})," ",(0,i.jsx)(n.em,{children:"(int, default=12)"}),": Period for fast EMA"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"slow_period"})," ",(0,i.jsx)(n.em,{children:"(int, default=26)"}),": Period for slow EMA"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"signal_period"})," ",(0,i.jsx)(n.em,{children:"(int, default=9)"}),": Period for signal line EMA"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tuple"}),": (macd_line, signal_line, histogram) arrays"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate MACD\nmacd_line, signal_line, histogram = ta.macd(df['close'])\n\n# Add to DataFrame\ndf['MACD'] = macd_line\ndf['MACD_Signal'] = signal_line\ndf['MACD_Histogram'] = histogram\n\n# Custom parameters\nmacd_fast, signal_fast, hist_fast = ta.macd(df['close'], fast_period=8, slow_period=21, signal_period=5)\n\nprint(df[['close', 'MACD', 'MACD_Signal', 'MACD_Histogram']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"stochastic-oscillator",children:"Stochastic Oscillator"}),"\n",(0,i.jsx)(n.p,{children:"The Stochastic Oscillator compares a security's closing price to its price range over a given time period."}),"\n",(0,i.jsx)(n.h4,{id:"usage-2",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"k_percent, d_percent = ta.stochastic(high, low, close, k_period=14, d_period=3)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"k_period"})," ",(0,i.jsx)(n.em,{children:"(int, default=14)"}),": Period for %K calculation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"d_period"})," ",(0,i.jsx)(n.em,{children:"(int, default=3)"}),": Period for %D calculation (SMA of %K)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tuple"}),": (k_percent, d_percent) arrays"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Stochastic Oscillator\nstoch_k, stoch_d = ta.stochastic(df['high'], df['low'], df['close'])\n\n# Add to DataFrame\ndf['Stoch_K'] = stoch_k\ndf['Stoch_D'] = stoch_d\n\n# Custom parameters\nstoch_k_fast, stoch_d_fast = ta.stochastic(df['high'], df['low'], df['close'], \n                                          k_period=5, d_period=3)\n\nprint(df[['close', 'Stoch_K', 'Stoch_D']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"commodity-channel-index-cci",children:"Commodity Channel Index (CCI)"}),"\n",(0,i.jsx)(n.p,{children:"CCI measures the current price level relative to an average price level over a given period."}),"\n",(0,i.jsx)(n.h4,{id:"usage-3",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"cci_result = ta.cci(high, low, close, period=20)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"period"})," ",(0,i.jsx)(n.em,{children:"(int, default=20)"}),": Number of periods for CCI calculation"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"array"}),": CCI values in the same format as input"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate CCI\ndf['CCI_20'] = ta.cci(df['high'], df['low'], df['close'], 20)\ndf['CCI_14'] = ta.cci(df['high'], df['low'], df['close'], 14)\n\nprint(df[['close', 'CCI_20', 'CCI_14']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"williams-r",children:"Williams %R"}),"\n",(0,i.jsx)(n.p,{children:"Williams %R is a momentum indicator that measures overbought and oversold levels on a scale from 0 to -100."}),"\n",(0,i.jsx)(n.h4,{id:"usage-4",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"williams_r = ta.williams_r(high, low, close, period=14)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"period"})," ",(0,i.jsx)(n.em,{children:"(int, default=14)"}),": Number of periods for Williams %R calculation"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"array"}),": Williams %R values (range: 0 to -100) in the same format as input"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Williams %R\ndf['Williams_R'] = ta.williams_r(df['high'], df['low'], df['close'])\ndf['Williams_R_21'] = ta.williams_r(df['high'], df['low'], df['close'], 21)\n\nprint(df[['close', 'Williams_R', 'Williams_R_21']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"balance-of-power-bop",children:"Balance of Power (BOP)"}),"\n",(0,i.jsx)(n.p,{children:"Balance of Power measures the strength of buyers versus sellers by assessing the ability of each side to drive prices to an extreme level."}),"\n",(0,i.jsx)(n.h4,{id:"usage-5",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"bop_result = ta.bop(open_prices, high, low, close)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"open_prices"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Opening prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"array"}),": BOP values in the same format as input"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Balance of Power\ndf['BOP'] = ta.bop(df['open'], df['high'], df['low'], df['close'])\n\nprint(df[['close', 'BOP']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"elder-ray-index",children:"Elder Ray Index"}),"\n",(0,i.jsx)(n.p,{children:"Elder Ray Index consists of Bull Power and Bear Power, measuring the ability of bulls and bears to drive prices above or below an EMA."}),"\n",(0,i.jsx)(n.h4,{id:"usage-6",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"bull_power, bear_power = ta.elderray(high, low, close, period=13)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"period"})," ",(0,i.jsx)(n.em,{children:"(int, default=13)"}),": Period for EMA calculation"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tuple"}),": (bull_power, bear_power) arrays"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Elder Ray Index\nbull_power, bear_power = ta.elderray(df['high'], df['low'], df['close'])\n\n# Add to DataFrame\ndf['Bull_Power'] = bull_power\ndf['Bear_Power'] = bear_power\n\nprint(df[['close', 'Bull_Power', 'Bear_Power']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"fisher-transform",children:"Fisher Transform"}),"\n",(0,i.jsx)(n.p,{children:"The Fisher Transform converts prices into a Gaussian normal distribution, making it easier to identify turning points."}),"\n",(0,i.jsx)(n.h4,{id:"usage-7",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"fisher, trigger = ta.fisher(high, low, length=9)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"length"})," ",(0,i.jsx)(n.em,{children:"(int, default=9)"}),": Length for highest/lowest calculation"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tuple"}),": (fisher, trigger) arrays"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Fisher Transform\nfisher, fisher_trigger = ta.fisher(df['high'], df['low'])\n\n# Add to DataFrame\ndf['Fisher'] = fisher\ndf['Fisher_Trigger'] = fisher_trigger\n\n# Custom length\nfisher_14, trigger_14 = ta.fisher(df['high'], df['low'], length=14)\n\nprint(df[['close', 'Fisher', 'Fisher_Trigger']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"connors-rsi-crsi",children:"Connors RSI (CRSI)"}),"\n",(0,i.jsx)(n.p,{children:"Connors RSI is a composite momentum oscillator consisting of three components: RSI of price, RSI of updown streak, and percent rank of 1-period ROC."}),"\n",(0,i.jsx)(n.h4,{id:"usage-8",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"crsi_result = ta.crsi(data, lenrsi=3, lenupdown=2, lenroc=100)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"data"})," ",(0,i.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"lenrsi"})," ",(0,i.jsx)(n.em,{children:"(int, default=3)"}),": RSI Length (period for price RSI)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"lenupdown"})," ",(0,i.jsx)(n.em,{children:"(int, default=2)"}),": UpDown Length (period for streak RSI)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"lenroc"})," ",(0,i.jsx)(n.em,{children:"(int, default=100)"}),": ROC Length (period for ROC percent rank)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"array"}),": Connors RSI values in the same format as input"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Connors RSI\ndf['CRSI'] = ta.crsi(df['close'])\n\n# Custom parameters\ndf['CRSI_Custom'] = ta.crsi(df['close'], lenrsi=5, lenupdown=3, lenroc=50)\n\nprint(df[['close', 'CRSI', 'CRSI_Custom']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"complete-example-multiple-momentum-indicators",children:"Complete Example: Multiple Momentum Indicators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from openalgo import api, ta\nimport pandas as pd\n\n# Get market data\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\ndf = client.history(symbol=\"SBIN\", exchange=\"NSE\", interval=\"5m\", \n                   start_date=\"2025-04-01\", end_date=\"2025-04-08\")\n\n# Calculate momentum indicators\ndf['RSI'] = ta.rsi(df['close'], 14)\n\n# MACD\nmacd_line, signal_line, histogram = ta.macd(df['close'])\ndf['MACD'] = macd_line\ndf['MACD_Signal'] = signal_line\ndf['MACD_Histogram'] = histogram\n\n# Stochastic\nstoch_k, stoch_d = ta.stochastic(df['high'], df['low'], df['close'])\ndf['Stoch_K'] = stoch_k\ndf['Stoch_D'] = stoch_d\n\n# CCI\ndf['CCI'] = ta.cci(df['high'], df['low'], df['close'], 20)\n\n# Williams %R\ndf['Williams_R'] = ta.williams_r(df['high'], df['low'], df['close'])\n\n# Balance of Power\ndf['BOP'] = ta.bop(df['open'], df['high'], df['low'], df['close'])\n\n# Elder Ray\nbull_power, bear_power = ta.elderray(df['high'], df['low'], df['close'])\ndf['Bull_Power'] = bull_power\ndf['Bear_Power'] = bear_power\n\n# Fisher Transform\nfisher, fisher_trigger = ta.fisher(df['high'], df['low'])\ndf['Fisher'] = fisher\ndf['Fisher_Trigger'] = fisher_trigger\n\n# Connors RSI\ndf['CRSI'] = ta.crsi(df['close'])\n\n# Display results\nmomentum_cols = ['close', 'RSI', 'MACD', 'MACD_Signal', 'Stoch_K', 'Stoch_D', \n                'CCI', 'Williams_R', 'BOP', 'Bull_Power', 'Bear_Power', \n                'Fisher', 'CRSI']\n\nprint(df[momentum_cols].tail(10))\n\n# Trading signals example\ndf['RSI_Oversold'] = df['RSI'] < 30\ndf['RSI_Overbought'] = df['RSI'] > 70\ndf['MACD_Bullish'] = df['MACD'] > df['MACD_Signal']\ndf['Stoch_Oversold'] = (df['Stoch_K'] < 20) & (df['Stoch_D'] < 20)\n\n# Combine signals\ndf['Bullish_Signal'] = (df['RSI_Oversold']) & (df['MACD_Bullish']) & (df['Stoch_Oversold'])\n\nprint(\"\\nBullish signals:\")\nprint(df[df['Bullish_Signal']][['close', 'RSI', 'MACD', 'Stoch_K']].head())\n"})}),"\n",(0,i.jsx)(n.h3,{id:"signal-interpretation-guide",children:"Signal Interpretation Guide"}),"\n",(0,i.jsx)(n.h4,{id:"rsi",children:"RSI"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"> 70"}),": Overbought (potential sell signal)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"< 30"}),": Oversold (potential buy signal)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"50"}),": Neutral momentum"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"macd",children:"MACD"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MACD > Signal"}),": Bullish momentum"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MACD < Signal"}),": Bearish momentum"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Histogram > 0"}),": Increasing bullish momentum"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Histogram < 0"}),": Increasing bearish momentum"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"stochastic",children:"Stochastic"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"%K > 80"}),": Overbought conditions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"%K < 20"}),": Oversold conditions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"%K crossing above %D"}),": Bullish signal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"%K crossing below %D"}),": Bearish signal"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"cci",children:"CCI"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"> +100"}),": Strong uptrend"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"< -100"}),": Strong downtrend"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"-100 to +100"}),": Ranging market"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"williams-r-1",children:"Williams %R"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"> -20"}),": Overbought"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"< -80"}),": Oversold"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Crossing -50"}),": Trend change signal"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use appropriate periods"}),": Shorter periods for more sensitive signals, longer for smoother trends"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Combine indicators"}),": Use multiple momentum indicators to confirm signals"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Market context"}),": Consider overall market trend when interpreting momentum signals"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Divergences"}),": Look for divergences between price and momentum indicators"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var l=r(6540);const i={},s=l.createContext(i);function a(e){const n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);