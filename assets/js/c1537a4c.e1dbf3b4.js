"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[6112],{6701:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"trading-platform/python/ema-crossover-strategy-with-stoploss-and-target","title":"EMA Crossover Strategy with Stoploss and Target","description":"Strategy Name","source":"@site/docs/trading-platform/python/ema-crossover-strategy-with-stoploss-and-target.md","sourceDirName":"trading-platform/python","slug":"/trading-platform/python/ema-crossover-strategy-with-stoploss-and-target","permalink":"/docs/trading-platform/python/ema-crossover-strategy-with-stoploss-and-target","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/ema-crossover-strategy-with-stoploss-and-target.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Python","permalink":"/docs/trading-platform/python/"},"next":{"title":"EMA Crossover Strategy","permalink":"/docs/trading-platform/python/ema-crossover-strategy"}}');var i=t(4848),s=t(8453);const o={},a="EMA Crossover Strategy with Stoploss and Target",d={},l=[{value:"Strategy Name",id:"strategy-name",level:4},{value:"Strategy Type",id:"strategy-type",level:4},{value:"Instrument Configuration",id:"instrument-configuration",level:4},{value:"Indicators Used",id:"indicators-used",level:4},{value:"Entry Conditions",id:"entry-conditions",level:4},{value:"Exit Conditions",id:"exit-conditions",level:4},{value:"Strategy Architecture",id:"strategy-architecture",level:4},{value:"Shutdown Behavior",id:"shutdown-behavior",level:4},{value:"Complete Code",id:"complete-code",level:4}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"ema-crossover-strategy-with-stoploss-and-target",children:"EMA Crossover Strategy with Stoploss and Target"})}),"\n",(0,i.jsx)(n.h4,{id:"strategy-name",children:"Strategy Name"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"EMA_Crossover_RELIANCE"})}),"\n",(0,i.jsx)(n.h4,{id:"strategy-type",children:"Strategy Type"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Positional Strategy"})," \u2013 This strategy does not impose any intraday entry/exit time limits. Positions may remain open across multiple trading sessions until stoploss or target conditions are met."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"instrument-configuration",children:"Instrument Configuration"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Symbol"}),(0,i.jsx)(n.td,{children:"RELIANCE"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Exchange"}),(0,i.jsx)(n.td,{children:"NSE"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Quantity"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Order Type"}),(0,i.jsx)(n.td,{children:"MARKET"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Product Type"}),(0,i.jsx)(n.td,{children:"MIS"})]})]})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Note: Even though MIS is used, positional behavior is controlled through logic, not by broker product type. This can be switched to CNC for true positional holding if desired."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"indicators-used",children:"Indicators Used"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"EMA 5"}),": Exponential Moving Average over the last 5 closing prices (short-term trend)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"EMA 10"}),": Exponential Moving Average over the last 10 closing prices (medium-term trend)."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"entry-conditions",children:"Entry Conditions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fetch 1-minute historical candle data every 5 seconds."}),"\n",(0,i.jsx)(n.li,{children:"Calculate EMA-5 and EMA-10."}),"\n",(0,i.jsxs)(n.li,{children:["Identify ",(0,i.jsx)(n.strong,{children:"confirmed"})," crossover using the last two closed candles (i.e., not the current forming candle).","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Buy Signal"}),": Previous candle EMA-5 < EMA-10 and last closed candle EMA-5 > EMA-10."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sell Signal"}),": Previous candle EMA-5 > EMA-10 and last closed candle EMA-5 < EMA-10."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["When a signal is confirmed:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Place a MARKET order (",(0,i.jsx)(n.code,{children:"BUY"})," or ",(0,i.jsx)(n.code,{children:"SELL"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Capture entry price and calculate:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stoploss = Entry Price \u2212 10.0"}),"\n",(0,i.jsx)(n.li,{children:"Target = Entry Price + 20.0"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"exit-conditions",children:"Exit Conditions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use WebSocket streaming to receive live LTP updates."}),"\n",(0,i.jsx)(n.li,{children:"Continuously monitor whether LTP hits stoploss or target levels."}),"\n",(0,i.jsx)(n.li,{children:"When triggered, exit the position by placing a MARKET order in the opposite direction."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"strategy-architecture",children:"Strategy Architecture"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Two dedicated threads:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WebSocket Thread"}),": Listens to real-time LTP and checks SL/Target."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strategy Thread"}),": Periodically fetches historical data, calculates EMA signals, and initiates trades."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Uses ",(0,i.jsx)(n.code,{children:"threading.Event()"})," to handle graceful shutdown via ",(0,i.jsx)(n.code,{children:"CTRL+C"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"shutdown-behavior",children:"Shutdown Behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"On receiving a keyboard interrupt, both threads are safely stopped."}),"\n",(0,i.jsx)(n.li,{children:"WebSocket subscription is removed, and connection is closed."}),"\n",(0,i.jsx)(n.li,{children:"The strategy exits cleanly and logs the shutdown."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"complete-code",children:"Complete Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import threading\nimport time\nimport signal\nimport pandas as pd\nimport pandas_ta as ta\nfrom datetime import datetime, timedelta\nfrom openalgo import api\n\n# Initialize OpenAlgo client\nclient = api(\n    api_key="openalgo-api-key",\n    host="http://127.0.0.1:5000",\n    ws_url="ws://127.0.0.1:8765"\n)\n\n# Configuration\nSTRATEGY_NAME = "EMA_Crossover_RELIANCE"\nSYMBOL = "RELIANCE"\nEXCHANGE = "NSE"\nQUANTITY = 1\nPRODUCT = "MIS"\nPRICE_TYPE = "MARKET"\nSTOPLOSS_BUFFER = 10.0\nTARGET_BUFFER = 20.0\ninstrument = [{"exchange": EXCHANGE, "symbol": SYMBOL}]\n\n# State Variables\nltp = None\nin_position = False\nentry_price = None\nstoploss_price = None\ntarget_price = None\ncurrent_position = None\nexit_signal = False\nstop_event = threading.Event()\n\n# WebSocket LTP Handler\ndef on_data_received(data):\n    global ltp, exit_signal\n    if data.get("type") == "market_data" and data.get("symbol") == SYMBOL:\n        ltp = float(data["data"]["ltp"])\n        print(f"LTP Update {EXCHANGE}:{SYMBOL} => \u20b9{ltp}")\n        if in_position and not exit_signal:\n            if ltp <= stoploss_price or ltp >= target_price:\n                print(f"Exit Triggered: LTP \u20b9{ltp} hit stoploss or target.")\n                exit_signal = True\n\n# WebSocket Thread\ndef websocket_thread():\n    try:\n        client.connect()\n        client.subscribe_ltp(instrument, on_data_received=on_data_received)\n        print("WebSocket LTP thread started.")\n        while not stop_event.is_set():\n            time.sleep(1)\n    finally:\n        print("Shutting down WebSocket...")\n        client.unsubscribe_ltp(instrument)\n        client.disconnect()\n        print("WebSocket connection closed.")\n\n# EMA Signal Logic\ndef get_latest_signals():\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=3)\n\n    df = client.history(\n        symbol=SYMBOL,\n        exchange=EXCHANGE,\n        interval="5m",\n        start_date=start_date.strftime("%Y-%m-%d"),\n        end_date=end_date.strftime("%Y-%m-%d")\n    )\n\n    df.ta.ema(length=5, append=True)\n    df.ta.ema(length=10, append=True)\n\n    if len(df) < 3:\n        print("Waiting for sufficient data...")\n        return None\n\n    prev = df.iloc[-3]\n    last = df.iloc[-2]\n\n    print(f"{datetime.now().strftime(\'%H:%M:%S\')} | EMA5: {last[\'EMA_5\']:.2f}, EMA10: {last[\'EMA_10\']:.2f}")\n\n    if prev[\'EMA_5\'] < prev[\'EMA_10\'] and last[\'EMA_5\'] > last[\'EMA_10\']:\n        print("Confirmed BUY crossover.")\n        return "BUY"\n    elif prev[\'EMA_5\'] > prev[\'EMA_10\'] and last[\'EMA_5\'] < last[\'EMA_10\']:\n        print("Confirmed SELL crossover.")\n        return "SELL"\n    return None\n\n# Place Order\ndef place_order(action):\n    global in_position, entry_price, stoploss_price, target_price, current_position\n\n    print(f"Placing {action} order for {SYMBOL}")\n    resp = client.placeorder(\n        strategy=STRATEGY_NAME,\n        symbol=SYMBOL,\n        exchange=EXCHANGE,\n        action=action,\n        price_type=PRICE_TYPE,\n        product=PRODUCT,\n        quantity=QUANTITY\n    )\n    print("Order Response:", resp)\n\n    if resp.get("status") == "success":\n        order_id = resp.get("orderid")\n        time.sleep(1)\n        status = client.orderstatus(order_id=order_id, strategy=STRATEGY_NAME)\n        data = status.get("data", {})\n        if data.get("order_status", "").lower() == "complete":\n            entry_price = float(data["price"])\n            stoploss_price = round(entry_price - STOPLOSS_BUFFER, 2)\n            target_price = round(entry_price + TARGET_BUFFER, 2)\n            current_position = action\n            in_position = True\n            print(f"Entry @ \u20b9{entry_price} | SL \u20b9{stoploss_price} | Target \u20b9{target_price}")\n\n# Exit Order\ndef exit_trade():\n    global in_position, exit_signal\n    action = "SELL" if current_position == "BUY" else "BUY"\n    print(f"Exiting trade with {action}")\n    client.placeorder(\n        strategy=STRATEGY_NAME,\n        symbol=SYMBOL,\n        exchange=EXCHANGE,\n        action=action,\n        price_type=PRICE_TYPE,\n        product=PRODUCT,\n        quantity=QUANTITY\n    )\n    in_position = False\n    exit_signal = False\n\n# Strategy Thread\ndef strategy_thread():\n    global exit_signal\n    while not stop_event.is_set():\n        if not in_position:\n            signal = get_latest_signals()\n            if signal:\n                place_order(signal)\n        elif exit_signal:\n            exit_trade()\n        time.sleep(5)\n\n# Main Execution\ndef main():\n    print("EMA Crossover Strategy is running...")\n\n    ws_thread = threading.Thread(target=websocket_thread)\n    strat_thread = threading.Thread(target=strategy_thread)\n\n    ws_thread.start()\n    strat_thread.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        print("KeyboardInterrupt received. Shutting down...")\n        stop_event.set()\n        ws_thread.join()\n        strat_thread.join()\n        print("Strategy shutdown complete.")\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);