"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[7365],{8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>t});var i=a(6540);const r={},l=i.createContext(r);function s(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}},9288:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"trading-platform/python/indicators/statistical","title":"Statistical","description":"OpenAlgo Statistical Indicators Documentation","source":"@site/docs/trading-platform/python/indicators/statistical.md","sourceDirName":"trading-platform/python/indicators","slug":"/trading-platform/python/indicators/statistical","permalink":"/docs/trading-platform/python/indicators/statistical","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/indicators/statistical.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Momentum","permalink":"/docs/trading-platform/python/indicators/momentum"},"next":{"title":"Trend","permalink":"/docs/trading-platform/python/indicators/trend"}}');var r=a(4848),l=a(8453);const s={},t="Statistical",d={},o=[{value:"OpenAlgo Statistical Indicators Documentation",id:"openalgo-statistical-indicators-documentation",level:2},{value:"Import Statement",id:"import-statement",level:3},{value:"Getting Market Data",id:"getting-market-data",level:3},{value:"Available Statistical Indicators",id:"available-statistical-indicators",level:3},{value:"Linear Regression (LINREG)",id:"linear-regression-linreg",level:3},{value:"Usage",id:"usage",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"Linear Regression Slope (LRSLOPE)",id:"linear-regression-slope-lrslope",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Pearson Correlation Coefficient (CORREL)",id:"pearson-correlation-coefficient-correl",level:3},{value:"Usage",id:"usage-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Beta Coefficient (BETA)",id:"beta-coefficient-beta",level:3},{value:"Usage",id:"usage-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Variance (VAR)",id:"variance-var",level:3},{value:"Usage",id:"usage-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"Time Series Forecast (TSF)",id:"time-series-forecast-tsf",level:3},{value:"Usage",id:"usage-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"Rolling Median (MEDIAN)",id:"rolling-median-median",level:3},{value:"Usage",id:"usage-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"Median Bands (MEDIAN_BANDS)",id:"median-bands-median_bands",level:3},{value:"Usage",id:"usage-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-7",level:4},{value:"Rolling Mode (MODE)",id:"rolling-mode-mode",level:3},{value:"Usage",id:"usage-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-8",level:4},{value:"Complete Example: Statistical Analysis Dashboard",id:"complete-example-statistical-analysis-dashboard",level:3},{value:"Advanced Statistical Analysis",id:"advanced-statistical-analysis",level:3},{value:"Performance Tips",id:"performance-tips",level:3},{value:"Common Use Cases",id:"common-use-cases",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"statistical",children:"Statistical"})}),"\n",(0,r.jsx)(n.h2,{id:"openalgo-statistical-indicators-documentation",children:"OpenAlgo Statistical Indicators Documentation"}),"\n",(0,r.jsx)(n.p,{children:"Statistical indicators analyze price data using mathematical and statistical methods to identify patterns, relationships, and forecast future price movements."}),"\n",(0,r.jsx)(n.h3,{id:"import-statement",children:"Import Statement"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from openalgo import ta\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getting-market-data",children:"Getting Market Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from openalgo import api\n\nclient = api(api_key=\'your_api_key_here\', host=\'http://127.0.0.1:5000\')\n\n# Fetch historical data\ndf = client.history(symbol="SBIN", \n                   exchange="NSE", \n                   interval="5m", \n                   start_date="2025-04-01", \n                   end_date="2025-04-08")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"available-statistical-indicators",children:"Available Statistical Indicators"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"linear-regression-linreg",children:"Linear Regression (LINREG)"}),"\n",(0,r.jsx)(n.p,{children:"Linear Regression calculates the linear regression line for a given period using the least squares method to identify the underlying trend."}),"\n",(0,r.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"linreg_result = ta.linreg(data, period)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": Period for linear regression calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Linear regression values in the same format as input"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate 20-period Linear Regression\nlinreg_20 = ta.linreg(df['close'], 20)\n\n# Add to DataFrame\ndf['LINREG_20'] = linreg_20\n\nprint(df[['close', 'LINREG_20']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"linear-regression-slope-lrslope",children:"Linear Regression Slope (LRSLOPE)"}),"\n",(0,r.jsx)(n.p,{children:"Linear Regression Slope measures the rate of change of the linear regression line, indicating the strength and direction of the trend."}),"\n",(0,r.jsx)(n.h4,{id:"usage-1",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"slope_result = ta.lrslope(data, period=100, interval=1)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=100)"}),": Period for linear regression calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"interval"})," ",(0,r.jsx)(n.em,{children:"(int, default=1)"}),": Interval divisor for slope calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Slope values in the same format as input"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Linear Regression Slope\nslope_50 = ta.lrslope(df['close'], period=50)\n\n# Add to DataFrame\ndf['LR_SLOPE_50'] = slope_50\n\nprint(df[['close', 'LR_SLOPE_50']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"pearson-correlation-coefficient-correl",children:"Pearson Correlation Coefficient (CORREL)"}),"\n",(0,r.jsx)(n.p,{children:"Correlation measures the statistical relationship between two data series, ranging from -1 (perfect negative correlation) to +1 (perfect positive correlation)."}),"\n",(0,r.jsx)(n.h4,{id:"usage-2",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"correlation_result = ta.correlation(data1, data2, period)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data1"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": First data series"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data2"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Second data series"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": Period for correlation calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Correlation values in the same format as input"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate correlation between close and volume\ncorrelation_20 = ta.correlation(df['close'], df['volume'], 20)\n\n# Add to DataFrame\ndf['CORREL_CLOSE_VOLUME'] = correlation_20\n\nprint(df[['close', 'volume', 'CORREL_CLOSE_VOLUME']].tail())\n\n# Calculate correlation between high and low\ncorrelation_hl = ta.correlation(df['high'], df['low'], 15)\ndf['CORREL_HIGH_LOW'] = correlation_hl\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"beta-coefficient-beta",children:"Beta Coefficient (BETA)"}),"\n",(0,r.jsx)(n.p,{children:"Beta measures the volatility of a security relative to the market, indicating how much the security price moves relative to market movements."}),"\n",(0,r.jsx)(n.h4,{id:"usage-3",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"beta_result = ta.beta(asset, market, period=252)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"asset"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Asset price data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"market"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Market price data (benchmark)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=252)"}),": Period for beta calculation (typically 1 year = 252 trading days)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Beta values in the same format as input"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Assuming you have market index data\n# For demonstration, we'll use another stock as market proxy\nmarket_df = client.history(symbol=\"NIFTY\", \n                          exchange=\"NSE_INDEX\", \n                          interval=\"5m\", \n                          start_date=\"2025-04-01\", \n                          end_date=\"2025-04-08\")\n\n# Calculate 50-period Beta\nbeta_50 = ta.beta(df['close'], market_df['close'], 50)\n\n# Add to DataFrame\ndf['BETA_50'] = beta_50\n\nprint(df[['close', 'BETA_50']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"variance-var",children:"Variance (VAR)"}),"\n",(0,r.jsx)(n.p,{children:"Variance measures the dispersion of price data, supporting both logarithmic returns and price modes with smoothing and signal generation."}),"\n",(0,r.jsx)(n.h4,{id:"usage-4",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'variance_result = ta.variance(data, lookback=20, mode="PR", ema_period=20, \n                             filter_lookback=20, ema_length=14, return_components=False)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data (close prices)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"lookback"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": Variance lookback period"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"mode"})," ",(0,r.jsx)(n.em,{children:'(str, default="PR")'}),': Variance mode ("LR" for Logarithmic Returns, "PR" for Price)']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ema_period"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": EMA period for variance smoothing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"filter_lookback"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": Lookback period for variance filter"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ema_length"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": EMA length for z-score smoothing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"return_components"})," ",(0,r.jsx)(n.em,{children:"(bool, default=False)"}),": If True, returns all components"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array or tuple"}),": Variance values or (variance, ema_variance, zscore, ema_zscore, stdev) if return_components=True"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate basic variance\nvariance_20 = ta.variance(df['close'], lookback=20)\ndf['VARIANCE_20'] = variance_20\n\n# Calculate variance with all components\nvar_components = ta.variance(df['close'], lookback=20, return_components=True)\nvariance, ema_var, zscore, ema_zscore, stdev = var_components\n\ndf['VARIANCE'] = variance\ndf['EMA_VARIANCE'] = ema_var\ndf['VAR_ZSCORE'] = zscore\n\nprint(df[['close', 'VARIANCE', 'EMA_VARIANCE', 'VAR_ZSCORE']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"time-series-forecast-tsf",children:"Time Series Forecast (TSF)"}),"\n",(0,r.jsx)(n.p,{children:"Time Series Forecast predicts the next value using linear regression analysis."}),"\n",(0,r.jsx)(n.h4,{id:"usage-5",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"tsf_result = ta.tsf(data, period=14)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": Period for forecast calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Time Series Forecast values in the same format as input"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate 14-period Time Series Forecast\ntsf_14 = ta.tsf(df['close'], 14)\n\n# Add to DataFrame\ndf['TSF_14'] = tsf_14\n\nprint(df[['close', 'TSF_14']].tail())\n\n# Compare actual vs forecast\ndf['TSF_DIFF'] = df['close'] - df['TSF_14']\nprint(\"Forecast accuracy (last 10 periods):\")\nprint(df[['close', 'TSF_14', 'TSF_DIFF']].tail(10))\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"rolling-median-median",children:"Rolling Median (MEDIAN)"}),"\n",(0,r.jsx)(n.p,{children:"Rolling Median calculates the median value over a rolling window, which is less sensitive to outliers than mean-based indicators."}),"\n",(0,r.jsx)(n.h4,{id:"usage-6",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"median_result = ta.median(data, period=3)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data (default hl2 in Pine Script)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=3)"}),": Period for median calculation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Median values in the same format as input"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate 5-period Rolling Median\nmedian_5 = ta.median(df['close'], 5)\n\n# Calculate median of typical price\ntypical_price = (df['high'] + df['low'] + df['close']) / 3\nmedian_typical = ta.median(typical_price, 7)\n\n# Add to DataFrame\ndf['MEDIAN_5'] = median_5\ndf['MEDIAN_TYPICAL'] = median_typical\n\nprint(df[['close', 'MEDIAN_5', 'MEDIAN_TYPICAL']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"median-bands-median_bands",children:"Median Bands (MEDIAN_BANDS)"}),"\n",(0,r.jsx)(n.p,{children:"Median Bands combine median calculation with ATR-based bands and EMA smoothing for comprehensive analysis."}),"\n",(0,r.jsx)(n.h4,{id:"usage-7",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"median, upper_band, lower_band, median_ema = ta.median_bands.calculate_with_bands(\n    high, low, close, source=None, median_length=3, atr_length=14, atr_mult=2.0\n)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"high"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"low"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"close"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Close prices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"source"})," ",(0,r.jsx)(n.em,{children:"(array-like, optional)"}),": Source data for median (default: hl2)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"median_length"})," ",(0,r.jsx)(n.em,{children:"(int, default=3)"}),": Period for median calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"atr_length"})," ",(0,r.jsx)(n.em,{children:"(int, default=14)"}),": Period for ATR calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"atr_mult"})," ",(0,r.jsx)(n.em,{children:"(float, default=2.0)"}),": ATR multiplier for bands"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tuple"}),": (median, upper_band, lower_band, median_ema) arrays"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate Median Bands\nmedian, upper, lower, median_ema = ta.median_bands.calculate_with_bands(\n    df['high'], df['low'], df['close']\n)\n\n# Add to DataFrame\ndf['MEDIAN'] = median\ndf['MEDIAN_UPPER'] = upper\ndf['MEDIAN_LOWER'] = lower\ndf['MEDIAN_EMA'] = median_ema\n\nprint(df[['close', 'MEDIAN', 'MEDIAN_UPPER', 'MEDIAN_LOWER']].tail())\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"rolling-mode-mode",children:"Rolling Mode (MODE)"}),"\n",(0,r.jsx)(n.p,{children:"Rolling Mode calculates the most frequent value over a rolling window using discretization."}),"\n",(0,r.jsx)(n.h4,{id:"usage-8",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"mode_result = ta.mode(data, period=20, bins=10)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," ",(0,r.jsx)(n.em,{children:"(array-like)"}),": Price data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"period"})," ",(0,r.jsx)(n.em,{children:"(int, default=20)"}),": Period for mode calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"bins"})," ",(0,r.jsx)(n.em,{children:"(int, default=10)"}),": Number of bins for discretization"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"array"}),": Mode values in the same format as input"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Calculate 15-period Rolling Mode\nmode_15 = ta.mode(df['close'], period=15, bins=8)\n\n# Add to DataFrame\ndf['MODE_15'] = mode_15\n\nprint(df[['close', 'MODE_15']].tail())\n\n# Calculate mode for volume (often useful for volume analysis)\nvolume_mode = ta.mode(df['volume'], period=20, bins=12)\ndf['VOLUME_MODE'] = volume_mode\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"complete-example-statistical-analysis-dashboard",children:"Complete Example: Statistical Analysis Dashboard"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pandas as pd\nfrom openalgo import api, ta\n\n# Get market data\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\n\ndf = client.history(symbol=\"SBIN\", \n                   exchange=\"NSE\", \n                   interval=\"5m\", \n                   start_date=\"2025-04-01\", \n                   end_date=\"2025-04-08\")\n\n# Calculate comprehensive statistical indicators\nprint(\"Calculating Statistical Indicators...\")\n\n# Trend Analysis\ndf['LINREG_20'] = ta.linreg(df['close'], 20)\ndf['LR_SLOPE_20'] = ta.lrslope(df['close'], 20)\ndf['TSF_14'] = ta.tsf(df['close'], 14)\n\n# Central Tendency\ndf['MEDIAN_5'] = ta.median(df['close'], 5)\ndf['MODE_15'] = ta.mode(df['close'], 15)\n\n# Variability Analysis\ndf['VARIANCE_20'] = ta.variance(df['close'], 20)\n\n# Get variance components for detailed analysis\nvar_components = ta.variance(df['close'], lookback=20, return_components=True)\nvariance, ema_var, zscore, ema_zscore, stdev = var_components\n\ndf['VARIANCE'] = variance\ndf['EMA_VARIANCE'] = ema_var\ndf['VAR_ZSCORE'] = zscore\ndf['STDEV'] = stdev\n\n# Correlation Analysis\ndf['CORREL_CLOSE_VOLUME'] = ta.correlation(df['close'], df['volume'], 20)\ndf['CORREL_HIGH_LOW'] = ta.correlation(df['high'], df['low'], 15)\n\n# Median Bands Analysis\nmedian, upper, lower, median_ema = ta.median_bands.calculate_with_bands(\n    df['high'], df['low'], df['close'], median_length=5, atr_length=14\n)\n\ndf['MEDIAN_BANDS'] = median\ndf['MEDIAN_UPPER'] = upper\ndf['MEDIAN_LOWER'] = lower\ndf['MEDIAN_EMA'] = median_ema\n\n# Create analysis summary\nanalysis_cols = [\n    'close', 'LINREG_20', 'LR_SLOPE_20', 'TSF_14', \n    'MEDIAN_5', 'VARIANCE_20', 'VAR_ZSCORE', \n    'CORREL_CLOSE_VOLUME', 'MEDIAN_BANDS'\n]\n\nprint(\"\\nStatistical Analysis Summary (Last 10 periods):\")\nprint(df[analysis_cols].tail(10))\n\n# Generate trading signals based on statistical indicators\nprint(\"\\nGenerating Statistical Trading Signals...\")\n\n# Trend Strength Signal (based on Linear Regression Slope)\ndf['TREND_SIGNAL'] = 'NEUTRAL'\ndf.loc[df['LR_SLOPE_20'] > 0.5, 'TREND_SIGNAL'] = 'BULLISH'\ndf.loc[df['LR_SLOPE_20'] < -0.5, 'TREND_SIGNAL'] = 'BEARISH'\n\n# Variance-based Volatility Signal\ndf['VOLATILITY_SIGNAL'] = 'NORMAL'\ndf.loc[df['VAR_ZSCORE'] > 1.5, 'VOLATILITY_SIGNAL'] = 'HIGH'\ndf.loc[df['VAR_ZSCORE'] < -1.5, 'VOLATILITY_SIGNAL'] = 'LOW'\n\n# Price Position relative to Statistical Measures\ndf['PRICE_VS_LINREG'] = (df['close'] - df['LINREG_20']) / df['LINREG_20'] * 100\ndf['PRICE_VS_MEDIAN'] = (df['close'] - df['MEDIAN_5']) / df['MEDIAN_5'] * 100\n\n# Forecast Accuracy\ndf['FORECAST_ERROR'] = abs(df['close'] - df['TSF_14'].shift(1))\ndf['FORECAST_ACCURACY'] = (1 - df['FORECAST_ERROR'] / df['close']) * 100\n\nprint(\"\\nTrading Signals Summary:\")\nsignal_summary = df[['TREND_SIGNAL', 'VOLATILITY_SIGNAL', 'PRICE_VS_LINREG', \n                    'PRICE_VS_MEDIAN', 'FORECAST_ACCURACY']].tail(5)\nprint(signal_summary)\n\n# Statistical Summary\nprint(\"\\nStatistical Metrics Summary:\")\nprint(f\"Average Correlation (Close vs Volume): {df['CORREL_CLOSE_VOLUME'].mean():.4f}\")\nprint(f\"Average Variance: {df['VARIANCE_20'].mean():.4f}\")\nprint(f\"Average Forecast Accuracy: {df['FORECAST_ACCURACY'].mean():.2f}%\")\nprint(f\"Current Trend Slope: {df['LR_SLOPE_20'].iloc[-1]:.4f}\")\n\n# Volatility Analysis\nrecent_volatility = df['VAR_ZSCORE'].tail(20)\nprint(f\"Recent Volatility Z-Score: {recent_volatility.mean():.2f}\")\nprint(f\"Volatility Regime: {df['VOLATILITY_SIGNAL'].iloc[-1]}\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"advanced-statistical-analysis",children:"Advanced Statistical Analysis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Advanced correlation matrix\ndef calculate_correlation_matrix(df, period=20):\n    \"\"\"Calculate correlation matrix for OHLCV data\"\"\"\n    correlations = {}\n    \n    price_cols = ['open', 'high', 'low', 'close', 'volume']\n    \n    for i, col1 in enumerate(price_cols):\n        for col2 in price_cols[i+1:]:\n            corr_name = f\"CORR_{col1.upper()}_{col2.upper()}\"\n            correlations[corr_name] = ta.correlation(df[col1], df[col2], period)\n    \n    return correlations\n\n# Calculate all correlations\ncorrelations = calculate_correlation_matrix(df, 20)\nfor name, values in correlations.items():\n    df[name] = values\n\nprint(\"\\nCorrelation Matrix (Latest Values):\")\ncorr_cols = [col for col in df.columns if col.startswith('CORR_')]\nlatest_corr = df[corr_cols].iloc[-1]\nprint(latest_corr)\n\n# Statistical anomaly detection\ndef detect_statistical_anomalies(df, z_threshold=2.0):\n    \"\"\"Detect statistical anomalies in price data\"\"\"\n    \n    # Price anomalies based on variance z-score\n    df['PRICE_ANOMALY'] = abs(df['VAR_ZSCORE']) > z_threshold\n    \n    # Volume anomalies\n    volume_zscore = (df['volume'] - df['volume'].rolling(20).mean()) / df['volume'].rolling(20).std()\n    df['VOLUME_ANOMALY'] = abs(volume_zscore) > z_threshold\n    \n    # Return anomalies\n    returns = df['close'].pct_change()\n    returns_zscore = (returns - returns.rolling(20).mean()) / returns.rolling(20).std()\n    df['RETURN_ANOMALY'] = abs(returns_zscore) > z_threshold\n    \n    return df\n\n# Detect anomalies\ndf = detect_statistical_anomalies(df)\n\n# Summary of anomalies\nanomaly_summary = df[['PRICE_ANOMALY', 'VOLUME_ANOMALY', 'RETURN_ANOMALY']].sum()\nprint(f\"\\nAnomaly Detection Summary:\")\nprint(f\"Price Anomalies: {anomaly_summary['PRICE_ANOMALY']}\")\nprint(f\"Volume Anomalies: {anomaly_summary['VOLUME_ANOMALY']}\")\nprint(f\"Return Anomalies: {anomaly_summary['RETURN_ANOMALY']}\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Period Selection"}),": Choose appropriate periods based on your analysis timeframe"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Quality"}),": Ensure clean data for accurate statistical calculations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Correlation Interpretation"}),": Remember correlation doesn't imply causation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Statistical Significance"}),": Consider sample size when interpreting results"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Regime Changes"}),": Monitor for changes in statistical relationships over time"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trend Analysis"}),": Use Linear Regression and slopes for trend identification"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Risk Management"}),": Apply variance and correlation for portfolio risk assessment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Anomaly Detection"}),": Use statistical z-scores to identify unusual market behavior"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Forecasting"}),": Combine TSF with other indicators for price prediction"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Market Relationships"}),": Analyze correlations between different assets or timeframes"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);