"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[6540],{2688:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"trading-platform/python/intraday-rolling-straddles","title":"Intraday Rolling Straddles","description":"Overview","source":"@site/docs/trading-platform/python/intraday-rolling-straddles.md","sourceDirName":"trading-platform/python","slug":"/trading-platform/python/intraday-rolling-straddles","permalink":"/docs/trading-platform/python/intraday-rolling-straddles","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/intraday-rolling-straddles.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Volume","permalink":"/docs/trading-platform/python/indicators/volume"},"next":{"title":"NIFTY Open Interest","permalink":"/docs/trading-platform/python/nifty-open-interest"}}');var s=r(4848),o=r(8453);const l={},i="Intraday Rolling Straddles",d={},a=[{value:"<strong>Overview</strong>",id:"overview",level:3},{value:"<strong>Key Features</strong>",id:"key-features",level:3},{value:"<strong>Python Strategy</strong>",id:"python-strategy",level:3},{value:"<strong>Parameters (Edit at Top of Script)</strong>",id:"parameters-edit-at-top-of-script",level:3},{value:"<strong>Order Format</strong>",id:"order-format",level:3},{value:"<strong>How the Strategy Works</strong>",id:"how-the-strategy-works",level:3},{value:"<strong>Usage</strong>",id:"usage",level:3},{value:"<strong>Limitations and Notes</strong>",id:"limitations-and-notes",level:3}];function c(e){const n={br:"br",code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"intraday-rolling-straddles",children:"Intraday Rolling Straddles"})}),"\n",(0,s.jsx)(n.h3,{id:"overview",children:(0,s.jsx)(n.strong,{children:"Overview"})}),"\n",(0,s.jsxs)(n.p,{children:["This sample strategy implements an ",(0,s.jsx)(n.strong,{children:"intraday rolling short straddle"})," for NIFTY index options using OpenAlgo Python APIs. The bot sells an at-the-money (ATM) NIFTY straddle at a configurable time, then automatically rolls (closes and reopens a new straddle) whenever the NIFTY spot moves \xb10.4% from the last entry reference, up to a user-defined daily limit. All open positions are force-closed (squared off) at a specified time before market close."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"key-features",children:(0,s.jsx)(n.strong,{children:"Key Features"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Instrument:"})," NIFTY Index Options (customizable)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fixed Expiry:"})," All option orders use the expiry you set (e.g., ",(0,s.jsx)(n.code,{children:"19JUN25"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entry:"})," Places the first ATM straddle at a configurable time (e.g., 10:00 a.m.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rolling Trigger:"})," Monitors the NIFTY spot price; rolls to a new ATM straddle on every 0.4% move from the last reference point"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Order Limit:"})," Limits the number of rolling straddles per day (default: 3, can be changed)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Exit:"})," Squares off all open legs at a configurable EOD time (e.g., 3:15 p.m.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"All times in IST"})," (Asia/Kolkata timezone)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No database or persistent logs"})," \u2014 actions are printed to the console for full transparency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parameter-based configuration:"})," Change any key value by simply editing the variable at the top of the script"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"python-strategy",children:(0,s.jsx)(n.strong,{children:"Python Strategy"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import time as systime\nfrom datetime import datetime, time as dtime\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom openalgo import api\nimport pytz\n\nprint("\ud83d\udd01 OpenAlgo Python Bot is running.")\n\n# === USER PARAMETERS ===\n\nSTRADDLE_ENTRY_HOUR = 10      # 10 for 10:00 AM\nSTRADDLE_ENTRY_MINUTE = 0     # 0 for 10:00 AM\n\nSQUAREOFF_HOUR = 15           # 15 for 3:15 PM\nSQUAREOFF_MINUTE = 15         # 15 for 3:15 PM\n\nMAX_STRADDLES_PER_DAY = 3     # Daily limit on rolling straddles\nROLLING_THRESHOLD_PCT = 0.4   # Threshold for rolling (in percent, e.g. 0.4 means 0.4%)\n\nLOT_SIZE = 75\nSTRATEGY = "rolling_straddle"\nSYMBOL = "NIFTY"\nEXPIRY = "19JUN25"\nEXCHANGE = "NSE_INDEX"\nOPTION_EXCHANGE = "NFO"\nSTRIKE_INTERVAL = 50\n\nAPI_KEY = "YOU-OPENALGO-APIKEY"\nAPI_HOST = "http://127.0.0.1:5000"\n\nclient = api(api_key=API_KEY, host=API_HOST)\n\ndef get_atm_strike(spot):\n    return int(round(spot / STRIKE_INTERVAL) * STRIKE_INTERVAL)\n\ndef get_spot():\n    quote = client.quotes(symbol=SYMBOL, exchange=EXCHANGE)\n    print("Quote:", quote)\n    data = quote[\'data\']\n    if isinstance(data, list):\n        data = data[0]\n    return data[\'ltp\']\n\ndef get_option_symbol(base, expiry, strike, opttype):\n    return f"{base}{expiry}{strike}{opttype}"\n\n# --- State ---\nlast_reference_spot = None\ncurrent_leg_symbols = []\nstraddle_entry_count = 0\n\ndef reset_daily_counter():\n    global straddle_entry_count\n    straddle_entry_count = 0\n    print(f"Daily straddle entry counter reset to zero at {datetime.now()}")\n\ndef place_straddle():\n    global last_reference_spot, current_leg_symbols, straddle_entry_count\n    if straddle_entry_count >= MAX_STRADDLES_PER_DAY:\n        print(f"Straddle entry limit ({MAX_STRADDLES_PER_DAY}) reached for today.")\n        return\n    spot = get_spot()\n    atm_strike = get_atm_strike(spot)\n    ce = get_option_symbol(SYMBOL, EXPIRY, atm_strike, "CE")\n    pe = get_option_symbol(SYMBOL, EXPIRY, atm_strike, "PE")\n    for sym in [ce, pe]:\n        order = client.placeorder(\n            strategy=STRATEGY, symbol=sym, action="SELL",\n            exchange=OPTION_EXCHANGE, price_type="MARKET",\n            product="MIS", quantity=LOT_SIZE\n        )\n        print(f"Order placed for {sym}: {order}")\n    last_reference_spot = spot\n    current_leg_symbols = [ce, pe]\n    straddle_entry_count += 1\n    print(f"Straddle Entry Count updated: {straddle_entry_count}")\n\ndef close_straddle():\n    for sym in current_leg_symbols:\n        order = client.placeorder(\n            strategy=STRATEGY, symbol=sym, action="BUY",\n            exchange=OPTION_EXCHANGE, price_type="MARKET",\n            product="MIS", quantity=LOT_SIZE\n        )\n        print(f"Order EXIT for {sym}: {order}")\n\ndef rolling_monitor():\n    global last_reference_spot\n    spot = get_spot()\n    print(f"Spot: {spot}")\n    print(f"Last Reference Spot: {last_reference_spot}")\n    threshold = last_reference_spot * (ROLLING_THRESHOLD_PCT / 100.0)\n    if abs(spot - last_reference_spot) >= threshold:\n        print(f"Rolling: Spot moved {spot} from ref {last_reference_spot} (Threshold: {threshold})")\n        close_straddle()\n        place_straddle()\n\ndef eod_exit():\n    print("EOD exit triggered.")\n    close_straddle()\n\n# === Scheduler ===\nscheduler = BackgroundScheduler(timezone="Asia/Kolkata")\nscheduler.add_job(reset_daily_counter, \'cron\', day_of_week=\'mon-fri\', hour=STRADDLE_ENTRY_HOUR, minute=STRADDLE_ENTRY_MINUTE)\nscheduler.add_job(place_straddle, \'cron\', day_of_week=\'mon-fri\', hour=STRADDLE_ENTRY_HOUR, minute=STRADDLE_ENTRY_MINUTE)\nscheduler.add_job(eod_exit, \'cron\', day_of_week=\'mon-fri\', hour=SQUAREOFF_HOUR, minute=SQUAREOFF_MINUTE)\nscheduler.start()\n\ntry:\n    while True:\n        now = datetime.now(pytz.timezone("Asia/Kolkata")).time()\n        entry_start = dtime(STRADDLE_ENTRY_HOUR, STRADDLE_ENTRY_MINUTE)\n        squareoff_time = dtime(SQUAREOFF_HOUR, SQUAREOFF_MINUTE)\n        # Rolling monitor runs during straddle session only\n        if entry_start < now < squareoff_time and last_reference_spot:\n            rolling_monitor()\n        systime.sleep(5)\nexcept (KeyboardInterrupt, SystemExit):\n    scheduler.shutdown()\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"parameters-edit-at-top-of-script",children:(0,s.jsx)(n.strong,{children:"Parameters (Edit at Top of Script)"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Variable"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Example"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"STRADDLE_ENTRY_HOUR"})}),(0,s.jsx)(n.td,{children:"Hour to enter first straddle (24h format)"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"10"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"STRADDLE_ENTRY_MINUTE"})}),(0,s.jsx)(n.td,{children:"Minute to enter first straddle"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"0"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"SQUAREOFF_HOUR"})}),(0,s.jsx)(n.td,{children:"Hour to force square-off all legs"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"15"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"SQUAREOFF_MINUTE"})}),(0,s.jsx)(n.td,{children:"Minute to force square-off all legs"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"15"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"MAX_STRADDLES_PER_DAY"})}),(0,s.jsx)(n.td,{children:"Max straddles allowed per day"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"3"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"EXPIRY"})}),(0,s.jsx)(n.td,{children:"Expiry date for all option legs (OpenAlgo format)"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"19JUN25"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"LOT_SIZE"})}),(0,s.jsx)(n.td,{children:"Number of options per leg (NIFTY = 75 as of 2025)"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"75"})})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"order-format",children:(0,s.jsx)(n.strong,{children:"Order Format"})}),"\n",(0,s.jsx)(n.p,{children:"All orders use the OpenAlgo symbol format:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Call Example:"})," ",(0,s.jsx)(n.code,{children:"NIFTY19JUN2522350CE"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Put Example:"})," ",(0,s.jsx)(n.code,{children:"NIFTY19JUN2522350PE"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Orders are placed as:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"MARKET"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action:"})," ",(0,s.jsx)(n.code,{children:"SELL"})," (entry), ",(0,s.jsx)(n.code,{children:"BUY"})," (exit)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Product:"})," ",(0,s.jsx)(n.code,{children:"MIS"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Exchange:"})," ",(0,s.jsx)(n.code,{children:"NFO"})]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"how-the-strategy-works",children:(0,s.jsx)(n.strong,{children:"How the Strategy Works"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Start & First Entry:"}),(0,s.jsx)(n.br,{}),"\n","At your configured entry time (e.g., 10:00 a.m.), the bot sells 1 lot of ATM NIFTY CE and PE for the expiry you set."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rolling Logic:"}),(0,s.jsx)(n.br,{}),"\n","Every 5 seconds, the bot checks the latest NIFTY spot. If the spot moves up or down by at least 0.4% from the last entry reference, the bot:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Closes both legs of the current straddle"}),"\n",(0,s.jsx)(n.li,{children:"Sells a new ATM CE and PE (same expiry, current ATM)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Daily Straddle Limit:"}),(0,s.jsx)(n.br,{}),"\n","The bot never enters more straddles than the daily limit you set. (Default: 3 per day)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"End-of-Day Squareoff:"}),(0,s.jsx)(n.br,{}),"\n","At your configured squareoff time (e.g., 3:15 p.m.), any open straddle is closed, and no further trades are placed for the day."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Console Logging:"}),(0,s.jsx)(n.br,{}),"\n","All quotes, trades, entries, exits, and reference changes are clearly printed in real time."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:(0,s.jsx)(n.strong,{children:"Usage"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Edit the parameters at the top of the script as needed (no need for .env or environment variables)."}),"\n",(0,s.jsx)(n.li,{children:"Run the script. Ensure your OpenAlgo API is running and accessible."}),"\n",(0,s.jsx)(n.li,{children:"All actions and errors will be displayed in your terminal or console."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"limitations-and-notes",children:(0,s.jsx)(n.strong,{children:"Limitations and Notes"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This sample does ",(0,s.jsx)(n.strong,{children:"not"})," use persistent order logging or database."]}),"\n",(0,s.jsx)(n.li,{children:"No explicit risk management or stop loss (can be added if desired)."}),"\n",(0,s.jsx)(n.li,{children:"Only supports one instrument/expiry at a time."}),"\n",(0,s.jsx)(n.li,{children:"Ensure your OpenAlgo symbol format and expiry match your broker\u2019s contract details."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var t=r(6540);const s={},o=t.createContext(s);function l(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);