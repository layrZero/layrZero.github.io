"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[6485],{8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var r=i(6540);const a={},l=r.createContext(a);function s(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(l.Provider,{value:n},e.children)}},8601:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"trading-platform/python/indicators/trend","title":"Trend","description":"Trend indicators help identify the direction and strength of market trends. All examples use real market data fetched via OpenAlgo API.","source":"@site/docs/trading-platform/python/indicators/trend.md","sourceDirName":"trading-platform/python/indicators","slug":"/trading-platform/python/indicators/trend","permalink":"/docs/trading-platform/python/indicators/trend","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/indicators/trend.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Statistical","permalink":"/docs/trading-platform/python/indicators/statistical"},"next":{"title":"Utility","permalink":"/docs/trading-platform/python/indicators/utility"}}');var a=i(4848),l=i(8453);const s={},d="Trend",t={},o=[{value:"Data Setup",id:"data-setup",level:3},{value:"Simple Moving Average (SMA)",id:"simple-moving-average-sma",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage Example",id:"usage-example",level:4},{value:"Exponential Moving Average (EMA)",id:"exponential-moving-average-ema",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Usage Example",id:"usage-example-1",level:4},{value:"Weighted Moving Average (WMA)",id:"weighted-moving-average-wma",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Usage Example",id:"usage-example-2",level:4},{value:"Hull Moving Average (HMA)",id:"hull-moving-average-hma",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Usage Example",id:"usage-example-3",level:4},{value:"Volume Weighted Moving Average (VWMA)",id:"volume-weighted-moving-average-vwma",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Usage Example",id:"usage-example-4",level:4},{value:"Kaufman&#39;s Adaptive Moving Average (KAMA)",id:"kaufmans-adaptive-moving-average-kama",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Usage Example",id:"usage-example-5",level:4},{value:"Supertrend",id:"supertrend",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Usage Example",id:"usage-example-6",level:4},{value:"Ichimoku Cloud",id:"ichimoku-cloud",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Usage Example",id:"usage-example-7",level:4},{value:"Arnaud Legoux Moving Average (ALMA)",id:"arnaud-legoux-moving-average-alma",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Usage Example",id:"usage-example-8",level:4},{value:"Zero Lag Exponential Moving Average (ZLEMA)",id:"zero-lag-exponential-moving-average-zlema",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Usage Example",id:"usage-example-9",level:4},{value:"Multiple Exponential Moving Average (DEMA &amp; TEMA)",id:"multiple-exponential-moving-average-dema--tema",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Usage Example",id:"usage-example-10",level:4},{value:"Complete Trading Analysis Example",id:"complete-trading-analysis-example",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"trend",children:"Trend"})}),"\n",(0,a.jsx)(n.p,{children:"Trend indicators help identify the direction and strength of market trends. All examples use real market data fetched via OpenAlgo API."}),"\n",(0,a.jsx)(n.h3,{id:"data-setup",children:"Data Setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from openalgo import api, ta\nimport pandas as pd\n\n# Initialize API client\nclient = api(api_key=\'your_api_key_here\', host=\'http://127.0.0.1:5000\')\n\n# Fetch historical data\ndf = client.history(symbol="SBIN", \n                   exchange="NSE", \n                   interval="5m", \n                   start_date="2025-04-01", \n                   end_date="2025-04-08")\n\nprint(df.head())\n#                            close    high     low    open  volume\n# timestamp                                                        \n# 2025-04-01 09:15:00+05:30  772.50  774.00  763.20  766.50  318625\n# 2025-04-01 09:20:00+05:30  773.20  774.95  772.10  772.45  197189\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"simple-moving-average-sma",children:"Simple Moving Average (SMA)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": The most basic trend indicator, calculated by averaging closing prices over a specified period."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int)"}),": Number of periods for the moving average"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pandas.Series"}),": SMA values with original index preserved"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate 20-period SMA\ndf['SMA_20'] = ta.sma(df['close'], 20)\n\n# Calculate multiple SMAs\ndf['SMA_10'] = ta.sma(df['close'], 10)\ndf['SMA_50'] = ta.sma(df['close'], 50)\n\nprint(df[['close', 'SMA_10', 'SMA_20', 'SMA_50']].tail())\n#                            close   SMA_10   SMA_20   SMA_50\n# timestamp                                                  \n# 2025-04-08 14:00:00+05:30  768.25  770.12  771.45  773.28\n# 2025-04-08 14:05:00+05:30  769.10  769.98  771.33  773.22\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"exponential-moving-average-ema",children:"Exponential Moving Average (EMA)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Gives more weight to recent prices, making it more responsive to new information than SMA."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int)"}),": Number of periods for the moving average"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pandas.Series"}),": EMA values with original index preserved"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-1",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate 20-period EMA\ndf['EMA_20'] = ta.ema(df['close'], 20)\n\n# Compare with SMA\ndf['SMA_20'] = ta.sma(df['close'], 20)\n\n# Plot comparison\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12, 6))\nplt.plot(df.index, df['close'], label='Close Price', alpha=0.7)\nplt.plot(df.index, df['SMA_20'], label='SMA 20', alpha=0.8)\nplt.plot(df.index, df['EMA_20'], label='EMA 20', alpha=0.8)\nplt.legend()\nplt.title('SBIN: Close Price vs Moving Averages')\nplt.show()\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"weighted-moving-average-wma",children:"Weighted Moving Average (WMA)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Assigns greater weight to recent data points using a linear weighting scheme."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int)"}),": Number of periods for the moving average"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"numpy.ndarray"}),": WMA values"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-2",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate 20-period WMA\ndf['WMA_20'] = ta.wma(df['close'], 20)\n\n# Compare responsiveness of different MAs\ndf['MA_Comparison'] = df['close'] - df['SMA_20']\ndf['EMA_Comparison'] = df['close'] - df['EMA_20'] \ndf['WMA_Comparison'] = df['close'] - df['WMA_20']\n\nprint(df[['MA_Comparison', 'EMA_Comparison', 'WMA_Comparison']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"hull-moving-average-hma",children:"Hull Moving Average (HMA)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Attempts to minimize lag while improving smoothing using weighted moving averages."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int)"}),": Number of periods for the moving average"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pandas.Series"}),": HMA values with original index preserved"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-3",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate 16-period HMA (common period for HMA)\ndf['HMA_16'] = ta.hma(df['close'], 16)\n\n# Compare lag between different MAs\ndf['Price_Change'] = df['close'].pct_change()\ndf['HMA_Change'] = df['HMA_16'].pct_change()\ndf['EMA_Change'] = df['EMA_20'].pct_change()\n\n# Calculate correlation to measure responsiveness\ncorrelation_hma = df['Price_Change'].corr(df['HMA_Change'])\ncorrelation_ema = df['Price_Change'].corr(df['EMA_Change'])\nprint(f\"HMA Correlation: {correlation_hma:.4f}\")\nprint(f\"EMA Correlation: {correlation_ema:.4f}\")\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"volume-weighted-moving-average-vwma",children:"Volume Weighted Moving Average (VWMA)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Gives more weight to periods with higher volume, making it more responsive to volume-driven price movements."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"volume"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Volume data"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int)"}),": Number of periods for the moving average"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pandas.Series"}),": VWMA values with original index preserved"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-4",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate 20-period VWMA\ndf['VWMA_20'] = ta.vwma(df['close'], df['volume'], 20)\n\n# Compare VWMA with regular SMA during high/low volume periods\ndf['Volume_MA'] = ta.sma(df['volume'], 20)\ndf['High_Volume'] = df['volume'] > df['Volume_MA']\n\n# Analyze performance during high volume periods\nhigh_vol_periods = df[df['High_Volume'] == True]\nprint(\"VWMA vs SMA during high volume periods:\")\nprint(high_vol_periods[['close', 'SMA_20', 'VWMA_20', 'volume']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"kaufmans-adaptive-moving-average-kama",children:"Kaufman's Adaptive Moving Average (KAMA)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Adjusts its smoothing based on market volatility, becoming more responsive in trending markets and smoother in sideways markets."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"length"})," ",(0,a.jsx)(n.em,{children:"(int, default=14)"}),": Period for efficiency ratio calculation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"fast_length"})," ",(0,a.jsx)(n.em,{children:"(int, default=2)"}),": Fast EMA length"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"slow_length"})," ",(0,a.jsx)(n.em,{children:"(int, default=30)"}),": Slow EMA length"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pandas.Series"}),": KAMA values with original index preserved"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-5",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate KAMA with default parameters\ndf['KAMA_14'] = ta.kama(df['close'])\n\n# Calculate market efficiency ratio manually for analysis\ndef calculate_efficiency_ratio(prices, period):\n    direction = abs(prices.iloc[-1] - prices.iloc[-period-1])\n    volatility = abs(prices.diff()).rolling(period).sum().iloc[-1]\n    return direction / volatility if volatility > 0 else 0\n\n# Analyze KAMA adaptation\ndf['ER'] = df['close'].rolling(14).apply(lambda x: calculate_efficiency_ratio(x, 14))\ndf['KAMA_vs_Close'] = abs(df['KAMA_14'] - df['close'])\n\nprint(\"KAMA Efficiency and Adaptation:\")\nprint(df[['close', 'KAMA_14', 'ER', 'KAMA_vs_Close']].tail(10))\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"supertrend",children:"Supertrend"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": A trend-following indicator that uses ATR to calculate dynamic support and resistance levels."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"high"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"low"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"close"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int, default=10)"}),": ATR period"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"multiplier"})," ",(0,a.jsx)(n.em,{children:"(float, default=3.0)"}),": ATR multiplier"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tuple"}),": (supertrend_values, direction_values) as pandas.Series","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"direction"}),": -1 for uptrend (green), 1 for downtrend (red)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-6",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate Supertrend with default parameters\ndf['Supertrend'], df['ST_Direction'] = ta.supertrend(df['high'], df['low'], df['close'])\n\n# Calculate custom Supertrend for shorter timeframes\ndf['ST_Fast'], df['ST_Fast_Dir'] = ta.supertrend(df['high'], df['low'], df['close'], \n                                                period=7, multiplier=2.0)\n\n# Identify trend changes\ndf['Trend_Change'] = df['ST_Direction'].diff() != 0\n\n# Analyze trend statistics\nuptrend_periods = len(df[df['ST_Direction'] == -1])\ndowntrend_periods = len(df[df['ST_Direction'] == 1])\ntrend_changes = df['Trend_Change'].sum()\n\nprint(f\"Uptrend periods: {uptrend_periods}\")\nprint(f\"Downtrend periods: {downtrend_periods}\")\nprint(f\"Trend changes: {trend_changes}\")\n\n# Show recent Supertrend signals\nprint(\"\\nRecent Supertrend Data:\")\nprint(df[['close', 'Supertrend', 'ST_Direction']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"ichimoku-cloud",children:"Ichimoku Cloud"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": A comprehensive indicator that defines support and resistance, identifies trend direction, and provides trading signals."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"high"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": High prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"low"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Low prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"close"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Closing prices"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"conversion_periods"})," ",(0,a.jsx)(n.em,{children:"(int, default=9)"}),": Conversion Line Length"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"base_periods"})," ",(0,a.jsx)(n.em,{children:"(int, default=26)"}),": Base Line Length"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"lagging_span2_periods"})," ",(0,a.jsx)(n.em,{children:"(int, default=52)"}),": Leading Span B Length"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"displacement"})," ",(0,a.jsx)(n.em,{children:"(int, default=26)"}),": Lagging Span displacement"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tuple"}),": (conversion_line, base_line, leading_span_a, leading_span_b, lagging_span) as pandas.Series"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-7",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate Ichimoku Cloud components\n(df['Ichimoku_Conversion'], \n df['Ichimoku_Base'], \n df['Ichimoku_SpanA'], \n df['Ichimoku_SpanB'], \n df['Ichimoku_Lagging']) = ta.ichimoku(df['high'], df['low'], df['close'])\n\n# Analyze cloud signals\ndf['Cloud_Top'] = df[['Ichimoku_SpanA', 'Ichimoku_SpanB']].max(axis=1)\ndf['Cloud_Bottom'] = df[['Ichimoku_SpanA', 'Ichimoku_SpanB']].min(axis=1)\ndf['Above_Cloud'] = df['close'] > df['Cloud_Top']\ndf['Below_Cloud'] = df['close'] < df['Cloud_Bottom']\ndf['In_Cloud'] = ~(df['Above_Cloud'] | df['Below_Cloud'])\n\n# TK Cross signals\ndf['TK_Bullish'] = (df['Ichimoku_Conversion'] > df['Ichimoku_Base']) & \\\n                   (df['Ichimoku_Conversion'].shift(1) <= df['Ichimoku_Base'].shift(1))\ndf['TK_Bearish'] = (df['Ichimoku_Conversion'] < df['Ichimoku_Base']) & \\\n                   (df['Ichimoku_Conversion'].shift(1) >= df['Ichimoku_Base'].shift(1))\n\nprint(\"Ichimoku Analysis:\")\nprint(f\"Periods above cloud: {df['Above_Cloud'].sum()}\")\nprint(f\"Periods below cloud: {df['Below_Cloud'].sum()}\")\nprint(f\"Periods in cloud: {df['In_Cloud'].sum()}\")\nprint(f\"TK Bullish signals: {df['TK_Bullish'].sum()}\")\nprint(f\"TK Bearish signals: {df['TK_Bearish'].sum()}\")\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"arnaud-legoux-moving-average-alma",children:"Arnaud Legoux Moving Average (ALMA)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Combines the features of SMA and EMA with a configurable phase and smoothing factor."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int, default=21)"}),": Number of periods for the moving average"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"offset"})," ",(0,a.jsx)(n.em,{children:"(float, default=0.85)"}),": Phase offset (0 to 1)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"sigma"})," ",(0,a.jsx)(n.em,{children:"(float, default=6.0)"}),": Smoothing factor"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pandas.Series"}),": ALMA values with original index preserved"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-8",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate ALMA with different configurations\ndf['ALMA_Default'] = ta.alma(df['close'])  # Default: period=21, offset=0.85, sigma=6.0\ndf['ALMA_Fast'] = ta.alma(df['close'], period=14, offset=0.9, sigma=4.0)\ndf['ALMA_Smooth'] = ta.alma(df['close'], period=21, offset=0.5, sigma=8.0)\n\n# Compare responsiveness\ndf['ALMA_vs_EMA'] = df['ALMA_Default'] - ta.ema(df['close'], 21)\nprint(\"ALMA vs EMA difference (last 10 periods):\")\nprint(df['ALMA_vs_EMA'].tail(10))\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"zero-lag-exponential-moving-average-zlema",children:"Zero Lag Exponential Moving Average (ZLEMA)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": Attempts to eliminate lag by using price momentum in its calculation."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int)"}),": Number of periods for the moving average"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pandas.Series"}),": ZLEMA values with original index preserved"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-9",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate ZLEMA and compare with regular EMA\ndf['ZLEMA_20'] = ta.zlema(df['close'], 20)\ndf['EMA_20'] = ta.ema(df['close'], 20)\n\n# Measure responsiveness to price changes\ndf['Price_Change'] = df['close'].diff()\ndf['ZLEMA_Change'] = df['ZLEMA_20'].diff()\ndf['EMA_Change'] = df['EMA_20'].diff()\n\n# Calculate lead/lag relationship\ncorrelation_zlema = df['Price_Change'].corr(df['ZLEMA_Change'])\ncorrelation_ema = df['Price_Change'].corr(df['EMA_Change'])\n\nprint(f\"ZLEMA responsiveness: {correlation_zlema:.4f}\")\nprint(f\"EMA responsiveness: {correlation_ema:.4f}\")\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"multiple-exponential-moving-average-dema--tema",children:"Multiple Exponential Moving Average (DEMA & TEMA)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description"}),": DEMA and TEMA reduce lag by applying exponential smoothing multiple times."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"data"})," ",(0,a.jsx)(n.em,{children:"(array-like)"}),": Price data (typically closing prices)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"period"})," ",(0,a.jsx)(n.em,{children:"(int)"}),": Number of periods for the moving average"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pandas.Series"}),": DEMA/TEMA values with original index preserved"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-10",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Calculate DEMA and TEMA\ndf['DEMA_20'] = ta.dema(df['close'], 20)\ndf['TEMA_20'] = ta.tema(df['close'], 20)\ndf['EMA_20'] = ta.ema(df['close'], 20)\n\n# Compare lag characteristics\nprice_peaks = df['close'].rolling(5).max() == df['close']\ndf['Peak_Signals'] = price_peaks\n\n# Analyze how quickly each MA responds to peaks\npeak_periods = df[df['Peak_Signals']]\nprint(\"Response at price peaks:\")\nprint(peak_periods[['close', 'EMA_20', 'DEMA_20', 'TEMA_20']].tail())\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"complete-trading-analysis-example",children:"Complete Trading Analysis Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from openalgo import api, ta\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Fetch data\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\ndf = client.history(symbol=\"SBIN\", exchange=\"NSE\", interval=\"5m\", \n                   start_date=\"2025-04-01\", end_date=\"2025-04-08\")\n\n# Calculate multiple trend indicators\ndf['SMA_20'] = ta.sma(df['close'], 20)\ndf['EMA_20'] = ta.ema(df['close'], 20)\ndf['KAMA_14'] = ta.kama(df['close'])\ndf['Supertrend'], df['ST_Direction'] = ta.supertrend(df['high'], df['low'], df['close'])\n\n# Calculate Ichimoku components\n(df['Conversion'], df['Base'], df['SpanA'], \n df['SpanB'], df['Lagging']) = ta.ichimoku(df['high'], df['low'], df['close'])\n\n# Generate trading signals\ndf['MA_Bullish'] = (df['close'] > df['SMA_20']) & (df['EMA_20'] > df['SMA_20'])\ndf['ST_Bullish'] = df['ST_Direction'] == -1\ndf['Ichimoku_Bullish'] = (df['close'] > df[['SpanA', 'SpanB']].max(axis=1)) & \\\n                         (df['Conversion'] > df['Base'])\n\n# Combined signal\ndf['Combined_Signal'] = (df['MA_Bullish'] & df['ST_Bullish'] & df['Ichimoku_Bullish']).astype(int)\n\n# Performance analysis\nsignal_changes = df['Combined_Signal'].diff()\nbuy_signals = signal_changes == 1\nsell_signals = signal_changes == -1\n\nprint(f\"Buy signals: {buy_signals.sum()}\")\nprint(f\"Sell signals: {sell_signals.sum()}\")\n\n# Show recent analysis\nprint(\"\\nRecent Trading Analysis:\")\ncolumns_to_show = ['close', 'SMA_20', 'EMA_20', 'Supertrend', 'ST_Direction', 'Combined_Signal']\nprint(df[columns_to_show].tail(10))\n\n# Plot results\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 10), sharex=True)\n\n# Price and moving averages\nax1.plot(df.index, df['close'], label='Close', linewidth=1)\nax1.plot(df.index, df['SMA_20'], label='SMA 20', alpha=0.7)\nax1.plot(df.index, df['EMA_20'], label='EMA 20', alpha=0.7)\nax1.plot(df.index, df['Supertrend'], label='Supertrend', alpha=0.8)\nax1.legend()\nax1.set_title('SBIN Price and Trend Indicators')\nax1.grid(True, alpha=0.3)\n\n# Signals\nax2.plot(df.index, df['Combined_Signal'], label='Combined Signal', linewidth=2)\nax2.fill_between(df.index, 0, df['Combined_Signal'], alpha=0.3)\nax2.set_ylabel('Signal')\nax2.set_xlabel('Time')\nax2.set_title('Combined Trading Signals')\nax2.grid(True, alpha=0.3)\nax2.legend()\n\nplt.tight_layout()\nplt.show()\n"})}),"\n",(0,a.jsx)(n.p,{children:"This documentation demonstrates how to use OpenAlgo trend indicators with real market data fetched via the OpenAlgo API, maintaining pandas DataFrame structure throughout the analysis process."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);