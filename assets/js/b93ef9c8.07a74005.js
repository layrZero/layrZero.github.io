"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[4926],{7057:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"trading-platform/python/supertrend-strategy","title":"Supertrend Strategy","description":"Here is a coding snippet of python based supertrend strategy implementing using placesmartorder function.","source":"@site/docs/trading-platform/python/supertrend-strategy.md","sourceDirName":"trading-platform/python","slug":"/trading-platform/python/supertrend-strategy","permalink":"/docs/trading-platform/python/supertrend-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/supertrend-strategy.md","tags":[],"version":"current","frontMatter":{}}');var i=r(4848),a=r(8453);const o={},p="Supertrend Strategy",s={},d=[];function l(n){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"supertrend-strategy",children:"Supertrend Strategy"})}),"\n",(0,i.jsx)(e.p,{children:"Here is a coding snippet of python based supertrend strategy implementing using placesmartorder function."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from openalgo import api\nimport pandas as pd\nimport numpy as np\nimport time\nimport threading\nfrom datetime import datetime, timedelta\n\n# Get API key from openalgo portal\napi_key = \'your-openalgo-api-key\'\n\n# Set the strategy details and trading parameters\nstrategy = "Supertrend Python"\nsymbol = "NHPC"  # OpenAlgo Symbol\nexchange = "NSE"\nproduct = "MIS"\nquantity = 1\n\n# Supertrend indicator inputs\natr_period = 5\natr_multiplier = 1.0\n\n# Set the API Key\nclient = api(api_key=api_key, host=\'http://127.0.0.1:5000\')\n\ndef Supertrend(df, atr_period, multiplier):\n    """\n    Calculate the Supertrend indicator.\n    """\n    high = df[\'high\']\n    low = df[\'low\']\n    close = df[\'close\']\n\n    # Calculate ATR using ewm like original code\n    price_diffs = [high - low, \n                   high - close.shift(), \n                   close.shift() - low]\n    true_range = pd.concat(price_diffs, axis=1)\n    true_range = true_range.abs().max(axis=1)\n    atr = true_range.ewm(alpha=1/atr_period, min_periods=atr_period).mean()\n\n    hl2 = (high + low) / 2\n    final_upperband = upperband = hl2 + (multiplier * atr)\n    final_lowerband = lowerband = hl2 - (multiplier * atr)\n\n    # Initialize supertrend array with boolean values like original code\n    supertrend = [True] * len(df)\n\n    for i in range(1, len(df.index)):\n        curr, prev = i, i - 1\n\n        if close.iloc[curr] > final_upperband.iloc[prev]:\n            supertrend[curr] = True\n        elif close.iloc[curr] < final_lowerband.iloc[prev]:\n            supertrend[curr] = False\n        else:\n            supertrend[curr] = supertrend[prev]\n\n            if supertrend[curr] == True and final_lowerband.iloc[curr] < final_lowerband.iloc[prev]:\n                final_lowerband.iat[curr] = final_lowerband.iat[prev]\n            if supertrend[curr] == False and final_upperband.iloc[curr] > final_upperband.iloc[prev]:\n                final_upperband.iat[curr] = final_upperband.iat[prev]\n\n        if supertrend[curr] == True:\n            final_upperband.iat[curr] = np.nan\n        else:\n            final_lowerband.iat[curr] = np.nan\n\n    return pd.DataFrame({\n        \'Supertrend\': supertrend,\n        \'Final_Lowerband\': final_lowerband,\n        \'Final_Upperband\': final_upperband\n    }, index=df.index)\n\ndef supertrend_strategy():\n    """\n    The Supertrend trading strategy.\n    """\n    position = 0\n\n    while True:\n        try:\n            # Dynamic date range: 7 days back to today\n            end_date = datetime.now().strftime("%Y-%m-%d")\n            start_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")\n\n            # Fetch 1-minute historical data using OpenAlgo\n            df = client.history(\n                symbol=symbol,\n                exchange=exchange,\n                interval="1m",\n                start_date=start_date,\n                end_date=end_date\n            )\n\n            # Check for valid data\n            if df.empty:\n                print("DataFrame is empty. Retrying...")\n                time.sleep(15)\n                continue\n\n            # Verify required columns\n            expected_columns = {\'close\', \'high\', \'low\', \'open\'}\n            missing_columns = expected_columns - set(df.columns)\n            if missing_columns:\n                raise KeyError(f"Missing columns in DataFrame: {missing_columns}")\n\n            # Round the close column\n            df[\'close\'] = df[\'close\'].round(2)\n\n            # Calculate Supertrend\n            supertrend = Supertrend(df, atr_period, atr_multiplier)\n\n            # Generate signals using original logic\n            is_uptrend = supertrend[\'Supertrend\']\n            longentry = is_uptrend.iloc[-2] and not is_uptrend.iloc[-3]\n            shortentry = is_uptrend.iloc[-3] and not is_uptrend.iloc[-2]\n\n            # Execute Buy Order\n            if longentry and position <= 0:\n                position = quantity\n                response = client.placesmartorder(\n                    strategy=strategy,\n                    symbol=symbol,\n                    action="BUY",\n                    exchange=exchange,\n                    price_type="MARKET",\n                    product=product,\n                    quantity=quantity,\n                    position_size=position\n                )\n                print("Buy Order Response:", response)\n\n            # Execute Sell Order\n            elif shortentry and position >= 0:\n                position = quantity * -1\n                response = client.placesmartorder(\n                    strategy=strategy,\n                    symbol=symbol,\n                    action="SELL",\n                    exchange=exchange,\n                    price_type="MARKET",\n                    product=product,\n                    quantity=quantity,\n                    position_size=position\n                )\n                print("Sell Order Response:", response)\n\n            # Log strategy information\n            print("\\nStrategy Status:")\n            print("-" * 50)\n            print(f"Position: {position}")\n            print(f"LTP: {df[\'close\'].iloc[-1]}")\n            print(f"Supertrend: {supertrend[\'Supertrend\'].iloc[-2]}")\n            print(f"LowerBand: {supertrend[\'Final_Lowerband\'].iloc[-2]:.2f}")\n            print(f"UpperBand: {supertrend[\'Final_Upperband\'].iloc[-2]:.2f}")\n            print(f"Buy Signal: {longentry}")\n            print(f"Sell Signal: {shortentry}")\n            print("-" * 50)\n\n        except Exception as e:\n            print(f"Error in strategy: {str(e)}")\n            time.sleep(15)\n            continue\n\n        # Wait before the next cycle\n        time.sleep(15)\n\nif __name__ == "__main__":\n    print("Starting Supertrend Strategy...")\n    supertrend_strategy()\n'})})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>p});var t=r(6540);const i={},a=t.createContext(i);function o(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function p(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);