"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[3699],{163:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>S,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"trading-platform/amibroker/smartorder-chart-module","title":"SmartOrder Chart Module","description":"Internet Function Method (Modern)","source":"@site/docs/trading-platform/amibroker/smartorder-chart-module.md","sourceDirName":"trading-platform/amibroker","slug":"/trading-platform/amibroker/smartorder-chart-module","permalink":"/docs/trading-platform/amibroker/smartorder-chart-module","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/amibroker/smartorder-chart-module.md","tags":[],"version":"current","frontMatter":{}}');var r=n(4848),o=n(8453);const i={},l="SmartOrder Chart Module",s={},c=[{value:"Internet Function Method (Modern)",id:"internet-function-method-modern",level:2},{value:"VB Script Method Legacy",id:"vb-script-method-legacy",level:2}];function u(t){const e={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,o.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"smartorder-chart-module",children:"SmartOrder Chart Module"})}),"\n",(0,r.jsx)(e.h2,{id:"internet-function-method-modern",children:"Internet Function Method (Modern)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-clike",children:'// Rajandran R - Creator of OpenAlgo\n// Website - openalgo.in / marketcalls.in\n// OpenAlgo - Amibroker SmartOrder Chart Trading Module v2.0\n// Date - 12/12/2024\n\n_SECTION_BEGIN("OpenAlgo SmartOrder Trading Module - Modern Methods");\n\nRequestTimedRefresh(1, False);\n\n// Define parameter controls\napikey = ParamStr("OpenAlgo API Key", "******");\nstrategy = ParamStr("Strategy", "Amibroker");\nsymbol = ParamStr("Symbol", "YESBANK");\nexchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");\npricetype = ParamStr("Price Type", "MARKET");\nproduct = ParamList("Product", "MIS|NRML|CNC");\nquantity = Param("Quantity", 1, 1, 1000, 1);\nposition_size = Param("Position Size", 0, -1000, 1000, 1);\n\nhost = ParamStr("Host", "http://127.0.0.1:5000");\nver = ParamStr("API Version", "v1");\n\nVoiceAlert = ParamList("Voice Alert", "Disable|Enable", 1);\nEnableAlgo = ParamList("Algo Mode", "Disable|Enable", 0);\nEnableButton = ParamList("Button Trading", "Disable|Enable", 0);\n\nEntrydelay = Param("Entry Delay",0,0,1,1);\nExitdelay = Param("Exit Delay",0,0,1,1);\n\nAlgoBuy = lastvalue(Ref(Buy,-Entrydelay));\nAlgoSell = lastvalue(Ref(Sell,-Exitdelay));\nAlgoShort = lastvalue(Ref(Short,-Entrydelay));\nAlgoCover = lastvalue(Ref(Cover,-Exitdelay));\n\n// Construct URL base\nbridgeurl = host + "/api/" + ver;\n\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = static_name_+interval(2)+strategy+"algostatus";\n\n\n\n//OpenAlgo Dashboard\n\nGfxSelectFont( "BOOK ANTIQUA", 14, 100 );\nGfxSetBkMode( 1 );\nif(EnableAlgo == "Enable")\n{\nAlgoStatus = "Algo Enabled";\nGfxSetTextColor( colorGreen ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=1)\n{\n_TRACE("Algo Status : Enabled");\nStaticVarSet(static_name_algo, 1);\n}\n}\nif(EnableAlgo == "Disable")\n{\nAlgoStatus = "Algo Disabled";\nGfxSetTextColor( colorRed ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=0)\n{\n_TRACE("Algo Status : Disabled");\nStaticVarSet(static_name_algo, 0);\n}\n}\n\n\n//Button Trading Controls\n\nX0 = 20;\nY0 = 100;\nX1 = 60;\n\nLBClick = GetCursorMouseButtons() == 9;\t// Click\nMouseX  = Nz(GetCursorXPosition(1));\t\t// \nMouseY  = Nz(GetCursorYPosition(1));\t\t//\n\nprocedure DrawButton (Text, x1, y1, x2, y2, colorFrom, colorTo)\n{\n\tGfxSetOverlayMode(0);\n\tGfxSelectFont("Verdana", 9, 700);\n\tGfxSetBkMode(1);\n\tGfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);\n\tGfxDrawText(Text, x1, y1, x2, y2, 32|1|4|16);\n}\nGfxSetTextColor(colorWhite);\n\n\n\n\n\n// Function to Place Smart Order\nfunction PlaceSmartOrder(action, quantity, position_size) {\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", " +\n               "\\"strategy\\": \\"" + strategy + "\\", " +\n               "\\"symbol\\": \\"" + symbol + "\\", " +\n               "\\"action\\": \\"" + action + "\\", " +\n               "\\"exchange\\": \\"" + exchange + "\\", " +\n               "\\"pricetype\\": \\"" + pricetype + "\\", " +\n               "\\"product\\": \\"" + product + "\\", " +\n               "\\"quantity\\": \\"" + quantity + "\\", " +\n               "\\"position_size\\": \\"" + position_size + "\\"}";\n\n    headers = "Content-Type: application/json\\r\\n" +\n              "Accept-Encoding: gzip, deflate\\r\\n";\n    InternetSetHeaders(headers);\n\n    _TRACE("Smart Order Request Sent: " + postData); // Log request\n    ih = InternetPostRequest(bridgeurl + "/placesmartorder", postData);\n\n    if (ih) {\n        response = "";\n        while ((line = InternetReadString(ih)) != "") {\n            response += line;\n        }\n        _TRACEF("Smart Order Response: %s", response);\n        if (VoiceAlert == "Enable") Say(action + " Smart Order Placed.");\n        InternetClose(ih);\n    } else {\n        _TRACE("Failed to place smart order.");\n    }\n}\n\n// Function to Exit Order\nfunction ExitOrder(action) {\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", " +\n               "\\"strategy\\": \\"" + strategy + "\\", " +\n               "\\"symbol\\": \\"" + symbol + "\\", " +\n               "\\"action\\": \\"" + action + "\\", " +\n               "\\"exchange\\": \\"" + exchange + "\\", " +\n               "\\"pricetype\\": \\"" + pricetype + "\\", " +\n               "\\"product\\": \\"" + product + "\\", " +\n               "\\"quantity\\": \\"0\\", " +\n               "\\"position_size\\": \\"0\\"}";\n\n    headers = "Content-Type: application/json\\r\\n" +\n              "Accept-Encoding: gzip, deflate\\r\\n";\n    InternetSetHeaders(headers);\n\n    _TRACE("Exit Order Request Sent: " + postData); // Log request\n    ih = InternetPostRequest(bridgeurl + "/placesmartorder", postData);\n\n    if (ih) {\n        response = "";\n        while ((line = InternetReadString(ih)) != "") {\n            response += line;\n        }\n        _TRACEF("Exit Order Response: %s", response);\n        if (VoiceAlert == "Enable") Say(action + " Exit Order Placed.");\n        InternetClose(ih);\n    } else {\n        _TRACE("Failed to place exit order.");\n    }\n}\n\n// Function to Square Off All Positions\nfunction SquareOffAll() {\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", " +\n               "\\"strategy\\": \\"" + strategy + "\\"}";\n\n    headers = "Content-Type: application/json\\r\\n" +\n              "Accept-Encoding: gzip, deflate\\r\\n";\n    InternetSetHeaders(headers);\n\n    _TRACE("Square Off Request Sent: " + postData); // Log request\n    ih = InternetPostRequest(bridgeurl + "/closeposition", postData);\n\n    if (ih) {\n        response = "";\n        while ((line = InternetReadString(ih)) != "") {\n            response += line;\n        }\n        _TRACEF("Square Off Response: %s", response);\n        if (VoiceAlert == "Enable") Say("All positions squared off.");\n        InternetClose(ih);\n    } else {\n        _TRACE("Failed to square off positions.");\n    }\n}\n\n\n\n// Execution Module\nif (EnableAlgo != "Disable") {\n    lasttime = StrFormat("%0.f", LastValue(BarIndex()));\n    SetChartBkColor(colorDarkGrey);\n\n    if (EnableAlgo == "Enable") {\n        if (AlgoBuy == True AND AlgoCover == True AND StaticVarGet(static_name_ + "buyCoverAlgo") == 0 AND StaticVarGetText(static_name_ + "buyCoverAlgo_barvalue") != lasttime) {\n            PlaceSmartOrder("BUY", quantity, quantity);\n            if (VoiceAlert == "Enable") Say("Buy Order Triggered");\n            \n            StaticVarSetText(static_name_ + "buyCoverAlgo_barvalue", lasttime);\n            StaticVarSet(static_name_ + "buyCoverAlgo", 1);\n        } else if (AlgoBuy != True OR AlgoCover != True) {\n            StaticVarSet(static_name_ + "buyCoverAlgo", 0);\n            StaticVarSetText(static_name_ + "buyCoverAlgo_barvalue", "");\n        }\n\n        if (AlgoBuy == True AND AlgoCover != True AND StaticVarGet(static_name_ + "buyAlgo") == 0 AND StaticVarGetText(static_name_ + "buyAlgo_barvalue") != lasttime) {\n            PlaceSmartOrder("BUY", quantity, position_size);\n            if (VoiceAlert == "Enable") Say("Buy Order Triggered");\n\n            StaticVarSetText(static_name_ + "buyAlgo_barvalue", lasttime);\n            StaticVarSet(static_name_ + "buyAlgo", 1);\n        } else if (AlgoBuy != True) {\n            StaticVarSet(static_name_ + "buyAlgo", 0);\n            StaticVarSetText(static_name_ + "buyAlgo_barvalue", "");\n        }\n\n        if (AlgoSell == true AND AlgoShort != True AND StaticVarGet(static_name_ + "sellAlgo") == 0 AND StaticVarGetText(static_name_ + "sellAlgo_barvalue") != lasttime) {\n            ExitOrder("SELL");\n            if (VoiceAlert == "Enable") Say("Sell Exit Order Triggered");\n\n            StaticVarSetText(static_name_ + "sellAlgo_barvalue", lasttime);\n            StaticVarSet(static_name_ + "sellAlgo", 1);\n        } else if (AlgoSell != True) {\n            StaticVarSet(static_name_ + "sellAlgo", 0);\n            StaticVarSetText(static_name_ + "sellAlgo_barvalue", "");\n        }\n\n        if (AlgoShort == True AND AlgoSell == True AND StaticVarGet(static_name_ + "ShortSellAlgo") == 0 AND StaticVarGetText(static_name_ + "ShortSellAlgo_barvalue") != lasttime) {\n            PlaceSmartOrder("SELL", quantity, -1 * quantity);\n            if (VoiceAlert == "Enable") Say("Short Order Triggered");\n            StaticVarSetText(static_name_ + "ShortSellAlgo_barvalue", lasttime);\n            StaticVarSet(static_name_ + "ShortSellAlgo", 1);\n        } else if (AlgoShort != True OR AlgoSell != True) {\n            StaticVarSet(static_name_ + "ShortSellAlgo", 0);\n            StaticVarSetText(static_name_ + "ShortSellAlgo_barvalue", "");\n        }\n\n        if (AlgoShort == True AND AlgoSell != True AND StaticVarGet(static_name_ + "ShortAlgo") == 0 AND StaticVarGetText(static_name_ + "ShortAlgo_barvalue") != lasttime) {\n            PlaceSmartOrder("SELL", quantity, position_size);\n            if (VoiceAlert == "Enable") Say("Short Order Triggered");\n\n            StaticVarSetText(static_name_ + "ShortAlgo_barvalue", lasttime);\n            StaticVarSet(static_name_ + "ShortAlgo", 1);\n        } else if (AlgoShort != True) {\n            StaticVarSet(static_name_ + "ShortAlgo", 0);\n            StaticVarSetText(static_name_ + "ShortAlgo_barvalue", "");\n        }\n\n        if (AlgoCover == true AND AlgoBuy != True AND StaticVarGet(static_name_ + "CoverAlgo") == 0 AND StaticVarGetText(static_name_ + "CoverAlgo_barvalue") != lasttime) {\n            ExitOrder("BUY");\n            if (VoiceAlert == "Enable") Say("Short Exit Order Triggered");\n\n            StaticVarSetText(static_name_ + "CoverAlgo_barvalue", lasttime);\n            StaticVarSet(static_name_ + "CoverAlgo", 1);\n        } else if (AlgoCover != True) {\n            StaticVarSet(static_name_ + "CoverAlgo", 0);\n            StaticVarSetText(static_name_ + "CoverAlgo_barvalue", "");\n        }\n    }\n\n    if (EnableButton == "Enable") {\n        DrawButton("BE", X0, Y0, X0 + X1, Y0 + 50, colorGreen, colorGreen);\n        CursorInBEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 AND MouseY <= Y0 + 50;\n        BEButtonClick = CursorInBEButton AND LBClick;\n\n        DrawButton("BX", X0 + 65, Y0, X0 + X1 + 65, Y0 + 50, colorRed, colorRed);\n        CursorInBXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 AND MouseY <= Y0 + 50;\n        BXButtonClick = CursorInBXButton AND LBClick;\n\n        DrawButton("SE", X0, Y0 + 55, X0 + X1, Y0 + 105, colorRed, colorRed);\n        CursorInSEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;\n        SEButtonClick = CursorInSEButton AND LBClick;\n\n        DrawButton("SX", X0 + 65, Y0 + 55, X0 + X1 + 65, Y0 + 105, colorGreen, colorGreen);\n        CursorInSXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;\n        SXButtonClick = CursorInSXButton AND LBClick;\n\n        DrawButton("CLOSE ALL", X0, Y0 + 110, X0 + X1 + 65, Y0 + 155, colorRed, colorRed);\n        CursorInCXButton = MouseX >= X0 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 110 AND MouseY <= Y0 + 155;\n        CXButtonClick = CursorInCXButton AND LBClick;\n\n        if (BEButtonClick AND StaticVarGet(static_name_ + "BEAlgo") == 0) {\n            PlaceSmartOrder("BUY", quantity, position_size);\n            if (VoiceAlert == "Enable") {\n                Say("Buy Order Triggered");\n            }\n            _TRACE("API Request: " + postData);\n            StaticVarSet(static_name_ + "BEAlgo", 1);\n        } else {\n            StaticVarSet(static_name_ + "BEAlgo", 0);\n        }\n\n        if (BXButtonClick AND StaticVarGet(static_name_ + "BXAlgo") == 0) {\n            PlaceSmartOrder("SELL", quantity, position_size);\n            if (VoiceAlert == "Enable") {\n                Say("Sell Order Triggered");\n            }\n            _TRACE("API Request: " + postData);\n            StaticVarSet(static_name_ + "BXAlgo", 1);\n        } else {\n            StaticVarSet(static_name_ + "BXAlgo", 0);\n        }\n\n        if (SEButtonClick AND StaticVarGet(static_name_ + "SEAlgo") == 0) {\n            PlaceSmartOrder("SELL", quantity, position_size);\n            if (VoiceAlert == "Enable") {\n                Say("Short Order Triggered");\n            }\n            _TRACE("API Request: " + postData);\n            StaticVarSet(static_name_ + "SEAlgo", 1);\n        } else {\n            StaticVarSet(static_name_ + "SEAlgo", 0);\n        }\n\n        if (SXButtonClick AND StaticVarGet(static_name_ + "SXAlgo") == 0) {\n            PlaceSmartOrder("BUY", quantity, position_size);\n            if (VoiceAlert == "Enable") {\n                Say("Cover Order Triggered");\n            }\n            _TRACE("API Request: " + postData);\n            StaticVarSet(static_name_ + "SXAlgo", 1);\n        } else {\n            StaticVarSet(static_name_ + "SXAlgo", 0);\n        }\n\n        if (CXButtonClick AND StaticVarGet(Name() + GetChartID() + "CXAlgo") == 0) {\n            SquareOffAll();\n            if (VoiceAlert == "Enable") {\n                Say("Square Off All Triggered");\n            }\n            _TRACE("API Request: " + postData);\n            StaticVarSet(Name() + GetChartID() + "CXAlgo", 1);\n        } else {\n            StaticVarSet(Name() + GetChartID() + "CXAlgo", 0);\n        }\n    }\n}\n\n_SECTION_END();\n\n\n'})}),"\n",(0,r.jsx)(e.h2,{id:"vb-script-method-legacy",children:"VB Script Method Legacy"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-clike",children:'\n//Rajandran R - Creator of OpenAlgo\n//website - openalgo.in / marketcalls.in\n//OpenAlgo - Amibroker SmartOrder Chart Trading Module v1.0\n//Date - 10/02/2024\n\n\n_SECTION_BEGIN("OpenAlgo Trading Controls");\n\nRequestTimedRefresh(1,False);\n\napikey = ParamStr("OpenAlgo API Key", "******");\nstrategy = ParamStr("Strategy", "Amibroker");\nsymbol = ParamStr("Symbol", "YESBANK");\nexchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");\npricetype = ParamStr("Price Type", "MARKET");\nproduct = ParamList("Product", "MIS|NRML|CNC");\nquantity = Param("Quantity", 1,1,1000,1);\n\nEntrydelay = Param("Entry Delay",0,0,1,1);\nExitdelay = Param("Exit Delay",0,0,1,1);\n\nhost = ParamStr("host","http://127.0.0.1:5000");\nver = ParamStr("API Version","v1");\n\nVoiceAlert = ParamList("Voice Alert","Disable|Enable",1);\nEnableButton = ParamList("Button Trading","Disable|Enable",0);\nEnableAlgo = ParamList("Algo Mode","Disable|Enable",0); // Algo Mode\n\n\nbridgeurl = host+"/api/"+ver;\n\n\nAlgoBuy = lastvalue(Ref(Buy,-Entrydelay));\nAlgoSell = lastvalue(Ref(Sell,-Exitdelay));\nAlgoShort = lastvalue(Ref(Short,-Entrydelay));\nAlgoCover = lastvalue(Ref(Cover,-Exitdelay));\n\n\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = static_name_+interval(2)+strategy+"algostatus";\n\n\n\n//OpenAlgo Dashboard\n\nGfxSelectFont( "BOOK ANTIQUA", 14, 100 );\nGfxSetBkMode( 1 );\nif(EnableAlgo == "Enable")\n{\nAlgoStatus = "Algo Enabled";\nGfxSetTextColor( colorGreen ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=1)\n{\n_TRACE("Algo Status : Enabled");\nStaticVarSet(static_name_algo, 1);\n}\n}\nif(EnableAlgo == "Disable")\n{\nAlgoStatus = "Algo Disabled";\nGfxSetTextColor( colorRed ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=0)\n{\n_TRACE("Algo Status : Disabled");\nStaticVarSet(static_name_algo, 0);\n}\n}\n\n//Button Trading Controls\n\nX0 = 20;\nY0 = 100;\nX1 = 60;\n\nLBClick = GetCursorMouseButtons() == 9;\t// Click\nMouseX  = Nz(GetCursorXPosition(1));\t\t// \nMouseY  = Nz(GetCursorYPosition(1));\t\t//\n\nprocedure DrawButton (Text, x1, y1, x2, y2, colorFrom, colorTo)\n{\n\tGfxSetOverlayMode(0);\n\tGfxSelectFont("Verdana", 9, 700);\n\tGfxSetBkMode(1);\n\tGfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);\n\tGfxDrawText(Text, x1, y1, x2, y2, 32|1|4|16);\n}\nGfxSetTextColor(colorWhite);\n\n\n\n_SECTION_BEGIN("OpenAlgo Bridge Controls");\n\nEnableScript("VBScript"); \n<%\nPublic Sub PlaceOrder(action, quantity)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placeorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " api_url :" & url\n\n    \n    AFL("api_request") = api_parameters  \n    AFL("api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\nPublic Sub PlaceSmartOrder(action, quantity,position_size)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n    \n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & _\n    """,""position_size"":""" & position_size & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placesmartorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " Position Size :" & position_size & " api_url :" & url\n\n    \n    AFL("sm_api_request") = api_parameters  \n    AFL("sm_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\nPublic Sub ExitOrder(action)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n    position_size = "0"\n    quantity = "0"\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & _\n    """,""position_size"":""" & position_size & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placesmartorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " Position Size :" & position_size & " api_url :" & url\n\n    \n    AFL("ex_api_request") = api_parameters  \n    AFL("ex_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\n\nPublic Sub SquareoffAll()\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n      \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/closeposition"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " api_url :" & url\n\n    \n    AFL("sq_api_request") = api_parameters  \n    AFL("sq_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\n%>\n\nopenalgo = GetScriptObject();\n\n//Execution Module\n\nif(EnableAlgo != "Disable")\n\t{\n\t\tlasttime = StrFormat("%0.f",LastValue(BarIndex()));\n\t\t\t\n\t\tSetChartBkColor(colorDarkGrey);\n\t\tif(EnableButton == "Enable")\n\t\t\n\t\t{\n\t\t\n\t\t\tDrawButton("BE", X0, Y0, X0+X1, Y0+50, colorGreen, colorGreen);\n\t\t\tCursorInBEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0 AND MouseY <= Y0+50;\n\t\t\tBEButtonClick = CursorInBEButton AND LBClick;\n\t\t\t\n\t\t\tDrawButton("BX", X0+65, Y0, X0+X1+65, Y0+50, colorRed, colorRed);\n\t\t\tCursorInBXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0 AND MouseY <= Y0+50;\n\t\t\tBxButtonClick = CursorInBXButton AND LBClick;\n\t\t\t\n\t\t\tDrawButton("SE", X0, Y0+55, X0+X1, Y0+105, colorRed, colorRed);\n\t\t\tCursorInSEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0+55 AND MouseY <= Y0+105;\n\t\t\tSEButtonClick = CursorInSEButton AND LBClick;\n\t\t\t\n\t\t\tDrawButton("SX", X0+65, Y0+55, X0+X1+65, Y0+105, colorGreen, colorGreen);\n\t\t\tCursorInSXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0+55 AND MouseY <= Y0+105;\n\t\t\tSXButtonClick = CursorInSXButton AND LBClick;\n\t\t\t\n\t\t\tDrawButton("CLOSE ALL", X0, Y0+110, X0+X1+65, Y0+155, colorRed, colorRed);\n\t\t\tCursorInCXButton = MouseX >= X0 AND MouseX <= X0+X1+65 AND MouseY >= Y0+110 AND MouseY <= Y0+155;\n\t\t\tCXButtonClick = CursorInCXButton AND LBClick;\n\t\t\n\t\t\tif( BEButtonClick AND StaticVarGet(static_name_+"BEAlgo")==0 ) \n\t\t\t{\n\t\t\t\topenalgo.placeorder("BUY",quantity);\n\t\t\t\tif(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Buy Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n\t\t\t\t\n\t\t\t\tStaticVarSet(static_name_+"BEAlgo",1); \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStaticVarSet(static_name_+"BEAlgo",0);\n\t\t\t}\n\t\t\tif( BXButtonClick AND StaticVarGet(static_name_+"BXAlgo")==0 ) \n\t\t\t{\n\t\t\t\topenalgo.placeorder("SELL",quantity);\n\t\t\t\tif(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Sell Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n\t\t\t\tStaticVarSet(static_name_+"BXAlgo",1); \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStaticVarSet(static_name_+"BXAlgo",0);\n\t\t\t}\n\t\t\t\t\n\t\t\tif( SEButtonClick AND StaticVarGet(static_name_+"SEAlgo")==0 ) \n\t\t\t{\n\t\t\t\topenalgo.placeorder("SELL",quantity);\n\t\t\t\tif(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Short Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n\t\t\t\tStaticVarSet(static_name_+"SEAlgo",1); \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStaticVarSet(static_name_+"SEAlgo",0);\n\t\t\t}\n\n\t\t\tif( SXButtonClick AND StaticVarGet(static_name_+"SXAlgo")==0 ) \n\t\t\t{\n\t\t\t\topenalgo.placeorder("BUY",quantity);\n\t\t\t\tif(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Cover Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n\t\t\t\tStaticVarSet(static_name_+"SXAlgo",1); \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStaticVarSet(static_name_+"SXAlgo",0); \n\t\t\t}\n\t\t\t\n\t\t\tif( CXButtonClick AND StaticVarGet(Name()+GetChartID()+"CXAlgo")==0 ) \n\t\t\t{\n\t\t\t\topenalgo.Squareoffall();\n\t\t\t\tif(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Squareoff All Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+sq_api_request);\n\t\t\t\t_TRACE("API Response : "+sq_api_response);\n\t\t\t\tStaticVarSet(Name()+GetChartID()+"CXAlgo",1); \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStaticVarSet(Name()+GetChartID()+"CXAlgo",0);\n\t\t\t}\n\t\t\n\t\t}//button trading ends\n\t\t\n\t\t\n\tif(EnableAlgo == "Enable")\n        {   \n            if (AlgoBuy==True AND AlgoCover == True AND StaticVarGet(static_name_+"buyCoverAlgo")==0 AND StaticVarGetText(static_name_+"buyCoverAlgo_barvalue") != lasttime )\n            {\n                            \n                openalgo.PlaceSmartOrder("BUY",quantity,quantity);\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Buy Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+sm_api_request);\n\t\t\t\t_TRACE("API Response : "+sm_api_response);\n                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue",lasttime);  \n                StaticVarSet(static_name_+"buyCoverAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n        \n            }\n            else if ((AlgoBuy != True OR AlgoCover != True))\n            {   \n                StaticVarSet(static_name_+"buyCoverAlgo",0);\n                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue","");\n            }\n            \n            if (AlgoBuy==True AND AlgoCover != True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)\n            {\n            // Long Entry \n                openalgo.PlaceOrder("BUY",quantity);\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Buy Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoBuy != True)\n            {   \n                StaticVarSet(static_name_+"buyAlgo",0);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue","");\n                \n            }\n            if (AlgoSell==true AND AlgoShort != True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)\n            {     \n            // Long Exit \n\t\t\t\topenalgo.ExitOrder("SELL");\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Sell Exit Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+ex_api_request);\n\t\t\t\t_TRACE("API Response : "+ex_api_response);\n                \n                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoSell != True )\n            {   \n                StaticVarSet(static_name_+"sellAlgo",0);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue","");\n            }\n            if (AlgoShort==True AND AlgoSell==True AND  StaticVarGet(static_name_+"ShortSellAlgo")==0 AND StaticVarGetText(static_name_+"ShortSellAlgo_barvalue") != lasttime)\n            {\n            // reverse Short Entry \n\t\t\t\topenalgo.PlaceSmartOrder("SELL",quantity,-1*quantity);\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Short Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+sm_api_request);\n\t\t\t\t_TRACE("API Response : "+sm_api_response);\n                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"ShortSellAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if ((AlgoShort != True OR AlgoSell != True))\n            {   \n                StaticVarSet(static_name_+"ShortSellAlgo",0);\n                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue","");\n            }\n                \n            if (AlgoShort==True  AND  AlgoSell != True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND  StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)\n            {\n            // Short Entry\n                openalgo.PlaceOrder("SELL",quantity);\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Short Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoShort != True )\n            {   \n                StaticVarSet(static_name_+"ShortAlgo",0);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");\n            }\n            if (AlgoCover==true AND AlgoBuy != True AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)\n            {\n            // Short Exit\n\t\t\t\topenalgo.ExitOrder("BUY");\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Short Exit Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+ex_api_request);\n\t\t\t\t_TRACE("API Response : "+ex_api_response);\n               \n                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoCover != True )\n            {   \n                StaticVarSet(static_name_+"CoverAlgo",0);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");\n            }\n        }\n        \n         else if(EnableAlgo == "LongOnly")\n        {\n            \n            if (AlgoBuy==True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)\n            {  \n            //  Long Entry\n                openalgo.PlaceOrder("BUY",quantity);\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Buy Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+api_request);\n\t\t\t\t_TRACE("API Response : "+api_response);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoBuy != True)\n            {   \n                StaticVarSet(static_name_+"buyAlgo",0);\n                StaticVarSetText(static_name_+"buyAlgo_barvalue","");\n            }\n            if (AlgoSell==true AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)\n            {  \n            // Long Exit\n                openalgo.ExitOrder("SELL");\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Sell Exit Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+ex_api_request);\n\t\t\t\t_TRACE("API Response : "+ex_api_response);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);\n                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoSell != True )\n            {   \n                StaticVarSet(static_name_+"sellAlgo",0);\n                StaticVarSetText(static_name_+"sellAlgo_barvalue","");\n            }\n        }\n        else if(EnableAlgo == "ShortOnly")\n        {\n            if (AlgoShort==True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)\n            {\n            // Short Entry\n                openalgo.PlaceOrder("SELL",quantity);\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Short Order Triggered");  \t\n\t\t\t\t\t}\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoShort != True )\n            {   \n                StaticVarSet(static_name_+"ShortAlgo",0);\n                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");\n            }\n            if (AlgoCover==true AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)\n            {\n            // Short Exit\n                openalgo.ExitOrder("BUY");\n                if(VoiceAlert == "Enable"){\n\t\t\t\t\t\tSay("Short Exit Order Triggered");  \t\n\t\t\t\t\t}\n\t\t\t\t_TRACE("API Request : "+ex_api_request);\n\t\t\t\t_TRACE("API Response : "+ex_api_response);\n               \n                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime); \n                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar\n                \n            }\n            else if (AlgoCover != True)\n            {   \n                StaticVarSet(static_name_+"CoverAlgo",0);\n                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");\n            }\n        }\n        \n    }\n    \n'})})]})}function S(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>l});var a=n(6540);const r={},o=a.createContext(r);function i(t){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function l(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:i(t.components),a.createElement(o.Provider,{value:e},t.children)}}}]);