"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[5627],{2844:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"trading-platform/amibroker/button-trading-with-split-orders","title":"Button Trading with Split Orders","description":"","source":"@site/docs/trading-platform/amibroker/button-trading-with-split-orders.md","sourceDirName":"trading-platform/amibroker","slug":"/trading-platform/amibroker/button-trading-with-split-orders","permalink":"/docs/trading-platform/amibroker/button-trading-with-split-orders","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/amibroker/button-trading-with-split-orders.md","tags":[],"version":"current","frontMatter":{}}');var a=n(4848),o=n(8453);const i={},s="Button Trading with Split Orders",l={},c=[];function u(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"button-trading-with-split-orders",children:"Button Trading with Split Orders"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-clike",children:'//Rajandran R - Creator of OpenAlgo\n//website - openalgo.in / marketcalls.in\n//OpenAlgo - Amibroker Button Trading Split Order Module v1.0\n//Date - 21/08/2024\n\n_SECTION_BEGIN("OpenAlgo Button Trading with Split Orders");\n\nRequestTimedRefresh(1, False);\n\n// Parameters for trading settings\napikey = ParamStr("OpenAlgo API Key", "******");\nstrategy = ParamStr("Strategy", "Button Trading");\nsymbol = ParamStr("Symbol", "NIFTY29AUG2424600CE"); //OpenAlgo Symbol\nexchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS",1);\npricetype = ParamStr("Price Type", "MARKET");\nproduct = ParamList("Product", "MIS|NRML|CNC");\nquantity = Param("Quantity", 5000, 1, 10000, 1);  // Total quantity to be traded\nfreezeqty = Param("Freeze Quantity", 1800, 1, 5000, 1);  // Maximum allowed quantity per order\n\n// Parameters for connectivity settings\nhost = ParamStr("Host", "http://127.0.0.1:5000");\nver = ParamStr("API Version", "v1");\n\n// Control parameters for voice alerts and algo mode\nVoiceAlert = ParamList("Voice Alert", "Disable|Enable", 1);\nEnableAlgo = ParamList("Algo Mode", "Disable|Enable", 0);  // Algo Mode\n\nbridgeurl = host + "/api/" + ver;\n\n\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = static_name_+interval(2)+strategy+"algostatus";\n\n\n\n\n//OpenAlgo Dashboard\n\nGfxSelectFont( "BOOK ANTIQUA", 14, 100 );\nGfxSetBkMode( 1 );\nif(EnableAlgo == "Enable")\n{\nAlgoStatus = "Algo Enabled";\nGfxSetTextColor( colorGreen ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=1)\n{\n_TRACE("Algo Status : Enabled");\nStaticVarSet(static_name_algo, 1);\n}\n}\nif(EnableAlgo == "Disable")\n{\nAlgoStatus = "Algo Disabled";\nGfxSetTextColor( colorRed ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=0)\n{\n_TRACE("Algo Status : Disabled");\nStaticVarSet(static_name_algo, 0);\n}\n}\n\n\n\n_SECTION_BEGIN("OpenAlgo Bridge Controls");\n\nEnableScript("VBScript"); \n<%\nPublic Sub PlaceOrder(action, quantity)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placeorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " api_url :" & url\n\n    \n    AFL("api_request") = api_parameters  \n    AFL("api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\nPublic Sub SquareoffAll()\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n      \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/closeposition"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " api_url :" & url\n\n    \n    AFL("sq_api_request") = api_parameters  \n    AFL("sq_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\n%>\n\n\nopenalgo = GetScriptObject();\n\n// Function to split orders and place them in smaller batches based on freezeqty\nfunction PlaceSplitOrders(action, totalQuantity) {\n    remainingQuantity = totalQuantity;  // Start with total quantity\n\n    while (remainingQuantity > 0) {\n        if (remainingQuantity >= freezeqty) {\n            orderQuantity = freezeqty;\n        } else {\n            orderQuantity = remainingQuantity;  // Remaining quantity for the last order\n        }\n\n        // Place the order with the calculated order quantity\n        openalgo.PlaceOrder(action, orderQuantity);\n        _TRACE("Placed " + action + " order for " + orderQuantity + " qty");\n\t\t_TRACE("API Request : " + api_request);\n        _TRACE("API Response : " + api_response);\n        \n\n        // Update the remaining quantity\n        remainingQuantity = remainingQuantity - orderQuantity;\n    }\n}\n\n// Button Trading Logic\nX0 = 20;\nY0 = 100;\nX1 = 60;\n\nLBClick = GetCursorMouseButtons() == 9;  // Left Button Click\nMouseX  = Nz(GetCursorXPosition(1));     // X Position of Mouse\nMouseY  = Nz(GetCursorYPosition(1));     // Y Position of Mouse\n\n// Procedure to draw buttons on the chart\nprocedure DrawButton(Text, x1, y1, x2, y2, colorFrom, colorTo) {\n    GfxSetOverlayMode(0);\n    GfxSelectFont("Verdana", 9, 700);\n    GfxSetBkMode(1);\n    GfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);\n    GfxDrawText(Text, x1, y1, x2, y2, 32 | 1 | 4 | 16);\n}\n\nGfxSetTextColor(colorWhite);\n\nif (EnableAlgo == "Enable") {\n    // Drawing buttons for Buy, Sell, Short, Cover, and Close All\n    DrawButton("BUY", X0, Y0, X0 + X1, Y0 + 50, colorGreen, colorGreen);\n    CursorInBEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 AND MouseY <= Y0 + 50;\n    BEButtonClick = CursorInBEButton AND LBClick;\n\n    DrawButton("SELL", X0 + 65, Y0, X0 + X1 + 65, Y0 + 50, colorRed, colorRed);\n    CursorInBXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 AND MouseY <= Y0 + 50;\n    BXButtonClick = CursorInBXButton AND LBClick;\n\n    DrawButton("SHORT", X0, Y0 + 55, X0 + X1, Y0 + 105, colorRed, colorRed);\n    CursorInSEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;\n    SEButtonClick = CursorInSEButton AND LBClick;\n\n    DrawButton("COVER", X0 + 65, Y0 + 55, X0 + X1 + 65, Y0 + 105, colorGreen, colorGreen);\n    CursorInSXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;\n    SXButtonClick = CursorInSXButton AND LBClick;\n\n    DrawButton("CLOSE ALL", X0, Y0 + 110, X0 + X1 + 65, Y0 + 155, colorRed, colorRed);\n    CursorInCXButton = MouseX >= X0 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 110 AND MouseY <= Y0 + 155;\n    CXButtonClick = CursorInCXButton AND LBClick;\n\n    // BUY Button Click Event\n    if (BEButtonClick AND StaticVarGet(static_name_ + "BEAlgo") == 0) {\n        PlaceSplitOrders("BUY", quantity);  // Split the order into smaller quantities\n        if (VoiceAlert == "Enable") {\n            Say("Buy Order Triggered");\n        }\n        \n        StaticVarSet(static_name_ + "BEAlgo", 1);\n    } else {\n        StaticVarSet(static_name_ + "BEAlgo", 0);\n    }\n\n    // SELL Button Click Event\n    if (BXButtonClick AND StaticVarGet(static_name_ + "BXAlgo") == 0) {\n        PlaceSplitOrders("SELL", quantity);  // Split the order into smaller quantities\n        if (VoiceAlert == "Enable") {\n            Say("Sell Order Triggered");\n        }\n\n        StaticVarSet(static_name_ + "BXAlgo", 1);\n    } else {\n        StaticVarSet(static_name_ + "BXAlgo", 0);\n    }\n\n    // SHORT Button Click Event\n    if (SEButtonClick AND StaticVarGet(static_name_ + "SEAlgo") == 0) {\n        PlaceSplitOrders("SELL", quantity);  // Execute short order as SELL\n        if (VoiceAlert == "Enable") {\n            Say("Short Order Triggered");\n        }\n\n        StaticVarSet(static_name_ + "SEAlgo", 1);\n    } else {\n        StaticVarSet(static_name_ + "SEAlgo", 0);\n    }\n\n    // COVER Button Click Event\n    if (SXButtonClick AND StaticVarGet(static_name_ + "SXAlgo") == 0) {\n        PlaceSplitOrders("BUY", quantity);  // Execute cover order as BUY\n        if (VoiceAlert == "Enable") {\n            Say("Cover Order Triggered");\n        }\n\n        StaticVarSet(static_name_ + "SXAlgo", 1);\n    } else {\n        StaticVarSet(static_name_ + "SXAlgo", 0);\n    }\n\n    // CLOSE ALL Button Click Event\n    if (CXButtonClick AND StaticVarGet(Name() + GetChartID() + "CXAlgo") == 0) {\n        openalgo.SquareoffAll();  // Call the function to close all open positions\n        if (VoiceAlert == "Enable") {\n            Say("Squareoff All Triggered");\n        }\n        _TRACE("API Request : " + sq_api_request);\n        _TRACE("API Response : " + sq_api_response);\n        StaticVarSet(Name() + GetChartID() + "CXAlgo", 1);\n    } else {\n        StaticVarSet(Name() + GetChartID() + "CXAlgo", 0);\n    }\n}\n\n\n_SECTION_END();\n\n\n_SECTION_BEGIN("Candlestick Charts with Date & Time Axis");\n\n// Enable the Date & Time Axis\nSetChartOptions(0, chartShowArrows | chartShowDates);\n\n// Plotting Candlestick charts\nPlot(Close, "Candle", colorDefault, styleCandle);\n\n_SECTION_END();\n\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var r=n(6540);const a={},o=r.createContext(a);function i(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);