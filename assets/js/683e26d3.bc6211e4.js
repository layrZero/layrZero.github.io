"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[9366],{1710:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"trading-platform/python/nifty-open-interest","title":"NIFTY Open Interest","description":"Overview","source":"@site/docs/trading-platform/python/nifty-open-interest.md","sourceDirName":"trading-platform/python","slug":"/trading-platform/python/nifty-open-interest","permalink":"/docs/trading-platform/python/nifty-open-interest","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/nifty-open-interest.md","tags":[],"version":"current","frontMatter":{}}');var r=t(4848),a=t(8453);const s={},o="NIFTY Open Interest",l={},d=[{value:"Overview",id:"overview",level:3},{value:"Features",id:"features",level:3},{value:"Full Python Code",id:"full-python-code",level:3},{value:"Full Code Explaination",id:"full-code-explaination",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Environment Variables",id:"environment-variables",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Code Structure",id:"code-structure",level:3},{value:"1. ATM Strike Calculation",id:"1-atm-strike-calculation",level:4},{value:"2. Symbol Parsing",id:"2-symbol-parsing",level:4},{value:"3. Quote Fetching",id:"3-quote-fetching",level:4},{value:"4. Batch Data Collection",id:"4-batch-data-collection",level:4},{value:"5. Visualization",id:"5-visualization",level:4},{value:"Usage",id:"usage",level:3},{value:"In Jupyter Notebook",id:"in-jupyter-notebook",level:4},{value:"As Python Script",id:"as-python-script",level:4},{value:"Output",id:"output",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Data Structure",id:"data-structure",level:3}];function c(e){const n={code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"nifty-open-interest",children:"NIFTY Open Interest"})}),"\n",(0,r.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This python code fetches and visualizes  Open Interest (OI) profile for NIFTY options, helping traders identify support and resistance levels based on options market data."}),"\n",(0,r.jsx)("img",{src:t(9578).A}),"\n",(0,r.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Real-time OI data for Call and Put options"}),"\n",(0,r.jsx)(n.li,{children:"Automatic ATM strike calculation"}),"\n",(0,r.jsx)(n.li,{children:"Batch processing with rate limiting"}),"\n",(0,r.jsx)(n.li,{children:"Interactive Plotly visualization"}),"\n",(0,r.jsx)(n.li,{children:"Error handling with retry logic"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"full-python-code",children:"Full Python Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'"""\nNIFTY 31 JUL 2025 \u2013 OI profile (10-req/s batches)\nAuthor  : OpenAlgo GPT\nUpdated : 2025-06-28\n"""\n\nprint("\ud83d\udd01 OpenAlgo Python Bot is running.")                     # rule 13\n\nimport os, sys, re, time, asyncio, pandas as pd, plotly.graph_objects as go\nfrom datetime import datetime\nfrom openalgo import api\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CONFIG (edit to suit) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nAPI_KEY  = os.getenv("OPENALGO_API_KEY",  "openalgo-api-key")\nAPI_HOST = os.getenv("OPENALGO_API_HOST", "http://127.0.0.1:5000")\n\nEXPIRY        = "31JUL25"      # \u2705 option expiry\nRADIUS        = 20             # \xb1 strikes\nSTEP          = 100            # \u2705 100-pt strikes (was 50)\nBATCH_SIZE    = 10             # \u2705 broker cap per second\nBATCH_PAUSE   = 2           # seconds to wait between batches\nMAX_RETRIES   = 1              # one retry on 429 / timeout\nBACKOFF_SEC   = 1.2\n\nclient = api(api_key=API_KEY, host=API_HOST)\nif sys.platform.startswith("win"):\n    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Helpers \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ndef get_atm_strike(step: int = STEP) -> int:\n    q = client.quotes(symbol="NIFTY", exchange="NSE_INDEX")\n    print("Underlying Quote :", q)                               # rule 14\n    return int(round(q["data"]["ltp"] / step) * step)\n\n_sym_rx = re.compile(r"^[A-Z]+(\\d{2}[A-Z]{3}\\d{2})(\\d+)(CE|PE)$")\ndef parse_symbol(sym: str):\n    m = _sym_rx.match(sym)\n    return (int(m.group(2)), m.group(3)) if m else None\n\ndef fetch_sync(sym: str) -> dict | None:\n    """Blocking quote call with a retry for 429 / timeout."""\n    for attempt in range(MAX_RETRIES + 1):\n        q = client.quotes(symbol=sym, exchange="NFO")\n        print(sym, "\u2192", q)                                       # rule 14\n        if q.get("status") == "success":\n            strike, opt = parse_symbol(sym)\n            if strike is None:\n                print("\u26a0\ufe0f  Bad symbol", sym)\n                return None\n            return dict(strike=strike, type=opt,\n                        oi=q["data"]["oi"], ltp=q["data"]["ltp"])\n        if (q.get("code") == 429 or q.get("error_type") == "timeout_error") and attempt < MAX_RETRIES:\n            time.sleep(BACKOFF_SEC)\n    return None\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch-paced gather (\u22485 req/s) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nasync def gather_df() -> pd.DataFrame:\n    atm = get_atm_strike()\n    strikes = [atm + i*STEP for i in range(-RADIUS, RADIUS + 1)]\n    symbols = [f"NIFTY{EXPIRY}{k}{s}" for k in strikes for s in ("CE", "PE")]\n\n    rows: list[dict] = []\n    for i in range(0, len(symbols), BATCH_SIZE):\n        batch = symbols[i:i+BATCH_SIZE]\n        res   = await asyncio.gather(*[asyncio.to_thread(fetch_sync, s) for s in batch])\n        rows.extend(r for r in res if r)\n        if i + BATCH_SIZE < len(symbols):\n            await asyncio.sleep(BATCH_PAUSE)          # pace \u2192 5 req/s\n\n    if not rows:\n        raise RuntimeError("All quotes failed \u2013 check API / symbols.")\n    return pd.DataFrame(rows)\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Plot (Call = green, Put = red, both positive) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ndef plot_oi(df: pd.DataFrame):\n    piv = (df.pivot(index="strike", columns="type", values=["oi", "ltp"])\n             .sort_index())\n    piv.columns = ["CE_OI", "PE_OI", "CE_LTP", "PE_LTP"]\n    piv = piv.reset_index()\n\n    fig = go.Figure()\n    fig.add_bar(\n        x=piv["strike"], y=piv["CE_OI"],          # no minus sign\n        name="Call OI", marker_color="seagreen",  # \u2705 green\n        customdata=piv[["CE_OI", "CE_LTP"]],\n        hovertemplate="<b>%{x} CE</b><br>OI %{customdata[0]:,}"\n                      "<br>LTP \u20b9%{customdata[1]:.2f}<extra></extra>"\n    )\n    fig.add_bar(\n        x=piv["strike"], y=piv["PE_OI"],\n        name="Put OI", marker_color="crimson",    # \u2705 red\n        customdata=piv[["PE_OI", "PE_LTP"]],\n        hovertemplate="<b>%{x} PE</b><br>OI %{customdata[0]:,}"\n                      "<br>LTP \u20b9%{customdata[1]:.2f}<extra></extra>"\n    )\n    atm = get_atm_strike()\n    fig.add_vline(\n        x=piv.index[piv["strike"] == atm][0],\n        line_dash="dash", line_color="gray",\n        annotation_text=f"ATM {atm}", annotation_position="top"\n    )\n    fig.update_layout(\n        title=f"NIFTY {datetime.strptime(EXPIRY,\'%d%b%y\').strftime(\'%d %b %Y\')} \u2013 OI Profile",\n        xaxis=dict(title="Strike", type="category"),\n        yaxis_title="Open Interest",\n        bargap=0.05, template="plotly_dark",\n        height=500, width=1250,\n        legend=dict(orientation="h", yanchor="bottom", y=1.02,\n                    xanchor="right", x=1)\n    )\n    fig.show()\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Runner (script / notebook) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nasync def _main():\n    df = await gather_df()\n    print(df.head())\n    plot_oi(df)\n\ndef _in_nb() -> bool:\n    try:\n        import IPython\n        return IPython.get_ipython() is not None\n    except ImportError:\n        return False\n\nif _in_nb():\n    await _main()                   # Jupyter\nelse:\n    asyncio.run(_main())            # script\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"full-code-explaination",children:"Full Code Explaination"}),"\n",(0,r.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.h4,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'OPENALGO_API_KEY  = "your_api_key_here"\nOPENALGO_API_HOST = "http://127.0.0.1:5000"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'EXPIRY        = "31JUL25"      # Option expiry date (DDMMMYY format)\nRADIUS        = 20             # Number of strikes above/below ATM\nSTEP          = 100            # Strike price interval\nBATCH_SIZE    = 5              # API requests per batch\nBATCH_PAUSE   = 1.05           # Seconds between batches\nMAX_RETRIES   = 1              # Retry attempts for failed requests\nBACKOFF_SEC   = 1.2           # Backoff time for retries\n'})}),"\n",(0,r.jsx)(n.h3,{id:"code-structure",children:"Code Structure"}),"\n",(0,r.jsx)(n.h4,{id:"1-atm-strike-calculation",children:"1. ATM Strike Calculation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def get_atm_strike(step: int = STEP) -> int:\n    q = client.quotes(symbol="NIFTY", exchange="NSE_INDEX")\n    return int(round(q["data"]["ltp"] / step) * step)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Fetches current NIFTY spot price and rounds to nearest strike."}),"\n",(0,r.jsx)(n.h4,{id:"2-symbol-parsing",children:"2. Symbol Parsing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'_sym_rx = re.compile(r"^[A-Z]+(\\d{2}[A-Z]{3}\\d{2})(\\d+)(CE|PE)$")\ndef parse_symbol(sym: str):\n    m = _sym_rx.match(sym)\n    return (int(m.group(2)), m.group(3)) if m else None\n'})}),"\n",(0,r.jsx)(n.p,{children:"Extracts strike price and option type from symbol string."}),"\n",(0,r.jsx)(n.h4,{id:"3-quote-fetching",children:"3. Quote Fetching"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def fetch_sync(sym: str) -> dict | None:\n    for attempt in range(MAX_RETRIES + 1):\n        q = client.quotes(symbol=sym, exchange="NFO")\n        if q.get("status") == "success":\n            strike, opt = parse_symbol(sym)\n            return dict(strike=strike, type=opt,\n                        oi=q["data"]["oi"], ltp=q["data"]["ltp"])\n        if (q.get("code") == 429 or q.get("error_type") == "timeout_error") and attempt < MAX_RETRIES:\n            time.sleep(BACKOFF_SEC)\n    return None\n'})}),"\n",(0,r.jsx)(n.p,{children:"Fetches quote data with retry logic for rate limits and timeouts."}),"\n",(0,r.jsx)(n.h4,{id:"4-batch-data-collection",children:"4. Batch Data Collection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def gather_df() -> pd.DataFrame:\n    atm = get_atm_strike()\n    strikes = [atm + i*STEP for i in range(-RADIUS, RADIUS + 1)]\n    symbols = [f"NIFTY{EXPIRY}{k}{s}" for k in strikes for s in ("CE", "PE")]\n\n    rows: list[dict] = []\n    for i in range(0, len(symbols), BATCH_SIZE):\n        batch = symbols[i:i+BATCH_SIZE]\n        res = await asyncio.gather(*[asyncio.to_thread(fetch_sync, s) for s in batch])\n        rows.extend(r for r in res if r)\n        if i + BATCH_SIZE < len(symbols):\n            await asyncio.sleep(BATCH_PAUSE)\n    \n    return pd.DataFrame(rows)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Processes symbols in batches to respect API rate limits."}),"\n",(0,r.jsx)(n.h4,{id:"5-visualization",children:"5. Visualization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def plot_oi(df: pd.DataFrame):\n    piv = df.pivot(index="strike", columns="type", values=["oi", "ltp"]).sort_index()\n    piv.columns = ["CE_OI", "PE_OI", "CE_LTP", "PE_LTP"]\n    \n    fig = go.Figure()\n    \n    # Call OI - Green bars\n    fig.add_bar(\n        x=piv["strike"], y=piv["CE_OI"],\n        name="Call OI", marker_color="seagreen",\n        customdata=piv[["CE_OI", "CE_LTP"]],\n        hovertemplate="<b>%{x} CE</b><br>OI %{customdata[0]:,}<br>LTP \u20b9%{customdata[1]:.2f}"\n    )\n    \n    # Put OI - Red bars\n    fig.add_bar(\n        x=piv["strike"], y=piv["PE_OI"],\n        name="Put OI", marker_color="crimson",\n        customdata=piv[["PE_OI", "PE_LTP"]],\n        hovertemplate="<b>%{x} PE</b><br>OI %{customdata[0]:,}<br>LTP \u20b9%{customdata[1]:.2f}"\n    )\n    \n    # ATM line\n    atm = get_atm_strike()\n    fig.add_vline(\n        x=piv.index[piv["strike"] == atm][0],\n        line_dash="dash", line_color="gray",\n        annotation_text=f"ATM {atm}"\n    )\n    \n    fig.update_layout(\n        title=f"NIFTY {datetime.strptime(EXPIRY,\'%d%b%y\').strftime(\'%d %b %Y\')} \u2013 OI Profile",\n        xaxis=dict(title="Strike", type="category"),\n        yaxis_title="Open Interest",\n        bargap=0.05, template="plotly_dark",\n        height=500, width=1250\n    )\n    \n    fig.show()\n'})}),"\n",(0,r.jsx)(n.p,{children:"Creates interactive bar chart with hover details."}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h4,{id:"in-jupyter-notebook",children:"In Jupyter Notebook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Run all cells to generate OI profile\nawait _main()  # Automatically detected and executed\n"})}),"\n",(0,r.jsx)(n.h4,{id:"as-python-script",children:"As Python Script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Run directly\npython NiftyOI.py\n"})}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,r.jsx)(n.p,{children:"The script generates:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Interactive Plotly chart"}),"\n",(0,r.jsx)(n.li,{children:"Green bars for Call OI"}),"\n",(0,r.jsx)(n.li,{children:"Red bars for Put OI"}),"\n",(0,r.jsx)(n.li,{children:"Gray dashed line for ATM strike"}),"\n",(0,r.jsx)(n.li,{children:"Hover tooltips showing OI and LTP values"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"429 errors: Automatic retry with backoff"}),"\n",(0,r.jsx)(n.li,{children:"Timeout errors: Retry with MAX_RETRIES limit"}),"\n",(0,r.jsx)(n.li,{children:"Invalid symbols: Skipped with warning"}),"\n",(0,r.jsx)(n.li,{children:"API failures: Graceful degradation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-structure",children:"Data Structure"}),"\n",(0,r.jsx)(n.p,{children:"Output DataFrame contains:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"strike"}),": Strike price"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": Option type (CE/PE)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"oi"}),": Open Interest"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ltp"}),": Last Traded Price"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}},9578:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Nifty Open Interest-fbe9036be4dc494635e638228474c0ce.png"}}]);