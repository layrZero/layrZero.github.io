"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[5753],{920:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"trading-platform/amibroker/button-trading-module-old","title":"Button Trading Module","description":"Internet Functions Method (Modern)","source":"@site/docs/trading-platform/amibroker/button-trading-module-old.md","sourceDirName":"trading-platform/amibroker","slug":"/trading-platform/amibroker/button-trading-module-old","permalink":"/docs/trading-platform/amibroker/button-trading-module-old","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/amibroker/button-trading-module-old.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Button Trading Module (Modern)","permalink":"/docs/trading-platform/amibroker/button-trading-module-modern"},"next":{"title":"Button Trading with Spit Order (Options)","permalink":"/docs/trading-platform/amibroker/button-trading-with-spit-order-options"}}');var a=e(4848),r=e(8453);const i={},s="Button Trading Module",l={},c=[{value:"Internet Functions Method (Modern)",id:"internet-functions-method-modern",level:2},{value:"VB Script Method (Legacy)",id:"vb-script-method-legacy",level:2}];function u(t){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,r.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"button-trading-module",children:"Button Trading Module"})}),"\n",(0,a.jsx)(n.h2,{id:"internet-functions-method-modern",children:"Internet Functions Method (Modern)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-clike",children:'//Rajandran R - Creator of OpenAlgo\n//website - openalgo.in / marketcalls.in\n//OpenAlgo - Amibroker Button Trading Module v1.0\n//Date - 10/12/2024\n\n\n_SECTION_BEGIN("OpenAlgo Button Trading - Modern Internet Functions");\n\namiversion = Version();\n\nRequestTimedRefresh(1, False);\n\n// Define parameter controls\napikey = ParamStr("OpenAlgo API Key", "******");\nstrategy = ParamStr("Strategy", "Amibroker");\nsymbol = ParamStr("Symbol", "RELIANCE");\nexchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");\npricetype = ParamStr("Price Type", "MARKET");\nproduct = ParamList("Product", "MIS|NRML|CNC");\nquantity = Param("Quantity", 1, 1, 1000, 1);\n\nhost = ParamStr("Host", "http://127.0.0.1:5000");\nver = ParamStr("API Version", "v1");\n\nVoiceAlert = ParamList("Voice Alert", "Disable|Enable", 1);\nEnableAlgo = ParamList("Algo Mode", "Disable|Enable", 0);\n\n// Construct URL base\nbridgeurl = host + "/api/" + ver;\n\n// Static variable for Algo status\nstatic_name_algo = Name() + GetChartID() + interval(2) + strategy + "_algostatus";\n\n// Function to Place Order\nfunction PlaceOrder(action, quantity)\n{\n    postData = \n    "{\\"apikey\\": \\"" + apikey + "\\", " +\n    "\\"strategy\\": \\"" + strategy + "\\", " +\n    "\\"symbol\\": \\"" + symbol + "\\", " +\n    "\\"action\\": \\"" + action + "\\", " +\n    "\\"exchange\\": \\"" + exchange + "\\", " +\n    "\\"pricetype\\": \\"" + pricetype + "\\", " +\n    "\\"product\\": \\"" + product + "\\", " +\n    "\\"quantity\\": \\"" + quantity + "\\"}";\n\n    headers = "Content-Type: application/json\\r\\n" +\n              "Accept-Encoding: gzip, deflate\\r\\n";\n    InternetSetHeaders(headers);\n\n    _TRACE("Request Sent: " + postData); // Log request\n    ih = InternetPostRequest(bridgeurl + "/placeorder", postData);\n\n    if (ih)\n    {\n        response = "";\n        while ((line = InternetReadString(ih)) != "")\n        {\n            response += line;\n        }\n        _TRACEF("Order Response: %s", response);\n        if (VoiceAlert == "Enable") Say(action + " Order Placed.");\n        InternetClose(ih);\n    }\n    else\n    {\n        _TRACE("Failed to place order.");\n    }\n}\n\n// Function to Square Off All Positions\nfunction SquareOffAll()\n{\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", \\"strategy\\": \\"" + strategy + "\\"}";\n    headers = "Content-Type: application/json\\r\\n" +\n              "Accept-Encoding: gzip, deflate\\r\\n";\n    InternetSetHeaders(headers);\n\n    _TRACE("Request Sent: " + postData); // Log request\n    ih = InternetPostRequest(bridgeurl + "/closeposition", postData);\n\n    if (ih)\n    {\n        response = "";\n        while ((line = InternetReadString(ih)) != "")\n        {\n            response += line;\n        }\n        _TRACEF("Square Off Response: %s", response);\n        if (VoiceAlert == "Enable") Say("All positions squared off.");\n        InternetClose(ih);\n    }\n    else\n    {\n        _TRACE("Failed to square off positions.");\n    }\n}\n\n// Button Trading Implementation\nX0 = 20;\nY0 = 100;\nX1 = 60;\n\nLBClick = GetCursorMouseButtons() == 9;\nMouseX = Nz(GetCursorXPosition(1));\nMouseY = Nz(GetCursorYPosition(1));\n\n// Procedure to Draw Button\nprocedure DrawButton(Text, x1, y1, x2, y2, colorFrom, colorTo)\n{\n    GfxSetOverlayMode(0);\n    GfxSelectFont("Verdana", 9, 700);\n    GfxSetBkMode(1);\n    GfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);\n    GfxDrawText(Text, x1, y1, x2, y2, 32 | 1 | 4 | 16);\n}\n\nif (amiversion >= 6.4) {\n\n// Algo Mode Status Dashboard\nGfxSelectFont("BOOK ANTIQUA", 14, 100);\nGfxSetBkMode(1);\n\nif (EnableAlgo == "Enable")\n{\n    AlgoStatus = "Algo Enabled";\n    GfxSetTextColor(colorGreen);\n    GfxTextOut("Algostatus: " + AlgoStatus, 20, 40);\n    if (Nz(StaticVarGet(static_name_algo), 0) != 1)\n    {\n        _TRACE("Algo Status: Enabled");\n        StaticVarSet(static_name_algo, 1);\n    }\n}\nelse\n{\n    AlgoStatus = "Algo Disabled";\n    GfxSetTextColor(colorRed);\n    GfxTextOut("Algostatus: " + AlgoStatus, 20, 40);\n    if (Nz(StaticVarGet(static_name_algo), 0) != 0)\n    {\n        _TRACE("Algo Status: Disabled");\n        StaticVarSet(static_name_algo, 0);\n    }\n}\nGfxSetTextColor(colorWhite);\n\n\n\nif (EnableAlgo == "Enable")\n{\n    // Draw buttons\n    DrawButton("BE", X0, Y0, X0 + X1, Y0 + 50, colorGreen, colorGreen);\n    CursorInBEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 AND MouseY <= Y0 + 50;\n    BEButtonClick = CursorInBEButton AND LBClick;\n\n    DrawButton("BX", X0 + 65, Y0, X0 + X1 + 65, Y0 + 50, colorRed, colorRed);\n    CursorInBXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 AND MouseY <= Y0 + 50;\n    BxButtonClick = CursorInBXButton AND LBClick;\n\n    DrawButton("SE", X0, Y0 + 55, X0 + X1, Y0 + 105, colorRed, colorRed);\n    CursorInSEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;\n    SEButtonClick = CursorInSEButton AND LBClick;\n\n    DrawButton("SX", X0 + 65, Y0 + 55, X0 + X1 + 65, Y0 + 105, colorGreen, colorGreen);\n    CursorInSXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;\n    SXButtonClick = CursorInSXButton AND LBClick;\n\n    DrawButton("CLOSE ALL", X0, Y0 + 110, X0 + X1 + 65, Y0 + 155, colorRed, colorRed);\n    CursorInCXButton = MouseX >= X0 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 110 AND MouseY <= Y0 + 155;\n    CXButtonClick = CursorInCXButton AND LBClick;\n\n    // Button Actions\n    if (BEButtonClick AND StaticVarGet(static_name_algo + "BE") == 0)\n    {\n        PlaceOrder("BUY", quantity);\n        StaticVarSet(static_name_algo + "BE", 1);\n    }\n    else\n    {\n        StaticVarSet(static_name_algo + "BE", 0);\n    }\n\n    if (BXButtonClick AND StaticVarGet(static_name_algo + "BX") == 0)\n    {\n        PlaceOrder("SELL", quantity);\n        StaticVarSet(static_name_algo + "BX", 1);\n    }\n    else\n    {\n        StaticVarSet(static_name_algo + "BX", 0);\n    }\n\n    if (SEButtonClick AND StaticVarGet(static_name_algo + "SE") == 0)\n    {\n        PlaceOrder("SELL", quantity);\n        StaticVarSet(static_name_algo + "SE", 1);\n    }\n    else\n    {\n        StaticVarSet(static_name_algo + "SE", 0);\n    }\n\n    if (SXButtonClick AND StaticVarGet(static_name_algo + "SX") == 0)\n    {\n        PlaceOrder("BUY", quantity);\n        StaticVarSet(static_name_algo + "SX", 1);\n    }\n    else\n    {\n        StaticVarSet(static_name_algo + "SX", 0);\n    }\n\n    if (CXButtonClick AND StaticVarGet(static_name_algo + "CX") == 0)\n    {\n        SquareOffAll();\n        StaticVarSet(static_name_algo + "CX", 1);\n    }\n    else\n    {\n        StaticVarSet(static_name_algo + "CX", 0);\n    }\n}\n\n}\n\nelse {\n    GfxSetBkMode(1); // Transparent background\n    GfxSelectFont("Arial", 16, 700); // Font for text\n    GfxSetTextColor(colorRed); // Text color\n    GfxTextOut("You are using an older version of AmiBroker. This feature is not supported. Amibroker 6.4 or higher is required", 50, 50);\n}\n\n_SECTION_END();\n\n_SECTION_BEGIN("Candlestick Charts with Date & Time Axis");\n\n// Enable the Date & Time Axis\nSetChartOptions(0, chartShowArrows | chartShowDates);\n\n// Plotting Candlestick charts\nPlot(Close, "Candle", colorDefault, stylebar);\n\n_SECTION_END();\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"vb-script-method-legacy",children:"VB Script Method (Legacy)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-clike",children:'//Rajandran R - Creator of OpenAlgo\n//website - openalgo.in / marketcalls.in\n//OpenAlgo - Amibroker Button Trading Module v1.0\n//Date - 10/02/2024\n\n\n\n_SECTION_BEGIN("OpenAlgo Button Trading");\n\nRequestTimedRefresh(1,False);\n\napikey = ParamStr("OpenAlgo API Key", "******");\nstrategy = ParamStr("Strategy", "Amibroker");\nsymbol = ParamStr("Symbol", "RELIANCE");\nexchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");\npricetype = ParamStr("Price Type", "MARKET");\nproduct = ParamList("Product", "MIS|NRML|CNC");\nquantity = Param("Quantity", 1,1,1000,1);\n\nhost = ParamStr("host","http://127.0.0.1:5000");\nver = ParamStr("API Version","v1");\n\nVoiceAlert = ParamList("Voice Alert","Disable|Enable",1);\nEnableAlgo = ParamList("Algo Mode","Disable|Enable",0); // Algo Mode\n\n\nbridgeurl = host+"/api/"+ver;\n\n\n\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = static_name_+interval(2)+strategy+"algostatus";\n\n\n\n\n//OpenAlgo Dashboard\n\nGfxSelectFont( "BOOK ANTIQUA", 14, 100 );\nGfxSetBkMode( 1 );\nif(EnableAlgo == "Enable")\n{\nAlgoStatus = "Algo Enabled";\nGfxSetTextColor( colorGreen ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=1)\n{\n_TRACE("Algo Status : Enabled");\nStaticVarSet(static_name_algo, 1);\n}\n}\nif(EnableAlgo == "Disable")\n{\nAlgoStatus = "Algo Disabled";\nGfxSetTextColor( colorRed ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=0)\n{\n_TRACE("Algo Status : Disabled");\nStaticVarSet(static_name_algo, 0);\n}\n}\n\n\n\n_SECTION_BEGIN("OpenAlgo Bridge Controls");\n\nEnableScript("VBScript"); \n<%\nPublic Sub PlaceOrder(action, quantity)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placeorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " api_url :" & url\n\n    \n    AFL("api_request") = api_parameters  \n    AFL("api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\nPublic Sub SquareoffAll()\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n      \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/closeposition"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " api_url :" & url\n\n    \n    AFL("sq_api_request") = api_parameters  \n    AFL("sq_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\n%>\n\n\nopenalgo = GetScriptObject();\n\n\n\n\n_SECTION_BEGIN("Button Trading - For Old Amibroker Versions");\n\nX0 = 20;\nY0 = 100;\nX1 = 60;\n\nLBClick = GetCursorMouseButtons() == 9;\t// Click\nMouseX  = Nz(GetCursorXPosition(1));\t\t// \nMouseY  = Nz(GetCursorYPosition(1));\t\t//\n\nprocedure DrawButton (Text, x1, y1, x2, y2, colorFrom, colorTo)\n{\n\tGfxSetOverlayMode(0);\n\tGfxSelectFont("Verdana", 9, 700);\n\tGfxSetBkMode(1);\n\tGfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);\n\tGfxDrawText(Text, x1, y1, x2, y2, 32|1|4|16);\n}\nGfxSetTextColor(colorWhite);\n\nif(EnableAlgo == "Enable")\n{  \n\n\tDrawButton("BE", X0, Y0, X0+X1, Y0+50, colorGreen, colorGreen);\n\tCursorInBEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0 AND MouseY <= Y0+50;\n\tBEButtonClick = CursorInBEButton AND LBClick;\n\t\n\tDrawButton("BX", X0+65, Y0, X0+X1+65, Y0+50, colorRed, colorRed);\n\tCursorInBXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0 AND MouseY <= Y0+50;\n\tBxButtonClick = CursorInBXButton AND LBClick;\n\t\n\tDrawButton("SE", X0, Y0+55, X0+X1, Y0+105, colorRed, colorRed);\n\tCursorInSEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0+55 AND MouseY <= Y0+105;\n\tSEButtonClick = CursorInSEButton AND LBClick;\n\t\n\tDrawButton("SX", X0+65, Y0+55, X0+X1+65, Y0+105, colorGreen, colorGreen);\n\tCursorInSXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0+55 AND MouseY <= Y0+105;\n\tSXButtonClick = CursorInSXButton AND LBClick;\n\t\n\tDrawButton("CLOSE ALL", X0, Y0+110, X0+X1+65, Y0+155, colorRed, colorRed);\n\tCursorInCXButton = MouseX >= X0 AND MouseX <= X0+X1+65 AND MouseY >= Y0+110 AND MouseY <= Y0+155;\n\tCXButtonClick = CursorInCXButton AND LBClick;\n\t\n\t\n\tif( BEButtonClick AND StaticVarGet(static_name_+"BEAlgo")==0 ) \n\t{\n\t\topenalgo.placeorder("BUY",quantity);\n        if(VoiceAlert == "Enable"){\n\t\t\t\tSay("Buy Order Triggered");  \t\n\t\t\t}\n\t\t_TRACE("API Request : "+api_request);\n\t\t_TRACE("API Response : "+api_response);\n\t\t\n\t\tStaticVarSet(static_name_+"BEAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(static_name_+"BEAlgo",0);\n\t}\n\tif( BXButtonClick AND StaticVarGet(static_name_+"BXAlgo")==0 ) \n\t{\n\t\topenalgo.placeorder("SELL",quantity);\n        if(VoiceAlert == "Enable"){\n\t\t\t\tSay("Sell Order Triggered");  \t\n\t\t\t}\n\t\t_TRACE("API Request : "+api_request);\n\t\t_TRACE("API Response : "+api_response);\n\t\tStaticVarSet(static_name_+"BXAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(static_name_+"BXAlgo",0);\n\t}\n\t\t\n\tif( SEButtonClick AND StaticVarGet(static_name_+"SEAlgo")==0 ) \n\t{\n\t\topenalgo.placeorder("SELL",quantity);\n        if(VoiceAlert == "Enable"){\n\t\t\t\tSay("Short Order Triggered");  \t\n\t\t\t}\n\t\t_TRACE("API Request : "+api_request);\n\t\t_TRACE("API Response : "+api_response);\n\t\tStaticVarSet(static_name_+"SEAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(static_name_+"SEAlgo",0);\n\t}\n\n\tif( SXButtonClick AND StaticVarGet(static_name_+"SXAlgo")==0 ) \n\t{\n\t\topenalgo.placeorder("BUY",quantity);\n        if(VoiceAlert == "Enable"){\n\t\t\t\tSay("Cover Order Triggered");  \t\n\t\t\t}\n\t\t_TRACE("API Request : "+api_request);\n\t\t_TRACE("API Response : "+api_response);\n\t\tStaticVarSet(static_name_+"SXAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(static_name_+"SXAlgo",0); \n\t}\n\t\n\tif( CXButtonClick AND StaticVarGet(Name()+GetChartID()+"CXAlgo")==0 ) \n\t{\n\t\topenalgo.Squareoffall();\n\t\tif(VoiceAlert == "Enable"){\n\t\t\t\tSay("Squareoff All Triggered");  \t\n\t\t\t}\n\t\t_TRACE("API Request : "+sq_api_request);\n\t\t_TRACE("API Response : "+sq_api_response);\n\t\tStaticVarSet(Name()+GetChartID()+"CXAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(Name()+GetChartID()+"CXAlgo",0);\n\t}\n\t\n\t\n}\n\n_SECTION_END();\n\n\n_SECTION_BEGIN("Candlestick Charts with Date & Time Axis");\n\n//Enable the Date & Time Axis\nSetChartOptions(0, chartShowArrows | chartShowDates);\n\n//Plotting Candlestick charts\nPlot(Close,"Candle",colorDefault,styleCandle);\n\n\n_SECTION_END();\n\n'})})]})}function d(t={}){const{wrapper:n}={...(0,r.R)(),...t.components};return n?(0,a.jsx)(n,{...t,children:(0,a.jsx)(u,{...t})}):u(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>i,x:()=>s});var o=e(6540);const a={},r=o.createContext(a);function i(t){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof t?t(n):{...n,...t}},[n,t])}function s(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:i(t.components),o.createElement(r.Provider,{value:n},t.children)}}}]);