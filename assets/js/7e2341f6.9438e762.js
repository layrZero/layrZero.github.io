"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[7607],{3174:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"trading-platform/amibroker/button-trading-with-stoploss","title":"Button Trading with Stoploss","description":"","source":"@site/docs/trading-platform/amibroker/button-trading-with-stoploss.md","sourceDirName":"trading-platform/amibroker","slug":"/trading-platform/amibroker/button-trading-with-stoploss","permalink":"/docs/trading-platform/amibroker/button-trading-with-stoploss","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/amibroker/button-trading-with-stoploss.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Button Trading with Split Orders","permalink":"/docs/trading-platform/amibroker/button-trading-with-split-orders"},"next":{"title":"CSV Exploration Module","permalink":"/docs/trading-platform/amibroker/csv-exploration-module"}}');var a=n(4848),o=n(8453);const s={},i="Button Trading with Stoploss",l={},c=[];function p(t){const e={code:"code",h1:"h1",header:"header",pre:"pre",...(0,o.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"button-trading-with-stoploss",children:"Button Trading with Stoploss"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-clike",children:'//Rajandran R - Creator of OpenAlgo\n//website - openalgo.in / marketcalls.in\n//OpenAlgo - Amibroker Button Trading Module v1.0 with Stoploss\n//Date - 13/08/2024\n\n\n\n_SECTION_BEGIN("OpenAlgo Button Trading");\n\nRequestTimedRefresh(1,False);\nSetOption("StaticVarAutoSave", 30 );\nEnableTextOutput(False);\n\napikey = ParamStr("OpenAlgo API Key", "******");\nstrategy = ParamStr("Strategy", "Amibroker");\nsymbol = ParamStr("Symbol", "RELIANCE");\nexchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");\npricetype = ParamStr("Price Type", "MARKET");\nproduct = ParamList("Product", "MIS|NRML|CNC");\nquantity = Param("Quantity", 1,1,1000,1);\nstops = Param("Stoploss (points)",30,0.05,1000,0.05);\n\nhost = ParamStr("host","http://127.0.0.1:5000");\nver = ParamStr("API Version","v1");\n\nVoiceAlert = ParamList("Voice Alert","Disable|Enable",1);\nEnableAlgo = ParamList("Algo Mode","Disable|Enable",0); // Algo Mode\n\n\nbridgeurl = host+"/api/"+ver;\n\n\n\nstatic_name_ = Name()+GetChartID()+interval(2)+strategy;\nstatic_name_algo = static_name_+interval(2)+strategy+"algostatus";\n\n\n\n\n//OpenAlgo Dashboard\n\nGfxSelectFont( "BOOK ANTIQUA", 14, 100 );\nGfxSetBkMode( 1 );\nif(EnableAlgo == "Enable")\n{\nAlgoStatus = "Algo Enabled";\nGfxSetTextColor( colorGreen ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=1)\n{\n_TRACE("Algo Status : Enabled");\nStaticVarSet(static_name_algo, 1);\n}\n}\nif(EnableAlgo == "Disable")\n{\nAlgoStatus = "Algo Disabled";\nGfxSetTextColor( colorRed ); \nGfxTextOut( "Algostatus : "+AlgoStatus , 20, 40); \nif(Nz(StaticVarGet(static_name_algo),0)!=0)\n{\n_TRACE("Algo Status : Disabled");\nStaticVarSet(static_name_algo, 0);\n}\n}\n\n\n\n_SECTION_BEGIN("OpenAlgo Bridge Controls");\n\nEnableScript("VBScript"); \n<%\nPublic Sub PlaceOrder(action, quantity)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = AFL.Var("pricetype")\n    product = AFL.Var("product")\n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placeorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " api_url :" & url\n\n    \n    AFL("api_request") = api_parameters  \n    AFL("api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\nPublic Sub PlaceSLOrder(action, quantity,stopprice)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product, price, disclosed_quantity\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n    symbol = AFL.Var("symbol")\n    exchange = AFL.Var("exchange")\n    pricetype = "SL-M"\n    product = AFL.Var("product")\n    price = "0"\n    disclosed_quantity = "0"\n    \n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""symbol"":""" & symbol & _\n    """,""action"":""" & action & _\n    """,""exchange"":""" & exchange & _\n    """,""pricetype"":""" & pricetype & _\n    """,""product"":""" & product & _\n    """,""quantity"":""" & quantity & _\n    """,""price"":""" & price & _\n    """,""trigger_price"":""" & stopprice & _\n    """,""disclosed_quantity"":""" & disclosed_quantity & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/placeorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _\n                 " Action :" & action & " Pricetype :" & pricetype & _\n                 " Product :" & product & " Quantity:" & quantity & _\n                 " api_url :" & url\n\n    \n    AFL("sl_api_request") = api_parameters  \n    AFL("sl_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\n\n\n\n\n\nPublic Sub CancelOrder(orderid)\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy, symbol , exchange, pricetype, product\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n  \n   \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & _\n    """,""orderid"":""" & orderid & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/cancelorder"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " orderid :" & orderid \n\n    \n    AFL("cancel_api_request") = api_parameters  \n    AFL("cancel_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\nPublic Sub SquareoffAll()\n    Dim oXMLHTTP\n    Dim oStream\n    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")\n    \' Define variables with the specified values\n    Dim apikey, strategy\n    apikey = AFL.Var("apikey")\n    strategy = AFL.Var("strategy")\n      \n    \n    \' Construct the JSON string for the POST message\n    Dim jsonRequestBody\n    jsonRequestBody = "{""apikey"":""" & apikey & _\n    """,""strategy"":""" & strategy & """}"\n    \n    \' Set the URL\n    Dim url\n    url = AFL.Var("bridgeurl")&"/closeposition"\n    \n    \' Configure the HTTP request for POST method\n    oXMLHTTP.Open "POST", url, False\n    oXMLHTTP.setRequestHeader "Content-Type", "application/json"\n    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"\n    oXMLHTTP.setRequestHeader "Pragma", "no-cache"\n    \n    \' Send the request with the JSON body\n    oXMLHTTP.Send jsonRequestBody\n    \n    api_parameters = "Strategy :" & strategy & " api_url :" & url\n\n    \n    AFL("sq_api_request") = api_parameters  \n    AFL("sq_api_response") = oXMLHTTP.responseText\n    \n    \n    \' Optionally, handle the response here\n    \' Dim response\n    \' response = oXMLHTTP.responseText\n    \' Response handling code...\nEnd Sub\n\n\n%>\n\n\nopenalgo = GetScriptObject();\n\n_SECTION_BEGIN("Stoploss OrderID Display");\n\n\nStaticVarBuySLOrderID = StaticVarGetText(static_name_ + "BuySLOrderID");\nStaticVarSellSLOrderID = StaticVarGetText(static_name_ + "ShortSLOrderID");\n\nprintf("\\n The Buy Stoploss Order ID is : " + StaticVarBuySLOrderID);\nprintf("\\n The Sell Stoploss Order ID is : " + StaticVarSellSLOrderID);\n\n_SECTION_END();\n\n\n\n\n_SECTION_BEGIN("Button Trading - For Old Amibroker Versions");\n\nX0 = 20;\nY0 = 100;\nX1 = 60;\n\nLBClick = GetCursorMouseButtons() == 9;\t// Click\nMouseX  = Nz(GetCursorXPosition(1));\t\t// \nMouseY  = Nz(GetCursorYPosition(1));\t\t//\n\nprocedure DrawButton (Text, x1, y1, x2, y2, colorFrom, colorTo)\n{\n\tGfxSetOverlayMode(0);\n\tGfxSelectFont("Verdana", 9, 700);\n\tGfxSetBkMode(1);\n\tGfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);\n\tGfxDrawText(Text, x1, y1, x2, y2, 32|1|4|16);\n}\nGfxSetTextColor(colorWhite);\n\nif(EnableAlgo == "Enable")\n{  \n\n\tDrawButton("BE", X0, Y0, X0+X1, Y0+50, colorGreen, colorGreen);\n\tCursorInBEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0 AND MouseY <= Y0+50;\n\tBEButtonClick = CursorInBEButton AND LBClick;\n\t\n\tDrawButton("BX", X0+65, Y0, X0+X1+65, Y0+50, colorRed, colorRed);\n\tCursorInBXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0 AND MouseY <= Y0+50;\n\tBxButtonClick = CursorInBXButton AND LBClick;\n\t\n\tDrawButton("SE", X0, Y0+55, X0+X1, Y0+105, colorRed, colorRed);\n\tCursorInSEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0+55 AND MouseY <= Y0+105;\n\tSEButtonClick = CursorInSEButton AND LBClick;\n\t\n\tDrawButton("SX", X0+65, Y0+55, X0+X1+65, Y0+105, colorGreen, colorGreen);\n\tCursorInSXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0+55 AND MouseY <= Y0+105;\n\tSXButtonClick = CursorInSXButton AND LBClick;\n\t\n\tDrawButton("CLOSE ALL", X0, Y0+110, X0+X1+65, Y0+155, colorRed, colorRed);\n\tCursorInCXButton = MouseX >= X0 AND MouseX <= X0+X1+65 AND MouseY >= Y0+110 AND MouseY <= Y0+155;\n\tCXButtonClick = CursorInCXButton AND LBClick;\n\t\n\t\n\tif( BEButtonClick AND StaticVarGet(static_name_+"BEAlgo")==0 ) \n\t{\n\t\topenalgo.placeorder("BUY",quantity);\n\t\t_TRACE("API Request : "+api_request);\n\t\t_TRACE("API Response : "+api_response);\n\t\tslprice = LastValue(Close + stops);\n\t\topenalgo.placeSLorder("SELL",quantity,slprice);\n\t\t\n\t\torderid = StrExtract(sl_api_response,1,\'{\');\n\t\torderid = StrExtract(orderid,1,\':\');\n\t\torderid = StrExtract(orderid,0,\',\');\n\t\torderid = StrExtract(orderid,1,\'"\');\n\t\t\n\t\t_TRACE("API Request : "+sl_api_request);\n\t\t_TRACE("API Response : "+sl_api_response);\n\t\t_TRACE("The OrderID : "+orderid);\n\t\t\n\t\tStaticVarSetText(static_name_+"BuySLOrderID",orderid,True);\n\t\t\n\t\t\t\t\n        if(VoiceAlert == "Enable"){\n\t\t\t\tSay("Buy Order Triggered");  \t\n\t\t\t}\n\t\t\n\t\t\n\t\tStaticVarSet(static_name_+"BEAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(static_name_+"BEAlgo",0);\n\t}\n\tif( BXButtonClick AND StaticVarGet(static_name_+"BXAlgo")==0 ) \n\t{\n\t\n\t\tStaticVarBuySLOrderID = StaticVarGetText(static_name_ + "BuySLOrderID");\n\t\topenalgo.cancelorder(StaticVarBuySLOrderID);\n\t\t_TRACE("Cancel API Request : "+cancel_api_request);\n\t\t_TRACE("Cancel API Response : "+cancel_api_response);\n\t\tStaticVarSetText(static_name_+"BuySLOrderID","",True);\n\t\t\n\t\topenalgo.placeorder("SELL",quantity);\n        if(VoiceAlert == "Enable"){\n\t\t\t\tSay("Sell Order Triggered");  \t\n\t\t\t}\n\t\t_TRACE("API Request : "+api_request);\n\t\t_TRACE("API Response : "+api_response);\n\t\tStaticVarSet(static_name_+"BXAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(static_name_+"BXAlgo",0);\n\t}\n\t\t\n\tif( SEButtonClick AND StaticVarGet(static_name_+"SEAlgo")==0 ) \n\t{\n\t\topenalgo.placeorder("SELL",quantity);\n\t\t_TRACE("API Request : "+api_request);\n\t\t_TRACE("API Response : "+api_response);\n\t\tslprice = LastValue(Close - stops);\n\t\topenalgo.placeSLorder("BUY",quantity,slprice);\n\t\t\n\t\torderid = StrExtract(sl_api_response,1,\'{\');\n\t\torderid = StrExtract(orderid,1,\':\');\n\t\torderid = StrExtract(orderid,0,\',\');\n\t\torderid = StrExtract(orderid,1,\'"\');\n\t\t\n\t\t_TRACE("API Request : "+sl_api_request);\n\t\t_TRACE("API Response : "+sl_api_response);\n\t\t_TRACE("The OrderID : "+orderid);\n\t\t\n\t\tStaticVarSetText(static_name_+"ShortSLOrderID",orderid,True);\n\t\t\n        if(VoiceAlert == "Enable"){\n\t\t\t\tSay("Short Order Triggered");  \t\n\t\t\t}\n\t\t_TRACE("API Request : "+api_request);\n\t\t_TRACE("API Response : "+api_response);\n\t\tStaticVarSet(static_name_+"SEAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(static_name_+"SEAlgo",0);\n\t}\n\n\tif( SXButtonClick AND StaticVarGet(static_name_+"SXAlgo")==0 ) \n\t{\n\t\tStaticVarSellSLOrderID = StaticVarGetText(static_name_ + "ShortSLOrderID");\n\t\topenalgo.cancelorder(StaticVarSellSLOrderID);\n\t\t_TRACE("Cancel API Request : "+cancel_api_request);\n\t\t_TRACE("Cancel API Response : "+cancel_api_response);\n\t\tStaticVarSetText(static_name_+"ShortSLOrderID","",True);\n\n\t\topenalgo.placeorder("BUY",quantity);\n        if(VoiceAlert == "Enable"){\n\t\t\t\tSay("Cover Order Triggered");  \t\n\t\t\t}\n\t\t_TRACE("API Request : "+api_request);\n\t\t_TRACE("API Response : "+api_response);\n\t\tStaticVarSet(static_name_+"SXAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(static_name_+"SXAlgo",0); \n\t}\n\t\n\tif( CXButtonClick AND StaticVarGet(Name()+GetChartID()+"CXAlgo")==0 ) \n\t{\n\t\topenalgo.Squareoffall();\n\t\tif(VoiceAlert == "Enable"){\n\t\t\t\tSay("Squareoff All Triggered");  \t\n\t\t\t}\n\t\t_TRACE("API Request : "+sq_api_request);\n\t\t_TRACE("API Response : "+sq_api_response);\n\t\tStaticVarSet(Name()+GetChartID()+"CXAlgo",1); \n\t}\n\telse\n\t{\n\t\tStaticVarSet(Name()+GetChartID()+"CXAlgo",0);\n\t}\n\t\n\t\n}\n\n_SECTION_END();\n\n\n_SECTION_BEGIN("Candlestick Charts with Date & Time Axis");\n\n//Enable the Date & Time Axis\nSetChartOptions(0, chartShowArrows | chartShowDates);\n\n//Plotting Candlestick charts\nPlot(Close,"Candle",colorDefault,styleCandle);\n\n\n_SECTION_END();\n\n'})})]})}function u(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(p,{...t})}):p(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>i});var r=n(6540);const a={},o=r.createContext(a);function s(t){const e=r.useContext(o);return r.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),r.createElement(o.Provider,{value:e},t.children)}}}]);