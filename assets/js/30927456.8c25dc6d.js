"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[7007],{7148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"trading-platform/amibroker/trailing-stoploss-execution-module","title":"Trailing Stoploss Execution Module","description":"Internet Function Method","source":"@site/docs/trading-platform/amibroker/trailing-stoploss-execution-module.md","sourceDirName":"trading-platform/amibroker","slug":"/trading-platform/amibroker/trailing-stoploss-execution-module","permalink":"/docs/trading-platform/amibroker/trailing-stoploss-execution-module","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/amibroker/trailing-stoploss-execution-module.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Time Based Execution","permalink":"/docs/trading-platform/amibroker/time-based-execution"},"next":{"title":"ChartInk","permalink":"/docs/trading-platform/chartink"}}');var a=n(4848),i=n(8453);const o={},s="Trailing Stoploss Execution Module",l={},d=[{value:"Internet Function Method",id:"internet-function-method",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"trailing-stoploss-execution-module",children:"Trailing Stoploss Execution Module"})}),"\n",(0,a.jsx)(t.h2,{id:"internet-function-method",children:"Internet Function Method"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-clike",children:'// Rajandran R - Creator of OpenAlgo\n// Website - openalgo.in / marketcalls.in\n// OpenAlgo - Amibroker Trailing Stoploss Execution Module\n// Date - 13/12/2024\n\n\n_SECTION_BEGIN("OpenAlgo Trailing Stoploss Execution Module");\n\n// Initial setup and parameters\nRequestTimedRefresh(1, False);\nEnableTextOutput(False);\n\n// OpenAlgo Configuration Parameters\napikey = ParamStr("OpenAlgo API Key", "******");\nstrategy = ParamStr("Strategy", "TSL_Strategy");\nsymbol = ParamStr("Symbol", "YESBANK");\nexchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");\nproduct = ParamList("Product", "MIS|NRML|CNC");\nquantity = Param("Quantity", 1, 1, 1000, 1);\nhost = ParamStr("Host", "http://127.0.0.1:5000");\nver = ParamStr("API Version", "v1");\nVoiceAlert = ParamList("Voice Alert", "Disable|Enable", 1);\nEnableAlgo = ParamList("Algo Mode", "Disable|Enable", 0);\nTestMode = ParamList("Test Mode", "Disable|Enable", 0);\n\n// TSL Specific Parameters\nStopLevel = 1 - Param("Trailing Stop %", 3, 0.1, 10, 0.1)/100;\nOrder_TickSize = Param("Order Tick Size", 1, 0.01, 1, 0.01);\nEntrydelay = Param("Entry Delay", 0, 0, 1, 1);\nExitdelay = Param("Exit Delay", 0, 0, 1, 1);\n\nreset = ParamTrigger("Memory Reset","Reset Now");\n\n// Function to round price to nearest tick size\nfunction RoundToTickSize(price, tickSize) {\n    return Floor(price/tickSize + 0.5) * tickSize;\n}\n\n// Initialize static variables\nbridgeurl = host + "/api/" + ver;\nstatic_name_ = Name() + GetChartID() + interval(2) + strategy;\nstatic_name_algo = static_name_ + interval(2) + strategy + "algostatus";\nstatic_name_tsl = static_name_ + "_tsl";\nstatic_name_orderid = static_name_ + "_orderid";\n\nif(reset)\n{\n\nStaticVarRemove(static_name_+"_tsl");\nStaticVarRemove(static_name_+"_orderid");\n\n}\n\n// HTTP Post Request Function\nfunction HttpPostRequest(url, postData) {\n    headers = "Content-Type: application/json\\r\\n" +\n              "Accept-Encoding: gzip, deflate\\r\\n";\n    InternetSetHeaders(headers);\n    ih = InternetPostRequest(url, postData);\n    response = "";\n    if(ih) {\n        while((line = InternetReadString(ih)) != "") \n            response += line;\n        InternetClose(ih);\n    }\n    return response;\n}\n\n// JSON Value Extraction Function\nfunction ExtractJsonValue(jsonStr, key, isNested) {\n    result = "";\n    jsonData = jsonStr;\n\n    if(isNested) {\n        dataStart = StrFind(jsonStr, "\\"data\\":{");\n        if(dataStart > 0) dataStart = dataStart - 1;\n        \n        if(dataStart >= 0) {\n            valueStart = dataStart + 7;\n            valueEnd = valueStart;\n            braceCount = 1;\n            strLenJson = StrLen(jsonStr);\n\n            while(valueEnd < strLenJson) {\n                currChar = StrMid(jsonStr, valueEnd, 1);\n                if(currChar == "{") braceCount++;\n                if(currChar == "}") braceCount--;\n                if(braceCount == 0) break;\n                valueEnd++;\n            }\n            \n            jsonData = StrMid(jsonStr, valueStart, valueEnd - valueStart);\n        }\n    }\n    \n    keyPos = StrFind(jsonData, "\\"" + key + "\\":");\n    if(keyPos > 0) keyPos = keyPos - 1;\n    \n    if(keyPos > -1) {\n        valueStart = keyPos + StrLen(key) + 3;\n        while(StrMid(jsonData, valueStart, 1) == " ") valueStart++;\n        \n        firstValChar = StrMid(jsonData, valueStart, 1);\n        isQuoted = (firstValChar == "\\"");\n        \n        strLenData = StrLen(jsonData);\n        valueEnd = valueStart;\n        \n        if(isQuoted) {\n            valueStart++;\n            valueEnd = valueStart;\n            while(valueEnd < strLenData) {\n                currChar = StrMid(jsonData, valueEnd, 1);\n                if(currChar == "\\"") break; \n                valueEnd++;\n            }\n            result = StrMid(jsonData, valueStart, valueEnd - valueStart);\n        } else {\n            while(valueEnd < strLenData) {\n                currChar = StrMid(jsonData, valueEnd, 1);\n                if(currChar == "," OR currChar == "}") break;\n                valueEnd++;\n            }\n            result = StrMid(jsonData, valueStart, valueEnd - valueStart);\n        }\n    }\n    \n    return result;\n}\n\n// Order Management Functions\nfunction PlaceStopLossMarketOrder(action, triggerPrice) {\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", " +\n               "\\"strategy\\": \\"" + strategy + "\\", " +\n               "\\"symbol\\": \\"" + symbol + "\\", " +\n               "\\"action\\": \\"" + action + "\\", " +\n               "\\"exchange\\": \\"" + exchange + "\\", " +\n               "\\"pricetype\\": \\"SL-M\\", " +\n               "\\"price\\": \\"0\\", " +  // Price is 0 for SL-M orders\n               "\\"trigger_price\\": \\"" + triggerPrice + "\\", " +\n               "\\"product\\": \\"" + product + "\\", " +\n               "\\"quantity\\": \\"" + quantity + "\\"}";\n    _TRACE("SL-M Order Request: " + postData);\n    response = HttpPostRequest(bridgeurl + "/placeorder", postData);\n    _TRACE("SL-M Order Response: " + response);\n    return response;\n}\n\nfunction CheckOrderStatus(orderid) {\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", " +\n               "\\"strategy\\": \\"" + strategy + "\\", " +\n               "\\"orderid\\": \\"" + orderid + "\\"}";\n    response = HttpPostRequest(bridgeurl + "/orderstatus", postData);\n    _TRACE("Order Status Check for OrderID " + orderid + " Response: " + response);\n    return response;\n}\n\nfunction ModifyStopLossMarketOrder(orderid, triggerPrice) {\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", " +\n               "\\"strategy\\": \\"" + strategy + "\\", " +\n               "\\"symbol\\": \\"" + symbol + "\\", " +\n               "\\"action\\": \\"SELL\\", " +  // Added action field\n               "\\"exchange\\": \\"" + exchange + "\\", " +\n               "\\"orderid\\": \\"" + orderid + "\\", " +\n               "\\"product\\": \\"" + product + "\\", " +\n               "\\"pricetype\\": \\"SL-M\\", " +\n               "\\"price\\": \\"0\\", " +  // Price is 0 for SL-M orders\n               "\\"trigger_price\\": \\"" + triggerPrice + "\\", " +\n               "\\"quantity\\": \\"" + quantity + "\\", " +\n               "\\"disclosed_quantity\\": \\"0\\"}";  // Added disclosed_quantity field\n    _TRACE("Modify SL-M Order Request for OrderID " + orderid + ": " + postData);\n    response = HttpPostRequest(bridgeurl + "/modifyorder", postData);\n    _TRACE("Modify SL-M Order Response: " + response);\n    return response;\n}\n\nfunction PlaceMarketEntry(action) {\n    postData = "{\\"apikey\\": \\"" + apikey + "\\", " +\n               "\\"strategy\\": \\"" + strategy + "\\", " +\n               "\\"symbol\\": \\"" + symbol + "\\", " +\n               "\\"action\\": \\"" + action + "\\", " +\n               "\\"exchange\\": \\"" + exchange + "\\", " +\n               "\\"pricetype\\": \\"MARKET\\", " +\n               "\\"product\\": \\"" + product + "\\", " +\n               "\\"quantity\\": \\"" + quantity + "\\"}";\n    \n    _TRACE("Market Entry Order Request: " + postData);\n    response = HttpPostRequest(bridgeurl + "/placeorder", postData);\n    _TRACE("Market Entry Order Response: " + response);\n    return response;\n}\n\n// Trading signals\nBuy = Cross(MACD(), Signal());\nSell = 0;\ntrailARRAY = Null;\ntrailstop = 0;\n\n// Calculate Trailing Stop Level\nfor(i = 1; i < BarCount; i++) {\n    if(trailstop == 0 AND Buy[i]) { \n        trailstop = High[i] * StopLevel;\n        //_TRACE("New TSL Level calculated: " + trailstop);\n    }\n    else Buy[i] = 0;\n    \n    if(trailstop > 0 AND Low[i] < trailstop) {\n        Sell[i] = 1;\n        SellPrice[i] = trailstop;\n        //_TRACE("TSL Hit - Sell Signal Generated at: " + trailstop);\n        trailstop = 0;\n    }\n    \n    if(trailstop > 0) {\n        newTSL = Max(High[i] * StopLevel, trailstop);\n        if(newTSL != trailstop) {\n            //_TRACE("TSL Level Updated from " + trailstop + " to " + newTSL);\n            trailstop = newTSL;\n        }\n        trailARRAY[i] = trailstop;\n    }\n}\n\n// Execution Logic\nAlgoBuy = LastValue(Ref(Buy, -Entrydelay));\nAlgoSell = LastValue(Ref(Sell, -Exitdelay));\ncurrentTSL = RoundToTickSize(LastValue(trailARRAY), Order_TickSize);\n//_TRACE("Raw TSL: " + LastValue(trailARRAY) + ", Rounded to tick size: " + currentTSL);\n\nif(EnableAlgo == "Enable") {\n    // Print current stored OrderID\n    printf("\\nAlgo Mode Enabled");\n    storedOrderId = StaticVarGetText(static_name_orderid);\n    printf("\\nCurrent Stored OrderID: " + storedOrderId);\n    printf("\\nCurrent TSL: " + currentTSL);\n    \n    // Entry Logic\n    if(AlgoBuy AND Nz(StaticVarGet(static_name_ + "entryAlgo")) == 0) {\n        _TRACE("Buy Signal Detected - Executing Market Entry");\n        entryResponse = PlaceMarketEntry("BUY");\n        \n        if(entryResponse != "") {\n            _TRACE("Entry Order Executed Successfully");\n            if(currentTSL > 0) {\n                _TRACE("Placing Initial TSL SL-M Order at trigger: " + currentTSL);\n                tslResponse = PlaceStopLossMarketOrder("SELL", currentTSL);\n                \n                if(tslResponse != "") {\n                    orderid = ExtractJsonValue(tslResponse, "orderid", False);\n                    if(orderid != "") {\n                        StaticVarSetText(static_name_orderid, orderid);\n                        StaticVarSet(static_name_tsl, currentTSL);\n                        _TRACE("New TSL OrderID Stored: " + orderid);\n                        if(VoiceAlert == "Enable") Say("Entry and TSL Orders Placed");\n                    }\n                }\n            }\n            StaticVarSet(static_name_ + "entryAlgo", 1);\n        }\n    }\n    \n    // TSL Modification Logic\n    if(currentTSL > 0 AND currentTSL != StaticVarGet(static_name_tsl)) {\n        orderid = StaticVarGetText(static_name_orderid);\n        _TRACE("Checking TSL Order: " + orderid);\n        \n        if(orderid != "") {\n            statusResponse = CheckOrderStatus(orderid);\n            if(statusResponse != "") {\n                orderStatus = ExtractJsonValue(statusResponse, "order_status", True);\n                _TRACE("Current TSL Order Status: " + orderStatus);\n                \n                if(orderStatus == "open") {\n                    _TRACE("Modifying SL-M Order " + orderid + " trigger from " + StaticVarGet(static_name_tsl) + " to " + currentTSL);\n                    modifyResponse = ModifyStopLossMarketOrder(orderid, currentTSL);\n                    if(modifyResponse != "") {\n                        StaticVarSet(static_name_tsl, currentTSL);\n                        _TRACE("TSL Order Modified Successfully");\n                    }\n                }\n            }\n        }\n    }\n    \n    // Exit Logic\n    if(AlgoSell AND Nz(StaticVarGet(static_name_ + "exitAlgo")) == 0) {\n        orderid = StaticVarGetText(static_name_orderid);\n        _TRACE("TSL Hit - Checking Order: " + orderid);\n        \n        if(orderid != "") {\n            statusResponse = CheckOrderStatus(orderid);\n            if(statusResponse != "") {\n                orderStatus = ExtractJsonValue(statusResponse, "order_status", True);\n                _TRACE("TSL Hit - Order Status: " + orderStatus);\n                \n                if(orderStatus == "complete") {\n                    _TRACE("TSL Order " + orderid + " Executed Successfully");\n                    if(VoiceAlert == "Enable") Say("Trailing Stop Loss Hit");\n                    StaticVarSet(static_name_ + "exitAlgo", 1);\n                    // Clear the stored OrderID\n                    StaticVarSetText(static_name_orderid, "");\n                }\n            }\n        }\n    }\n}\n\nPlot(trailARRAY, "Trailing Stop Level", colorRed);\n\n_SECTION_END();\n\n_SECTION_BEGIN("Trading Signals");\n\n\n//Plot the trading signals\n\n/* Plot Buy and Sell Signal Arrows */\nPlotShapes(IIf(Buy, shapeSquare, shapeNone),colorGreen, 0, L, Offset=-40);\nPlotShapes(IIf(Buy, shapeSquare, shapeNone),colorLime, 0,L, Offset=-50);                      \nPlotShapes(IIf(Buy, shapeUpArrow, shapeNone),colorWhite, 0,L, Offset=-45); \nPlotShapes(IIf(Sell, shapeSquare, shapeNone),colorRed, 0, H, Offset=40);\nPlotShapes(IIf(Sell, shapeSquare, shapeNone),colorOrange, 0,H, Offset=50);                      \nPlotShapes(IIf(Sell, shapeDownArrow, shapeNone),colorWhite, 0,H, Offset=-45);\n\n\n\n_SECTION_END();\n\n_SECTION_BEGIN("Candlestick Charts with Date & Time Axis");\n\n//Enable the Date & Time Axis\nSetChartOptions(0, chartShowArrows | chartShowDates);\n\n//Plotting Candlestick charts\nPlot(Close,"Candle",colorDefault,styleCandle);\n\n\n_SECTION_END();\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(6540);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);