"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[6591],{8217:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"trading-platform/python/indicators/volume","title":"Volume","description":"Volume indicators analyze trading volume to assess the strength of price movements and identify potential trend changes. These indicators help determine whether price movements are supported by volume activity.","source":"@site/docs/trading-platform/python/indicators/volume.md","sourceDirName":"trading-platform/python/indicators","slug":"/trading-platform/python/indicators/volume","permalink":"/docs/trading-platform/python/indicators/volume","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/indicators/volume.md","tags":[],"version":"current","frontMatter":{}}');var i=l(4848),r=l(8453);const a={},d="Volume",o={},t=[{value:"Import Statement",id:"import-statement",level:3},{value:"Getting Sample Data",id:"getting-sample-data",level:3},{value:"On Balance Volume (OBV)",id:"on-balance-volume-obv",level:3},{value:"Usage",id:"usage",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"On Balance Volume with Smoothing (OBV Smoothed)",id:"on-balance-volume-with-smoothing-obv-smoothed",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Volume Weighted Average Price (VWAP)",id:"volume-weighted-average-price-vwap",level:3},{value:"Usage",id:"usage-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Money Flow Index (MFI)",id:"money-flow-index-mfi",level:3},{value:"Usage",id:"usage-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Accumulation/Distribution Line (ADL)",id:"accumulationdistribution-line-adl",level:3},{value:"Usage",id:"usage-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"Chaikin Money Flow (CMF)",id:"chaikin-money-flow-cmf",level:3},{value:"Usage",id:"usage-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"Ease of Movement (EMV)",id:"ease-of-movement-emv",level:3},{value:"Usage",id:"usage-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"Elder Force Index (FI)",id:"elder-force-index-fi",level:3},{value:"Usage",id:"usage-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-7",level:4},{value:"Negative Volume Index (NVI)",id:"negative-volume-index-nvi",level:3},{value:"Usage",id:"usage-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-8",level:4},{value:"Positive Volume Index (PVI)",id:"positive-volume-index-pvi",level:3},{value:"Usage",id:"usage-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example",id:"example-9",level:4},{value:"Volume Oscillator (VOLOSC)",id:"volume-oscillator-volosc",level:3},{value:"Usage",id:"usage-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example",id:"example-10",level:4},{value:"Volume Rate of Change (VROC)",id:"volume-rate-of-change-vroc",level:3},{value:"Usage",id:"usage-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Example",id:"example-11",level:4},{value:"Klinger Volume Oscillator (KVO)",id:"klinger-volume-oscillator-kvo",level:3},{value:"Usage",id:"usage-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Example",id:"example-12",level:4},{value:"Price Volume Trend (PVT)",id:"price-volume-trend-pvt",level:3},{value:"Usage",id:"usage-13",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Example",id:"example-13",level:4},{value:"Relative Volume (RVOL)",id:"relative-volume-rvol",level:3},{value:"Usage",id:"usage-14",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Example",id:"example-14",level:4},{value:"Complete Volume Analysis Example",id:"complete-volume-analysis-example",level:3},{value:"Volume Analysis Interpretation",id:"volume-analysis-interpretation",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"volume",children:"Volume"})}),"\n",(0,i.jsx)(n.p,{children:"Volume indicators analyze trading volume to assess the strength of price movements and identify potential trend changes. These indicators help determine whether price movements are supported by volume activity."}),"\n",(0,i.jsx)(n.h3,{id:"import-statement",children:"Import Statement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from openalgo import ta, api\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getting-sample-data",children:"Getting Sample Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Initialize API client\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\n\n# Fetch historical data\ndf = client.history(symbol=\"SBIN\", \n                   exchange=\"NSE\", \n                   interval=\"5m\", \n                   start_date=\"2025-04-01\", \n                   end_date=\"2025-04-08\")\n\n# Extract OHLCV data\nhigh = df['high']\nlow = df['low'] \nclose = df['close']\nopen_price = df['open']\nvolume = df['volume']\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"on-balance-volume-obv",children:"On Balance Volume (OBV)"}),"\n",(0,i.jsx)(n.p,{children:"OBV is a momentum indicator that uses volume flow to predict changes in stock price by adding volume on up days and subtracting volume on down days."}),"\n",(0,i.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"obv = ta.obv(close, volume)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": OBV values with same index as input"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate OBV\nobv_values = ta.obv(df['close'], df['volume'])\n\n# Add to DataFrame\ndf['OBV'] = obv_values\n\nprint(df[['close', 'volume', 'OBV']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"on-balance-volume-with-smoothing-obv-smoothed",children:"On Balance Volume with Smoothing (OBV Smoothed)"}),"\n",(0,i.jsx)(n.p,{children:"Enhanced OBV with various smoothing options including moving averages and Bollinger Bands support."}),"\n",(0,i.jsx)(n.h4,{id:"usage-1",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Basic smoothed OBV\nobv_smoothed = ta.obv_smoothed(close, volume, ma_type="SMA", ma_length=20)\n\n# With Bollinger Bands\nobv_bb_middle, obv_bb_upper, obv_bb_lower = ta.obv_smoothed(\n    close, volume, ma_type="SMA + Bollinger Bands", bb_length=20, bb_mult=2.0\n)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ma_type"})," ",(0,i.jsx)(n.em,{children:'(str, default="None")'}),': Smoothing type - "None", "SMA", "SMA + Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ma_length"})," ",(0,i.jsx)(n.em,{children:"(int, default=20)"}),": Moving average length"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"bb_length"})," ",(0,i.jsx)(n.em,{children:"(int, default=20)"}),": Bollinger Bands length"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"bb_mult"})," ",(0,i.jsx)(n.em,{children:"(float, default=2.0)"}),": Bollinger Bands multiplier"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": Smoothed OBV values (for most ma_types)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tuple"}),': (middle, upper, lower) for "SMA + Bollinger Bands"']}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate various OBV smoothing options\nobv_sma = ta.obv_smoothed(df['close'], df['volume'], ma_type=\"SMA\", ma_length=20)\nobv_ema = ta.obv_smoothed(df['close'], df['volume'], ma_type=\"EMA\", ma_length=20)\n\n# OBV with Bollinger Bands\nobv_bb_mid, obv_bb_up, obv_bb_low = ta.obv_smoothed(\n    df['close'], df['volume'], ma_type=\"SMA + Bollinger Bands\"\n)\n\ndf['OBV_SMA'] = obv_sma\ndf['OBV_EMA'] = obv_ema\ndf['OBV_BB_Mid'] = obv_bb_mid\ndf['OBV_BB_Upper'] = obv_bb_up\ndf['OBV_BB_Lower'] = obv_bb_low\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"volume-weighted-average-price-vwap",children:"Volume Weighted Average Price (VWAP)"}),"\n",(0,i.jsx)(n.p,{children:"VWAP is the average price a security has traded at throughout the day, based on both volume and price, giving more weight to prices with higher volume."}),"\n",(0,i.jsx)(n.h4,{id:"usage-2",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'vwap = ta.vwap(high, low, close, volume, source="hlc3", anchor="Session")\n'})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"source"})," ",(0,i.jsx)(n.em,{children:'(str, default="hlc3")'}),': Price source - "hlc3", "hl2", "ohlc4", "close"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"anchor"})," ",(0,i.jsx)(n.em,{children:'(str, default="Session")'}),': Anchor period - "Session", "Week", "Month", etc.']}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": VWAP values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate VWAP\nvwap_values = ta.vwap(df['high'], df['low'], df['close'], df['volume'])\n\n# VWAP with different source\nvwap_close = ta.vwap(df['high'], df['low'], df['close'], df['volume'], source=\"close\")\n\ndf['VWAP'] = vwap_values\ndf['VWAP_Close'] = vwap_close\n\nprint(df[['close', 'VWAP', 'VWAP_Close']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"money-flow-index-mfi",children:"Money Flow Index (MFI)"}),"\n",(0,i.jsx)(n.p,{children:"MFI is a momentum indicator that uses both price and volume to measure buying and selling pressure. Also known as Volume-Weighted RSI."}),"\n",(0,i.jsx)(n.h4,{id:"usage-3",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"mfi = ta.mfi(high, low, close, volume, period=14)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"period"})," ",(0,i.jsx)(n.em,{children:"(int, default=14)"}),": Number of periods for MFI calculation"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": MFI values (range: 0 to 100)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate MFI with default period\nmfi_14 = ta.mfi(df['high'], df['low'], df['close'], df['volume'])\n\n# Calculate MFI with different period\nmfi_21 = ta.mfi(df['high'], df['low'], df['close'], df['volume'], period=21)\n\ndf['MFI_14'] = mfi_14\ndf['MFI_21'] = mfi_21\n\nprint(df[['close', 'volume', 'MFI_14']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"accumulationdistribution-line-adl",children:"Accumulation/Distribution Line (ADL)"}),"\n",(0,i.jsx)(n.p,{children:"ADL is a volume-based indicator designed to measure the cumulative flow of money into and out of a security."}),"\n",(0,i.jsx)(n.h4,{id:"usage-4",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"adl = ta.adl(high, low, close, volume)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": ADL values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Accumulation/Distribution Line\nadl_values = ta.adl(df['high'], df['low'], df['close'], df['volume'])\n\ndf['ADL'] = adl_values\n\nprint(df[['close', 'volume', 'ADL']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"chaikin-money-flow-cmf",children:"Chaikin Money Flow (CMF)"}),"\n",(0,i.jsx)(n.p,{children:"CMF is the sum of Money Flow Volume over a period divided by the sum of volume over the same period."}),"\n",(0,i.jsx)(n.h4,{id:"usage-5",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"cmf = ta.cmf(high, low, close, volume, period=20)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"period"})," ",(0,i.jsx)(n.em,{children:"(int, default=20)"}),": Number of periods for CMF calculation"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": CMF values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Chaikin Money Flow\ncmf_20 = ta.cmf(df['high'], df['low'], df['close'], df['volume'])\n\n# CMF with different period\ncmf_10 = ta.cmf(df['high'], df['low'], df['close'], df['volume'], period=10)\n\ndf['CMF_20'] = cmf_20\ndf['CMF_10'] = cmf_10\n\nprint(df[['close', 'CMF_20']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"ease-of-movement-emv",children:"Ease of Movement (EMV)"}),"\n",(0,i.jsx)(n.p,{children:"EMV relates price change to volume and is particularly useful for assessing the strength of a trend."}),"\n",(0,i.jsx)(n.h4,{id:"usage-6",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"emv = ta.emv(high, low, volume, length=14, divisor=10000)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"length"})," ",(0,i.jsx)(n.em,{children:"(int, default=14)"}),": Period for SMA smoothing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"divisor"})," ",(0,i.jsx)(n.em,{children:"(int, default=10000)"}),": Divisor for scaling EMV values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": EMV values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Ease of Movement\nemv_14 = ta.emv(df['high'], df['low'], df['volume'])\n\n# EMV with custom parameters\nemv_custom = ta.emv(df['high'], df['low'], df['volume'], length=21, divisor=50000)\n\ndf['EMV_14'] = emv_14\ndf['EMV_Custom'] = emv_custom\n\nprint(df[['close', 'volume', 'EMV_14']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"elder-force-index-fi",children:"Elder Force Index (FI)"}),"\n",(0,i.jsx)(n.p,{children:"Force Index combines price and volume to assess the power used to move the price of an asset."}),"\n",(0,i.jsx)(n.h4,{id:"usage-7",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"fi = ta.force_index(close, volume, length=13)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"length"})," ",(0,i.jsx)(n.em,{children:"(int, default=13)"}),": Period for EMA smoothing"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": Elder Force Index values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Elder Force Index\nfi_13 = ta.force_index(df['close'], df['volume'])\n\n# Force Index with different period\nfi_21 = ta.force_index(df['close'], df['volume'], length=21)\n\ndf['Force_Index_13'] = fi_13\ndf['Force_Index_21'] = fi_21\n\nprint(df[['close', 'volume', 'Force_Index_13']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"negative-volume-index-nvi",children:"Negative Volume Index (NVI)"}),"\n",(0,i.jsx)(n.p,{children:"NVI focuses on days when volume decreases from the previous day, using cumulative rate of change."}),"\n",(0,i.jsx)(n.h4,{id:"usage-8",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Basic NVI\nnvi = ta.nvi(close, volume)\n\n# NVI with EMA signal line\nnvi, nvi_ema = ta.nvi_with_ema(close, volume, ema_length=255)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ema_length"})," ",(0,i.jsx)(n.em,{children:"(int, default=255)"}),": EMA period for signal line"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": NVI values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tuple"}),": (nvi, nvi_ema) for nvi_with_ema method"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate NVI\nnvi_values = ta.nvi(df['close'], df['volume'])\n\n# Calculate NVI with EMA signal\nnvi_line, nvi_signal = ta.nvi_with_ema(df['close'], df['volume'])\n\ndf['NVI'] = nvi_values\ndf['NVI_Line'] = nvi_line\ndf['NVI_Signal'] = nvi_signal\n\nprint(df[['close', 'volume', 'NVI']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"positive-volume-index-pvi",children:"Positive Volume Index (PVI)"}),"\n",(0,i.jsx)(n.p,{children:"PVI focuses on days when volume increases from the previous day."}),"\n",(0,i.jsx)(n.h4,{id:"usage-9",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Basic PVI\npvi = ta.pvi(close, volume, initial_value=100.0)\n\n# PVI with signal line\npvi, pvi_signal = ta.pvi_with_signal(close, volume, signal_type="EMA", signal_length=255)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"initial_value"})," ",(0,i.jsx)(n.em,{children:"(float, default=100.0)"}),": Initial PVI value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"signal_type"})," ",(0,i.jsx)(n.em,{children:'(str, default="EMA")'}),': Signal smoothing type ("EMA" or "SMA")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"signal_length"})," ",(0,i.jsx)(n.em,{children:"(int, default=255)"}),": Signal line period"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": PVI values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tuple"}),": (pvi, signal) for pvi_with_signal method"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-9",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate PVI\npvi_values = ta.pvi(df['close'], df['volume'])\n\n# Calculate PVI with signal line\npvi_line, pvi_signal = ta.pvi_with_signal(df['close'], df['volume'])\n\ndf['PVI'] = pvi_values\ndf['PVI_Line'] = pvi_line\ndf['PVI_Signal'] = pvi_signal\n\nprint(df[['close', 'volume', 'PVI']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"volume-oscillator-volosc",children:"Volume Oscillator (VOLOSC)"}),"\n",(0,i.jsx)(n.p,{children:"Volume Oscillator shows the relationship between two exponential moving averages of volume."}),"\n",(0,i.jsx)(n.h4,{id:"usage-10",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"vo = ta.volosc(volume, short_length=5, long_length=10)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"short_length"})," ",(0,i.jsx)(n.em,{children:"(int, default=5)"}),": Short EMA length"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"long_length"})," ",(0,i.jsx)(n.em,{children:"(int, default=10)"}),": Long EMA length"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"check_volume_validity"})," ",(0,i.jsx)(n.em,{children:"(bool, default=True)"}),": Check for valid volume data"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": Volume Oscillator values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-10",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Volume Oscillator\nvo_5_10 = ta.volosc(df['volume'])\n\n# Volume Oscillator with custom periods\nvo_3_15 = ta.volosc(df['volume'], short_length=3, long_length=15)\n\ndf['VO_5_10'] = vo_5_10\ndf['VO_3_15'] = vo_3_15\n\nprint(df[['volume', 'VO_5_10']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"volume-rate-of-change-vroc",children:"Volume Rate of Change (VROC)"}),"\n",(0,i.jsx)(n.p,{children:"VROC measures the rate of change in volume over a specified period."}),"\n",(0,i.jsx)(n.h4,{id:"usage-11",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"vroc = ta.vroc(volume, period=25)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"period"})," ",(0,i.jsx)(n.em,{children:"(int, default=25)"}),": Number of periods to look back"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": VROC values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-11",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Volume Rate of Change\nvroc_25 = ta.vroc(df['volume'])\n\n# VROC with different period\nvroc_12 = ta.vroc(df['volume'], period=12)\n\ndf['VROC_25'] = vroc_25\ndf['VROC_12'] = vroc_12\n\nprint(df[['volume', 'VROC_25']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"klinger-volume-oscillator-kvo",children:"Klinger Volume Oscillator (KVO)"}),"\n",(0,i.jsx)(n.p,{children:"KVO is designed to predict price reversals by comparing volume to price movement."}),"\n",(0,i.jsx)(n.h4,{id:"usage-12",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"kvo, kvo_trigger = ta.kvo(high, low, close, volume, trig_len=13, fast_x=34, slow_x=55)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"high"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": High prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"low"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Low prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"trig_len"})," ",(0,i.jsx)(n.em,{children:"(int, default=13)"}),": Trigger line EMA period"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"fast_x"})," ",(0,i.jsx)(n.em,{children:"(int, default=34)"}),": Fast EMA period"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"slow_x"})," ",(0,i.jsx)(n.em,{children:"(int, default=55)"}),": Slow EMA period"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tuple"}),": (kvo, trigger) pandas.Series"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-12",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Klinger Volume Oscillator\nkvo_line, kvo_trigger = ta.kvo(df['high'], df['low'], df['close'], df['volume'])\n\n# KVO with custom parameters\nkvo_custom, kvo_trig_custom = ta.kvo(df['high'], df['low'], df['close'], df['volume'], \n                                    trig_len=9, fast_x=21, slow_x=34)\n\ndf['KVO'] = kvo_line\ndf['KVO_Trigger'] = kvo_trigger\n\nprint(df[['close', 'volume', 'KVO', 'KVO_Trigger']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"price-volume-trend-pvt",children:"Price Volume Trend (PVT)"}),"\n",(0,i.jsx)(n.p,{children:"PVT combines price and volume to show cumulative volume based on price changes."}),"\n",(0,i.jsx)(n.h4,{id:"usage-13",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"pvt = ta.pvt(close, volume)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"close"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Closing prices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": PVT values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-13",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Price Volume Trend\npvt_values = ta.pvt(df['close'], df['volume'])\n\ndf['PVT'] = pvt_values\n\nprint(df[['close', 'volume', 'PVT']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"relative-volume-rvol",children:"Relative Volume (RVOL)"}),"\n",(0,i.jsx)(n.p,{children:"RVOL compares current volume to average volume over a specified period."}),"\n",(0,i.jsx)(n.h4,{id:"usage-14",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"rvol = ta.rvol(volume, period=20)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"volume"})," ",(0,i.jsx)(n.em,{children:"(pandas.Series)"}),": Volume data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"period"})," ",(0,i.jsx)(n.em,{children:"(int, default=20)"}),": Period for average volume calculation"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pandas.Series"}),": RVOL values"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-14",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Calculate Relative Volume\nrvol_20 = ta.rvol(df['volume'])\n\n# RVOL with different period\nrvol_10 = ta.rvol(df['volume'], period=10)\n\ndf['RVOL_20'] = rvol_20\ndf['RVOL_10'] = rvol_10\n\nprint(df[['volume', 'RVOL_20']].tail())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"complete-volume-analysis-example",children:"Complete Volume Analysis Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from openalgo import ta, api\nimport pandas as pd\n\n# Get data\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\ndf = client.history(symbol=\"SBIN\", exchange=\"NSE\", interval=\"5m\", \n                   start_date=\"2025-04-01\", end_date=\"2025-04-08\")\n\n# Calculate multiple volume indicators\ndf['OBV'] = ta.obv(df['close'], df['volume'])\ndf['VWAP'] = ta.vwap(df['high'], df['low'], df['close'], df['volume'])\ndf['MFI'] = ta.mfi(df['high'], df['low'], df['close'], df['volume'])\ndf['ADL'] = ta.adl(df['high'], df['low'], df['close'], df['volume'])\ndf['CMF'] = ta.cmf(df['high'], df['low'], df['close'], df['volume'])\ndf['EMV'] = ta.emv(df['high'], df['low'], df['volume'])\ndf['Force_Index'] = ta.force_index(df['close'], df['volume'])\ndf['Volume_Osc'] = ta.volosc(df['volume'])\ndf['PVT'] = ta.pvt(df['close'], df['volume'])\ndf['RVOL'] = ta.rvol(df['volume'])\n\n# KVO requires multiple returns\ndf['KVO'], df['KVO_Trigger'] = ta.kvo(df['high'], df['low'], df['close'], df['volume'])\n\n# Display results\nvolume_indicators = ['close', 'volume', 'OBV', 'VWAP', 'MFI', 'ADL', 'CMF', \n                    'EMV', 'Force_Index', 'Volume_Osc', 'PVT', 'RVOL', 'KVO']\n\nprint(\"Volume Indicators Analysis:\")\nprint(df[volume_indicators].tail(10))\n\n# Volume analysis summary\nprint(\"\\nVolume Indicators Summary (Last Period):\")\nlast_row = df.iloc[-1]\nprint(f\"Close Price: {last_row['close']:.2f}\")\nprint(f\"Volume: {last_row['volume']:,}\")\nprint(f\"VWAP: {last_row['VWAP']:.2f}\")\nprint(f\"MFI: {last_row['MFI']:.2f}\")\nprint(f\"Relative Volume: {last_row['RVOL']:.2f}\")\nprint(f\"Volume Oscillator: {last_row['Volume_Osc']:.2f}\")\n"})}),"\n",(0,i.jsx)(n.h3,{id:"volume-analysis-interpretation",children:"Volume Analysis Interpretation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OBV"}),": Rising OBV confirms uptrend, falling OBV confirms downtrend"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"VWAP"}),": Price above VWAP suggests bullish momentum, below suggests bearish"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MFI"}),": Values above 80 indicate overbought, below 20 indicate oversold"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ADL"}),": Rising ADL confirms price uptrend with strong accumulation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CMF"}),": Positive values indicate buying pressure, negative indicate selling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Volume Oscillator"}),": Positive values show increasing volume momentum"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Relative Volume"}),": Values above 1.0 indicate higher than average volume"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>a,x:()=>d});var s=l(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);