"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[5102],{2910:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"trading-platform/python/indicators/utility","title":"Utility","description":"OpenAlgo Utility Indicators Documentation","source":"@site/docs/trading-platform/python/indicators/utility.md","sourceDirName":"trading-platform/python/indicators","slug":"/trading-platform/python/indicators/utility","permalink":"/docs/trading-platform/python/indicators/utility","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/python/indicators/utility.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Trend","permalink":"/docs/trading-platform/python/indicators/trend"},"next":{"title":"Volatility","permalink":"/docs/trading-platform/python/indicators/volatility"}}');var r=s(4848),l=s(8453);const a={},t="Utility",o={},c=[{value:"OpenAlgo Utility Indicators Documentation",id:"openalgo-utility-indicators-documentation",level:2},{value:"Import Statement",id:"import-statement",level:3},{value:"Sample Data Setup",id:"sample-data-setup",level:3},{value:"Signal Detection Utilities",id:"signal-detection-utilities",level:3},{value:"Crossover",id:"crossover",level:4},{value:"Crossunder",id:"crossunder",level:4},{value:"Cross",id:"cross",level:4},{value:"Range and Extremes",id:"range-and-extremes",level:3},{value:"Highest",id:"highest",level:4},{value:"Lowest",id:"lowest",level:4},{value:"Change and Rate Calculations",id:"change-and-rate-calculations",level:3},{value:"Change",id:"change",level:4},{value:"Rate of Change (ROC)",id:"rate-of-change-roc",level:4},{value:"Statistical Utilities",id:"statistical-utilities",level:3},{value:"Standard Deviation",id:"standard-deviation",level:4},{value:"Trend Direction Utilities",id:"trend-direction-utilities",level:3},{value:"Rising",id:"rising",level:4},{value:"Falling",id:"falling",level:4},{value:"Advanced Signal Processing",id:"advanced-signal-processing",level:3},{value:"Excess Removal (ExRem)",id:"excess-removal-exrem",level:4},{value:"Flip",id:"flip",level:4},{value:"Value When",id:"value-when",level:4},{value:"Complete Utility Example: Trading Signal System",id:"complete-utility-example-trading-signal-system",level:3},{value:"Best Practices for Utility Functions",id:"best-practices-for-utility-functions",level:3},{value:"Common Signal Patterns",id:"common-signal-patterns",level:3}];function d(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"utility",children:"Utility"})}),"\n",(0,r.jsx)(e.h2,{id:"openalgo-utility-indicators-documentation",children:"OpenAlgo Utility Indicators Documentation"}),"\n",(0,r.jsx)(e.p,{children:"Utility indicators provide essential market analysis functions for signal detection, condition checking, and mathematical operations. These functions are fundamental building blocks for creating trading strategies and market analysis systems."}),"\n",(0,r.jsx)(e.h3,{id:"import-statement",children:"Import Statement"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from openalgo import ta, api\n"})}),"\n",(0,r.jsx)(e.h3,{id:"sample-data-setup",children:"Sample Data Setup"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Initialize API client\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\n\n# Fetch historical data\ndf = client.history(symbol=\"SBIN\", \n                   exchange=\"NSE\", \n                   interval=\"5m\", \n                   start_date=\"2025-04-01\", \n                   end_date=\"2025-04-08\")\n\n# Extract price series\nclose = df['close']\nhigh = df['high']\nlow = df['low']\nopen_prices = df['open']\nvolume = df['volume']\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"signal-detection-utilities",children:"Signal Detection Utilities"}),"\n",(0,r.jsx)(e.h4,{id:"crossover",children:"Crossover"}),"\n",(0,r.jsx)(e.p,{children:"Detects when one series crosses above another series. Essential for identifying bullish signal points."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"crossover_signals = ta.crossover(series1, series2)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"series1"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": First series (typically fast indicator)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"series2"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Second series (typically slow indicator)"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Boolean array indicating crossover points (True where crossover occurs)"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Calculate moving averages\nsma_10 = ta.sma(close, 10)\nsma_20 = ta.sma(close, 20)\n\n# Detect when SMA(10) crosses above SMA(20)\nbullish_signals = ta.crossover(sma_10, sma_20)\n\n# Find crossover points\ncrossover_points = df[bullish_signals]\nprint(\"Bullish crossover signals:\")\nprint(crossover_points[['close']].head())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h4,{id:"crossunder",children:"Crossunder"}),"\n",(0,r.jsx)(e.p,{children:"Detects when one series crosses below another series. Used for identifying bearish signal points."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"crossunder_signals = ta.crossunder(series1, series2)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"series1"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": First series (typically fast indicator)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"series2"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Second series (typically slow indicator)"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Boolean array indicating crossunder points (True where crossunder occurs)"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Detect when SMA(10) crosses below SMA(20)\nbearish_signals = ta.crossunder(sma_10, sma_20)\n\n# Find crossunder points\ncrossunder_points = df[bearish_signals]\nprint(\"Bearish crossunder signals:\")\nprint(crossunder_points[['close']].head())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h4,{id:"cross",children:"Cross"}),"\n",(0,r.jsx)(e.p,{children:"Detects when one series crosses another in either direction (combines crossover and crossunder)."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"cross_signals = ta.cross(series1, series2)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"series1"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": First series"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"series2"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Second series"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Boolean array indicating any cross points (both over and under)"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Detect any crossing between price and moving average\nprice_ma_cross = ta.cross(close, sma_20)\n\n# Find all crossing points\nall_crosses = df[price_ma_cross]\nprint(\"All price/MA crossing points:\")\nprint(all_crosses[['close']].head())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"range-and-extremes",children:"Range and Extremes"}),"\n",(0,r.jsx)(e.h4,{id:"highest",children:"Highest"}),"\n",(0,r.jsx)(e.p,{children:"Finds the highest value over a rolling window."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"highest_values = ta.highest(data, period)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"data"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Input data series"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"period"})," ",(0,r.jsx)(e.em,{children:"(int)"}),": Window size for finding highest value"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Array of highest values over the specified period"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Find highest high over last 20 periods\nhighest_20 = ta.highest(high, 20)\n\n# Create resistance levels\ndf['Resistance_20'] = highest_20\nprint(\"Recent resistance levels:\")\nprint(df[['high', 'Resistance_20']].tail())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h4,{id:"lowest",children:"Lowest"}),"\n",(0,r.jsx)(e.p,{children:"Finds the lowest value over a rolling window."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"lowest_values = ta.lowest(data, period)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"data"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Input data series"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"period"})," ",(0,r.jsx)(e.em,{children:"(int)"}),": Window size for finding lowest value"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Array of lowest values over the specified period"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Find lowest low over last 20 periods\nlowest_20 = ta.lowest(low, 20)\n\n# Create support levels\ndf['Support_20'] = lowest_20\nprint(\"Recent support levels:\")\nprint(df[['low', 'Support_20']].tail())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"change-and-rate-calculations",children:"Change and Rate Calculations"}),"\n",(0,r.jsx)(e.h4,{id:"change",children:"Change"}),"\n",(0,r.jsx)(e.p,{children:"Calculates the change in value over a specified number of periods."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"change_values = ta.change(data, length=1)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"data"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Input data series"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"length"})," ",(0,r.jsx)(e.em,{children:"(int, default=1)"}),": Number of periods to look back"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Array of change values"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Calculate 1-period change (price difference)\nprice_change_1 = ta.change(close, 1)\n\n# Calculate 5-period change\nprice_change_5 = ta.change(close, 5)\n\n# Add to dataframe\ndf['Change_1'] = price_change_1\ndf['Change_5'] = price_change_5\nprint(\"Price changes:\")\nprint(df[['close', 'Change_1', 'Change_5']].tail())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h4,{id:"rate-of-change-roc",children:"Rate of Change (ROC)"}),"\n",(0,r.jsx)(e.p,{children:"Calculates the rate of change as a percentage."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"roc_values = ta.roc(data, length)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"data"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Input data series"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"length"})," ",(0,r.jsx)(e.em,{children:"(int)"}),": Number of periods to look back"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Array of ROC values as percentages"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Calculate 10-period rate of change\nroc_10 = ta.roc(close, 10)\n\n# Calculate 20-period rate of change\nroc_20 = ta.roc(close, 20)\n\ndf['ROC_10'] = roc_10\ndf['ROC_20'] = roc_20\nprint(\"Rate of change analysis:\")\nprint(df[['close', 'ROC_10', 'ROC_20']].tail())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"statistical-utilities",children:"Statistical Utilities"}),"\n",(0,r.jsx)(e.h4,{id:"standard-deviation",children:"Standard Deviation"}),"\n",(0,r.jsx)(e.p,{children:"Calculates rolling standard deviation for volatility measurement."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"stdev_values = ta.stdev(data, period)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"data"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Input data series"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"period"})," ",(0,r.jsx)(e.em,{children:"(int)"}),": Window size for standard deviation calculation"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Array of standard deviation values"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Calculate 20-period standard deviation\nvolatility_20 = ta.stdev(close, 20)\n\n# Calculate relative volatility\nrelative_volatility = volatility_20 / close * 100\n\ndf['Volatility_20'] = volatility_20\ndf['Rel_Volatility'] = relative_volatility\nprint(\"Volatility analysis:\")\nprint(df[['close', 'Volatility_20', 'Rel_Volatility']].tail())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"trend-direction-utilities",children:"Trend Direction Utilities"}),"\n",(0,r.jsx)(e.h4,{id:"rising",children:"Rising"}),"\n",(0,r.jsx)(e.p,{children:"Checks if data is rising (current value > value n periods ago)."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"rising_condition = ta.rising(data, length)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"data"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Input data series"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"length"})," ",(0,r.jsx)(e.em,{children:"(int)"}),": Number of periods to look back"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Boolean array indicating rising periods"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Check if price is rising over 5 periods\nprice_rising_5 = ta.rising(close, 5)\n\n# Check if volume is rising over 3 periods\nvolume_rising_3 = ta.rising(volume, 3)\n\n# Combine conditions for strong bullish signal\nstrong_bullish = price_rising_5 & volume_rising_3\n\ndf['Price_Rising_5'] = price_rising_5\ndf['Volume_Rising_3'] = volume_rising_3\ndf['Strong_Bullish'] = strong_bullish\n\nprint(\"Rising trend analysis:\")\nprint(df[['close', 'volume', 'Price_Rising_5', 'Volume_Rising_3', 'Strong_Bullish']].tail())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h4,{id:"falling",children:"Falling"}),"\n",(0,r.jsx)(e.p,{children:"Checks if data is falling (current value < value n periods ago)."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"falling_condition = ta.falling(data, length)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"data"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Input data series"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"length"})," ",(0,r.jsx)(e.em,{children:"(int)"}),": Number of periods to look back"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Boolean array indicating falling periods"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Check if price is falling over 5 periods\nprice_falling_5 = ta.falling(close, 5)\n\n# Check if price is falling but volume is rising (potential reversal)\npotential_reversal = price_falling_5 & volume_rising_3\n\ndf['Price_Falling_5'] = price_falling_5\ndf['Potential_Reversal'] = potential_reversal\n\nprint(\"Falling trend analysis:\")\nprint(df[['close', 'Price_Falling_5', 'Potential_Reversal']].tail())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"advanced-signal-processing",children:"Advanced Signal Processing"}),"\n",(0,r.jsx)(e.h4,{id:"excess-removal-exrem",children:"Excess Removal (ExRem)"}),"\n",(0,r.jsx)(e.p,{children:"Eliminates excessive signals by ensuring alternating signal types."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"filtered_signals = ta.exrem(primary_signals, secondary_signals)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"primary_signals"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Primary signal array (boolean-like)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"secondary_signals"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Secondary signal array (boolean-like)"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Boolean array with excess signals removed"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Generate buy and sell signals\nbuy_signals = ta.crossover(sma_10, sma_20)\nsell_signals = ta.crossunder(sma_10, sma_20)\n\n# Remove excessive buy signals (only allow buy after sell)\nfiltered_buys = ta.exrem(buy_signals, sell_signals)\n\n# Remove excessive sell signals (only allow sell after buy)\nfiltered_sells = ta.exrem(sell_signals, buy_signals)\n\ndf['Raw_Buy'] = buy_signals\ndf['Raw_Sell'] = sell_signals\ndf['Filtered_Buy'] = filtered_buys\ndf['Filtered_Sell'] = filtered_sells\n\nprint(\"Signal filtering comparison:\")\nprint(df[['close', 'Raw_Buy', 'Raw_Sell', 'Filtered_Buy', 'Filtered_Sell']].tail(20))\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h4,{id:"flip",children:"Flip"}),"\n",(0,r.jsx)(e.p,{children:"Creates a toggle state based on two signals."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"state_array = ta.flip(primary_signals, secondary_signals)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"primary_signals"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Primary signal array (boolean-like)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"secondary_signals"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Secondary signal array (boolean-like)"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Boolean array representing flip state"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Create a position state indicator\nposition_state = ta.flip(filtered_buys, filtered_sells)\n\n# Calculate position returns\ndf['Position_State'] = position_state\ndf['Daily_Return'] = close.pct_change()\ndf['Strategy_Return'] = df['Daily_Return'] * df['Position_State'].shift(1)\n\nprint(\"Position state analysis:\")\nprint(df[['close', 'Position_State', 'Daily_Return', 'Strategy_Return']].tail())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h4,{id:"value-when",children:"Value When"}),"\n",(0,r.jsx)(e.p,{children:"Returns the value of an array when a condition was true for the nth most recent time."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"conditional_values = ta.valuewhen(condition_array, value_array, n=1)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"condition_array"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Expression array (boolean-like)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"value_array"})," ",(0,r.jsx)(e.em,{children:"(array-like)"}),": Value array to sample from"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"n"})," ",(0,r.jsx)(e.em,{children:"(int, default=1)"}),": Which occurrence to get (1 = most recent)"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"array"}),": Array of values when condition was true"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Get the close price when buy signals occurred\nbuy_prices = ta.valuewhen(filtered_buys, close, 1)\n\n# Get the close price from 2 buy signals ago\nprevious_buy_prices = ta.valuewhen(filtered_buys, close, 2)\n\n# Calculate profit potential from last buy\nprofit_potential = (close - buy_prices) / buy_prices * 100\n\ndf['Last_Buy_Price'] = buy_prices\ndf['Profit_Potential'] = profit_potential\n\nprint(\"Buy price tracking:\")\nprint(df[['close', 'Filtered_Buy', 'Last_Buy_Price', 'Profit_Potential']].tail())\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"complete-utility-example-trading-signal-system",children:"Complete Utility Example: Trading Signal System"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nfrom openalgo import ta, api\n\n# Fetch data\nclient = api(api_key='your_api_key_here', host='http://127.0.0.1:5000')\ndf = client.history(symbol=\"SBIN\", exchange=\"NSE\", interval=\"5m\", \n                   start_date=\"2025-04-01\", end_date=\"2025-04-08\")\n\nclose = df['close']\nhigh = df['high']\nlow = df['low']\nvolume = df['volume']\n\n# Calculate indicators\nsma_10 = ta.sma(close, 10)\nsma_20 = ta.sma(close, 20)\nrsi = ta.rsi(close, 14)\n\n# Generate basic signals\nma_bullish = ta.crossover(sma_10, sma_20)\nma_bearish = ta.crossunder(sma_10, sma_20)\n\n# Add conditions for signal quality\nprice_rising = ta.rising(close, 3)\nvolume_rising = ta.rising(volume, 3)\nvolatility = ta.stdev(close, 20)\nroc_5 = ta.roc(close, 5)\n\n# Enhanced signal conditions\nstrong_bullish = ma_bullish & price_rising & volume_rising & (rsi < 70)\nstrong_bearish = ma_bearish & ta.falling(close, 3) & (rsi > 30)\n\n# Filter signals to avoid excessive entries\nfiltered_long = ta.exrem(strong_bullish, strong_bearish)\nfiltered_short = ta.exrem(strong_bearish, strong_bullish)\n\n# Create position state\nposition_long = ta.flip(filtered_long, filtered_short)\n\n# Track entry prices and stops\nentry_prices = ta.valuewhen(filtered_long, close, 1)\nstop_levels = ta.lowest(low, 10)\n\n# Calculate unrealized P&L for long positions\nunrealized_pnl = ((close - entry_prices) / entry_prices * 100) * position_long\n\n# Combine all analysis\ndf_analysis = pd.DataFrame({\n    'Close': close,\n    'SMA_10': sma_10,\n    'SMA_20': sma_20,\n    'RSI': rsi,\n    'ROC_5': roc_5,\n    'Volatility': volatility,\n    'Strong_Bullish': strong_bullish,\n    'Strong_Bearish': strong_bearish,\n    'Filtered_Long': filtered_long,\n    'Filtered_Short': filtered_short,\n    'Position_Long': position_long,\n    'Entry_Price': entry_prices,\n    'Stop_Level': stop_levels,\n    'Unrealized_PnL': unrealized_pnl\n})\n\n# Display signal summary\nprint(\"=== Trading Signal Analysis ===\")\nprint(f\"Total Long Signals: {filtered_long.sum()}\")\nprint(f\"Total Short Signals: {filtered_short.sum()}\")\nprint(f\"Current Position: {'LONG' if position_long.iloc[-1] else 'FLAT'}\")\n\nif position_long.iloc[-1]:\n    print(f\"Entry Price: {entry_prices.iloc[-1]:.2f}\")\n    print(f\"Current Price: {close.iloc[-1]:.2f}\")\n    print(f\"Unrealized P&L: {unrealized_pnl.iloc[-1]:.2f}%\")\n    print(f\"Stop Level: {stop_levels.iloc[-1]:.2f}\")\n\nprint(\"\\nRecent signals:\")\nsignal_points = df_analysis[filtered_long | filtered_short].tail()\nprint(signal_points[['Close', 'RSI', 'Filtered_Long', 'Filtered_Short']])\n"})}),"\n",(0,r.jsx)(e.h3,{id:"best-practices-for-utility-functions",children:"Best Practices for Utility Functions"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Signal Filtering"}),": Always use ",(0,r.jsx)(e.code,{children:"exrem()"})," to filter excessive signals"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"State Management"}),": Use ",(0,r.jsx)(e.code,{children:"flip()"})," to maintain position states"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Condition Combining"}),": Combine multiple utilities for robust signal generation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Historical Reference"}),": Use ",(0,r.jsx)(e.code,{children:"valuewhen()"})," to track important price levels"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Trend Confirmation"}),": Use ",(0,r.jsx)(e.code,{children:"rising()"})," and ",(0,r.jsx)(e.code,{children:"falling()"})," to confirm trend direction"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"common-signal-patterns",children:"Common Signal Patterns"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Momentum Confirmation"}),": ",(0,r.jsx)(e.code,{children:"crossover() + rising() + volume_confirmation"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Reversal Detection"}),": ",(0,r.jsx)(e.code,{children:"falling() + oversold_condition + volume_spike"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Breakout Validation"}),": ",(0,r.jsx)(e.code,{children:"cross() + highest()/lowest() + volatility_expansion"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Trend Following"}),": ",(0,r.jsx)(e.code,{children:"flip() + moving_average_alignment + momentum_filter"})]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>t});var i=s(6540);const r={},l=i.createContext(r);function a(n){const e=i.useContext(l);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);