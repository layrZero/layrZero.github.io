"use strict";(self.webpackChunkscaffold=self.webpackChunkscaffold||[]).push([[6807],{185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"trading-platform/metatrader-5/sample-expert-advisor","title":"Sample Expert Advisor","description":"Here is a sample EMA Crossover Based Simple Expert Advisor which places orders to OpenAlgo Connected Brokers","source":"@site/docs/trading-platform/metatrader-5/sample-expert-advisor.md","sourceDirName":"trading-platform/metatrader-5","slug":"/trading-platform/metatrader-5/sample-expert-advisor","permalink":"/docs/trading-platform/metatrader-5/sample-expert-advisor","draft":false,"unlisted":false,"editUrl":"https://github.com/layrZero/layrZero.github.io/tree/main/docs/trading-platform/metatrader-5/sample-expert-advisor.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"OpenAlgo MQL5 Functions","permalink":"/docs/trading-platform/metatrader-5/openalgo-mql5-functions"},"next":{"title":"N8N","permalink":"/docs/trading-platform/n8n"}}');var a=t(4848),o=t(8453);const i={},s="Sample Expert Advisor",l={},d=[];function p(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"sample-expert-advisor",children:"Sample Expert Advisor"})}),"\n",(0,a.jsx)(n.p,{children:"Here is a sample EMA Crossover Based Simple Expert Advisor which places orders to OpenAlgo Connected Brokers"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'//+------------------------------------------------------------------+\n//|                                                      OpenAlgo.mq5|\n//|                        Copyright 2024, OpenAlgo.in               |\n//|                        https://www.openalgo.in                   |\n//+------------------------------------------------------------------+\n#property copyright "Copyright 2024, OpenAlgo.in"\n#property link      "https://www.openalgo.in"\n#property version   "1.00"\n#property strict\n\n#include <OpenAlgo/OpenAlgoApi.mqh>\n\ninput string ApiUrl = "http://127.0.0.1:5000";\ninput string ApiKey = "your_app_apikey";\ninput string Strategy = "Metatrader 5 Strategy";\ninput string Symbol = "SAIL";\ninput int Quantity = 1;\n\n// Enums as input parameters\ninput Exchanges Exchange = NSE; // Default value set to NSE Equity\ninput ProductTypes Product = MIS; // Default value set to MIS for Intraday Square off\ninput PriceTypes PriceType = MARKET; // Default value set to Market Order\n\ninput int FastEMAPeriod = 5;\ninput int SlowEMAPeriod = 10;\n\nint handleFastEMA;\nint handleSlowEMA;\ndatetime lastOrderTime = 0; // This will store the time of the last candle for which an order was placed\n\n\nint OnInit()\n{\n    handleFastEMA = iMA(_Symbol, _Period, FastEMAPeriod, 0, MODE_EMA, PRICE_CLOSE);\n    handleSlowEMA = iMA(_Symbol, _Period, SlowEMAPeriod, 0, MODE_EMA, PRICE_CLOSE);\n\n    if (handleFastEMA == INVALID_HANDLE || handleSlowEMA == INVALID_HANDLE)\n    {\n        Print("Failed to initialize EMA handles");\n        return INIT_FAILED;\n    }\n    \n    return INIT_SUCCEEDED;\n}\n\nvoid OnDeinit(const int reason)\n{\n    if(handleFastEMA != INVALID_HANDLE) IndicatorRelease(handleFastEMA);\n    if(handleSlowEMA != INVALID_HANDLE) IndicatorRelease(handleSlowEMA);\n}\n\n\n\nvoid OnTick()\n{\n    // Buffer arrays to store EMA values for the last two completed candles\n    double fastEMAValues[2];\n    double slowEMAValues[2];\n    \n    // Get the opening time of the last completed candle\n    datetime currentCandleTime = iTime(_Symbol, _Period, 1);\n\n    // Copy EMA values for the last two completed candles\n    if (CopyBuffer(handleFastEMA, 0, 1, 2, fastEMAValues) <= 0 ||\n        CopyBuffer(handleSlowEMA, 0, 1, 2, slowEMAValues) <= 0)\n        \n        \n    {\n        Print("Error copying EMA values");\n        return;\n    }\n\n    // Determine the direction of the crossover\n    bool isPositiveCrossover = fastEMAValues[0] < slowEMAValues[0] && fastEMAValues[1] > slowEMAValues[1];\n    bool isNegativeCrossover = fastEMAValues[0] > slowEMAValues[0] && fastEMAValues[1] < slowEMAValues[1];\n    \n\n\n    // Check if an order has already been placed for the current candle\n    if (currentCandleTime > lastOrderTime)\n    {\n        if (isPositiveCrossover)\n        {\n            // Correct action for a positive crossover\n            PlaceOrder("BUY", Quantity, ApiUrl, ApiKey, Strategy, Symbol, Exchange, Product, PriceType);\n            Print("Placing BUY order on positive EMA crossover");\n            lastOrderTime = currentCandleTime; // Update the last order time\n        }\n        else if (isNegativeCrossover)\n        {\n            // Correct action for a negative crossover\n            PlaceOrder("SELL", Quantity, ApiUrl, ApiKey, Strategy, Symbol, Exchange, Product, PriceType);\n            Print("Placing SELL order on negative EMA crossover");\n            lastOrderTime = currentCandleTime; // Update the last order time\n        }\n    }\n}\n\n\n\n//+------------------------------------------------------------------+\n\n'})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(6540);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);