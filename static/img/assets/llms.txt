# http://docs.openalgo.in llms-full.txt

## Automated Trading Platform
[OpenAlgo](https://openalgo.in/) is a self-hosted platform that makes automating trading orders easy and efficient. Designed with the flexibility to operate from your desktop, laptop, or on servers, OpenAlgo is built using the Python Flask Framework. It features a sleek and user-friendly UI designed with DaisyUI/Tailwind CSS and uses a robust SQLite database for seamless local data management.

OpenAlgo Explained in 8 Minutes - YouTube

OpenAlgo

886 subscribers

[OpenAlgo Explained in 8 Minutes](https://www.youtube.com/watch?v=kAS3jTb3OkI)

OpenAlgo

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

If playback doesn't begin shortly, try restarting your device.

More videos

## More videos

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

[Watch on](https://www.youtube.com/watch?v=kAS3jTb3OkI&embeds_referring_euri=https%3A%2F%2Fcdn.iframe.ly%2F)

0:00

0:00 / 8:20•Live

•

[Watch on YouTube](https://www.youtube.com/watch?v=kAS3jTb3OkI "Watch on YouTube")

**Download OpenAlgo from Github**

[![Logo](https://github.com/fluidicon.png)GitHub - marketcalls/openalgo: Open Source Algo Trading Platform for EveryoneGitHub](https://github.com/marketcalls/openalgo)

### [Direct link to heading](https://docs.openalgo.in/\#key-features)    Key Features

#### [Direct link to heading](https://docs.openalgo.in/\#smart-trading-tools)    Smart Trading Tools

• **Advanced Order Placement**: Execute trades with precision using smart tools like position size management and automated order splitting.

• **Real-Time Order Analysis**: Validate your trading strategies before live deployment using the Analyzer mode to identify and fix issues beforehand.

• **Automated Square-Off:** Utilize one-click and time-based auto square-off functionalities to optimize trading outcomes.

• **Position Management**: Ensure trades align with your strategy through smart position tracking and automatic matching.

#### [Direct link to heading](https://docs.openalgo.in/\#trading-modes)    Trading Modes

• **Live Trading Mode**: Execute real trades with your connected broker when ready.

• **Analyze Mode:** Test and validate strategies without actual execution – ideal for development and testing.

#### [Direct link to heading](https://docs.openalgo.in/\#powerful-integration)    Powerful Integration

• **Multi-Broker Support**: Compatible with major Indian brokers

• **Multi-Exchange Support:** Trade across leading Indian exchanges:

• NSE (Equity), NFO (Futures & Options)

• BSE (Equity), BFO (BSE F&O)

• MCX (Commodity), CDS/BCD (Currency)

• NCDEX (Commodity)

• **Platform Integration**: Connect with popular trading platforms such as:

• Amibroker, TradingView, MetaTrader 5

• Python, NodeJS, Excel, Google Sheets

#### [Direct link to heading](https://docs.openalgo.in/\#risk-management)    Risk Management

• **Order Validation:** Automatic validation of all order parameters before execution.

• **Position Monitoring:** Real-time tracking of positions and order status.

• **Risk Controls:** Built-in checks for position sizes, order quantities, and price limits.

#### [Direct link to heading](https://docs.openalgo.in/\#data-and-security)    Data & Security

• Local Data Storage: Your data is securely stored on your local device.

• Complete Data Control: Retain full ownership and control of your trading data.

• Detailed Logging: Comprehensive API and order logs for analysis and debugging.

#### [Direct link to heading](https://docs.openalgo.in/\#user-experience)    User Experience

• **Interactive Dashboard**: Monitor algo trading activities in real-time with an intuitive interface.

• **Real-Time Notifications**: Receive instant updates on order status, executions, and system events.

• **Performance Analytics:** Analyze your trading performance with built-in tools.

#### [Direct link to heading](https://docs.openalgo.in/\#api-and-development)    API & Development

**Flexible API Access:**

• Local API access for desktop applications.

• Ngrok-based internet access for remote connectivity.

• Hosted API access for server deployments.

**Developer Tools:**

• Comprehensive API documentation.

• Sample strategies and code.

• Debug and testing capabilities.

• WebSocket support for real-time updates.

• **Custom Integration**: Set up your own webhook URL to place trades, enabling unlimited customization.

### [Direct link to heading](https://docs.openalgo.in/\#getting-started)    Getting Started

1\. Download OpenAlgo from GitHub.

2\. Follow the installation guide for your platform (Windows/Mac/Linux).

3\. Connect your broker.

4\. Start automating your trades.

### [Direct link to heading](https://docs.openalgo.in/\#support)    Support

• Join an active Discord community.

• Access comprehensive documentation.

• Benefit from regular updates and improvements.

• Explore professional support options.

OpenAlgo is more than a trading platform – it’s a complete ecosystem for algorithmic trading. Whether you’re a beginner automating your first strategy or an experienced trader needing advanced capabilities, OpenAlgo equips you with the tools and flexibility to excel in algorithmic trading.

[NextOpenAlgo Architecture](https://docs.openalgo.in/openalgo-architecture)

Last updated 1 day ago

## OpenAlgo Hosting Architectures
## [Direct link to heading](https://docs.openalgo.in/openalgo-architecture\#windows-mac-hosting-architecture)    Windows/Mac Hosting Architecture

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F0S7MmP6yJDUIEB9UCULd%252FOpenAlgo%2520Windows%2520Architecture%2520-%2520Diagram.png%3Falt%3Dmedia%26token%3D595699cc-64a6-4a3a-bcdb-9a18c3a48bed&width=768&dpr=4&quality=100&sign=292290d5&sv=2)

## [Direct link to heading](https://docs.openalgo.in/openalgo-architecture\#linux-server-hosting-architecture)    Linux Server Hosting Architecture

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FSmpqARK6a7vHGCRxYjwB%252FOpenAlgo%2520Ubuntu%2520Architecture.jpeg%3Falt%3Dmedia%26token%3D638de915-ab91-46c8-9b6e-5da2232b5e84&width=768&dpr=4&quality=100&sign=6dfbf69a&sv=2)

[PreviousWhat is OpenAlgo?](https://docs.openalgo.in/) [NextCommunity Support](https://docs.openalgo.in/community-support)

Last updated 10 months ago

## OpenAlgo Community Support
Welcome to the OpenAlgo Community on Discord! This is your hub for connecting with fellow developers and algo traders, sharing insights, getting support, and collaborating on projects.

### [Direct link to heading](https://docs.openalgo.in/community-support\#how-to-join)    How to Join

To become a part of our growing community, please use the invitation link below: [Join the OpenAlgo Discord Community](https://discord.gg/UPh7QPsNhP) and you can raise your issues and feature request in [openalgo github section](https://github.com/marketcalls/openalgo/issues)

### [Direct link to heading](https://docs.openalgo.in/community-support\#community-guidelines)    Community Guidelines

- **Respect:** Treat every member with respect. No harassment or discrimination is tolerated.

- **Collaboration:** Feel free to ask for help and offer support. Share your knowledge and learn from others.

- **No Spam:** Keep discussions on-topic. Avoid spamming channels with promotions or irrelevant content.

- **Intellectual Property:** Respect copyright laws and do not share illegal downloads or copyrighted content.

- **Privacy:** Do not share personal information of yourself or others.


### [Direct link to heading](https://docs.openalgo.in/community-support\#channels-and-their-purposes)    Channels and Their Purposes

- **#general:** General discussions related to algo trading and development.

- **#developers:** Technical discussions about OpenAlgo's API, SDKs, and development.

- **#algotraders:** Strategies, tips, and discussion for algo traders.

- **#announcements:** Stay updated with the latest news and events.

- **#trading-platforms:** Discuss various platforms and tools for trading.


### [Direct link to heading](https://docs.openalgo.in/community-support\#openalgo-virtual-meet)    [OpenAlgo Virtual Meet](https://learn.marketcalls.in/courses/-OpenAlgo-Developer-Meet---Mar-22-2024-65fd4c74a2a47848adb27c40)

- **Event Time:** 02nd April 2024 (7.30 p.m IST)

- **Agenda Highlights:** Discover features of OpenAlgo v1.0, integration techniques, plugin systems, and the roadmap for v2.0.


### [Direct link to heading](https://docs.openalgo.in/community-support\#support-and-faq)    Support and FAQ

#### [Direct link to heading](https://docs.openalgo.in/community-support\#how-can-i-get-help-with-an-issue)    How can I get help with an issue?

Post your question in the relevant channel. For technical issues, use #developers, and for trading-related inquiries, use #algotraders.

#### [Direct link to heading](https://docs.openalgo.in/community-support\#are-there-any-regular-events-or-meetups)    Are there any regular events or meetups?

Yes, we host the OpenAlgo Virtual Meet annually. You can find the details in the #announcements channel.

#### [Direct link to heading](https://docs.openalgo.in/community-support\#how-do-i-report-inappropriate-behavior)    How do I report inappropriate behavior?

Contact a moderator via direct message or use the `@moderator` tag in the #general channel.

### [Direct link to heading](https://docs.openalgo.in/community-support\#resources)    Resources

- \[OpenAlgo API Documentation\]

- \[Tutorials and Guides\]

- \[Trading Strategies and Tips\]

- \[Code Repositories\]


### [Direct link to heading](https://docs.openalgo.in/community-support\#contact-us)    Contact Us

For direct support or inquiries, please contact the community moderators or reach out through the following email: support@openalgo.com.

[PreviousOpenAlgo Architecture](https://docs.openalgo.in/openalgo-architecture) [NextNew Features](https://docs.openalgo.in/new-features)

Last updated 11 months ago

## New Trading Features
Open Algo is constantly evolving to meet the needs of modern traders by introducing innovative features that enhance functionality, security, and user experience. Each new addition focuses on improving performance, streamlining workflows, and enabling more efficient trading strategies. From cutting-edge tools to seamless integrations, these updates are tailored to empower both traders and developers.

The platform's new features include advanced trading tools, enhanced API capabilities, and robust security measures. These updates ensure Open Algo remains adaptable to industry trends, supporting multiple brokers, diverse trading styles, and custom workflows. Whether you're a scalper, a positional trader, or a developer building on top of Open Algo, the latest features provide the flexibility and reliability you need.

[PreviousCommunity Support](https://docs.openalgo.in/community-support) [NextFast Scalper](https://docs.openalgo.in/new-features/fast-scalper)

Last updated 3 months ago

## FastScalper Tool
## [Direct link to heading](https://docs.openalgo.in/new-features/fast-scalper\#fastscalper-a-new-rust-based-tool-for-scalping)    FastScalper: A New Rust-Based Tool for Scalping

**FastScalper** is an innovative desktop application designed specifically for scalpers who need a lightweight, fast, and robust trading tool. Built using Rust, this cross-platform app integrates seamlessly with Open Algo, providing an intuitive interface to place and manage orders efficiently.

This guide will walk you through the installation, configuration, and key features of FastScalper.

* * *

### [Direct link to heading](https://docs.openalgo.in/new-features/fast-scalper\#key-features)    Key Features

1. **Cross-Platform Compatibility**
FastScalper is compatible with all major operating systems:



- **Windows**: Supports multiple instances for tracking and managing various instruments.

- **macOS**: Compatible with both Intel and Apple Silicon processors.

- **Linux**: Available for distributions like Ubuntu, Debian, and Fedora.


2. **Tiny and Lightweight**
A small, portable application optimized for speed, making it ideal for scalpers requiring instant order execution.

3. **Robust Order Management**



- Supports multiple product types:



- **CNC**: Cash and Carry (carry-forward trades).

- **MIS**: Intraday trading for equities and derivatives.

- **NRML**: Positional trading for derivatives.


- Easy-to-use controls:



- **L**: Place a long position.

- **LX**: Close long positions.

- **SE**: Place a short position.

- **SX**: Close short positions.


4. **Voice Alerts**
Configurable voice alerts provide audio confirmation for order placement.

5. **Seamless Integration**



- Connects to Open Algo via an API key for real-time trading.

- Orders can be monitored through trading terminals (desktop, mobile, or web).


6. **Customizable Settings**



- API key and host URL configuration.

- Exchange and product setup options.

- Enable/disable voice alerts as needed.


* * *

### [Direct link to heading](https://docs.openalgo.in/new-features/fast-scalper\#installation)    Installation

#### [Direct link to heading](https://docs.openalgo.in/new-features/fast-scalper\#prerequisites)    Prerequisites

- Ensure Open Algo is installed and running.

- Obtain the FastScalper installer from the **Downloads** section in Open Algo.


#### [Direct link to heading](https://docs.openalgo.in/new-features/fast-scalper\#steps)    Steps

1. **Download FastScalper**
Navigate to the **Downloads** section and select the appropriate installer for your operating system.

2. **Install FastScalper**
Follow the platform-specific installation steps. Launch the application once installed.

3. **Configure FastScalper**



- Open FastScalper and go to **Settings**.

- Enter the following details:



- **API Key**: Obtainable from the Open Algo API Key section.

- **Host URL**: The URL where Open Algo is running.

- Configure additional preferences (e.g., exchange, product type, and voice alerts).


4. **Start Trading**
Begin placing and managing orders directly through the FastScalper interface.


* * *

### [Direct link to heading](https://docs.openalgo.in/new-features/fast-scalper\#usage)    Usage

1. **Launching Multiple Instances (Windows)**
Open several instances to manage multiple instruments simultaneously.

2. **Order Placement**



- Enter the symbol and quantity.

- Use dedicated controls for:



- **L**: Place a long order.

- **LX**: Close long positions.

- **SE**: Place a short order.

- **SX**: Close short positions.


3. **Error Handling**
FastScalper prevents invalid actions, such as attempting to close positions when none exist.

4. **Monitoring Orders**



- View order status in the order book.

- Monitor trades via trading terminals or web interfaces.


* * *

### [Direct link to heading](https://docs.openalgo.in/new-features/fast-scalper\#known-limitations)    Known Limitations

- **Single Instance Support**: macOS and Linux currently support only one instance at a time.

- **Feature Requests**: Additional features or configurations can be suggested via the Open Algo GitHub repository.


[PreviousNew Features](https://docs.openalgo.in/new-features) [NextAPI Analyzer](https://docs.openalgo.in/new-features/api-analyzer)

Last updated 3 months ago

## OpenAlgo API Analyzer
OpenAlgo API Analyzer Documentation

The **OpenAlgo API Analyzer** is a versatile tool designed to assist both traders and developers in testing, validating, and monitoring their trading integrations seamlessly and in real-time.

* * *

## [Direct link to heading](https://docs.openalgo.in/new-features/api-analyzer\#for-traders)    For Traders

**Key Features**

1. Real-Time Order Validation



- Test orders without triggering actual execution.

- Receive instant feedback on order parameters.

- Validate trading strategies before deploying them live.


2. Order Monitoring



- Get a real-time view of all order requests.

- Track modifications and cancellations in real-time.

- Monitor position closures effectively.


3. Strategy Management



- Group and track orders by strategy name.

- Simultaneously monitor multiple strategies.

- Analyze and compare strategy performance metrics.


4. Risk Management



- Verify order parameters prior to execution.

- Check position sizes, quantities, and limits.

- Ensure price triggers and conditions meet expectations.


5. Notifications



- Instant visual and sound alerts for key actions.

- Clear feedback for successes and errors.

- Simplify tracking with real-time notifications.


**Benefits for Traders**

1. Risk Reduction



- Safely test strategies without financial exposure.

- Catch and correct errors before execution.

- Minimize trading-related risks.


2. Strategy Optimization



- Refine trading parameters with confidence.

- Experiment with different order types.

- Optimize the efficiency of position sizing.


3. Operational Efficiency



- Quickly validate trading concepts and ideas.

- Monitor multiple strategies effortlessly.

- Gain real-time insights into order statuses.


4. Cost Savings



- Prevent costly trading errors.

- Use the analyzer for strategy testing without incurring brokerage fees.

- Optimize overall trading expenses.


* * *

## [Direct link to heading](https://docs.openalgo.in/new-features/api-analyzer\#for-developers)    For Developers

**Technical Features**

1. API Testing Environment



- Test API endpoints in a sandbox mode.

- Validate request and response formats.

- Debug integration issues with ease.


2. Request Validation



- Automatic checks for parameter accuracy.

- Validate symbol existence and compatibility.

- Ensure price and quantity adhere to rules.


3. Response Analysis



- Inspect detailed API responses.

- Analyze error messages for debugging.

- Verify HTTP status codes and response integrity.


4. Real-Time Monitoring



- Use WebSocket for live event tracking.

- Log requests and responses for review.

- Monitor API performance metrics in real time.


5. Debug Tools



- Examine request payloads.

- Inspect response data structures.

- Track API call sequences for troubleshooting.


**Implementation Details**

1. Supported API Endpoints



- Place Order

- Place Smart Order

- Modify Order

- Cancel Order

- Cancel All Orders

- Close Position


2. Validation Rules



- Check required fields.

- Validate data types and value ranges.

- Verify symbol existence and exchange compatibility.


3. Event System



- Real-time updates via WebSocket.

- Alerts for order status changes.

- Notifications for errors and system events.


4. Data Storage



- Log requests, responses, and errors.

- Track performance and monitor API usage trends.


**Integration Benefits for Developers**

1. Accelerated Development



- Rapidly test and iterate API integrations.

- Get instant feedback to improve workflows.

- Simplify debugging with detailed logs.


2. Enhanced Code Quality



- Ensure integration logic is robust.

- Catch potential errors early in the process.

- Implement reliable error handling mechanisms.


3. Comprehensive Documentation



- Access examples for requests and responses.

- Review common error scenarios and solutions.

- Follow integration best practices.


4. Improved Maintenance



- Monitor API usage and performance regularly.

- Debug issues with historical data and logs.

- Maintain system reliability with proactive tracking.


* * *

**Best Practices**

Testing

- Always test new strategies in analyzer mode.

- Validate all input parameters before proceeding to live trading.

- Simulate edge cases to ensure robustness.


Monitoring

- Review analyzer logs frequently.

- Track error rates and address anomalies promptly.

- Regularly analyze strategy performance.


Integration

- Implement error-handling mechanisms in your integrations.

- Use retry logic for transient failures.

- Respect API rate limits to ensure smooth operations.


Maintenance

- Keep API keys secure and confidential.

- Update integrations regularly for compatibility.

- Continuously monitor the health of your systems.


* * *

**Support**

For any technical assistance or feature suggestions, reach out via:

- GitHub Issues: Report bugs or request new features.

- Community Support: Connect with other users for advice and collaboration.

- Documentation Updates: Check for the latest changes and enhancements.


[PreviousFast Scalper](https://docs.openalgo.in/new-features/fast-scalper) [NextTraffic/Latency Monitor](https://docs.openalgo.in/new-features/traffic-latency-monitor)

Last updated 3 months ago

## Performance Monitoring Tools
OpenAlgo introduces powerful tools for performance monitoring:

1\. Latency Monitor (/latency):

• Real-Time Tracking: Monitors Round-Trip Time (RTT) for order execution.

• Broker Comparison: Evaluate broker performance and latency breakdown.

• Benefits:

• Optimize execution strategies.

• Detect and troubleshoot delays.

• Compare brokers for better reliability.

2\. Traffic Monitor (/traffic):

• API Analytics: Track API usage, errors, and response times.

• Endpoint Insights: Identify heavily-used endpoints and optimize requests.

• Benefits:

• Monitor system health.

• Resolve performance bottlenecks.

• Plan scaling based on actual usage.

These tools provide essential visibility to optimize system performance, ensuring reliable and efficient trading operations.

[PreviousAPI Analyzer](https://docs.openalgo.in/new-features/api-analyzer) [NextChartink Integration](https://docs.openalgo.in/new-features/chartink-integration)

Last updated 3 months ago

## Chartink Integration Features
OpenAlgo now supports seamless Chartink integration for automated trading based on scanner alerts. Key features include:

• Automated Order Placement: Place orders automatically based on BUY, SELL, SHORT, or COVER alerts.

**• Dual Queue System:**

**• Entry Orders**: Fast processing for BUY/SHORT (up to 10 orders per second).

• **Exit Orders**: Priority handling for SELL/COVER (1-second delay per order).

• **Custom Strategy Setup**: Configure symbols, quantities, and product types (Intraday/Positional).

**• Auto Square-off:** Automatically close intraday positions sequentially.

Simply connect your Chartink webhook, configure strategies in OpenAlgo, and automate your trading flow.

[PreviousTraffic/Latency Monitor](https://docs.openalgo.in/new-features/traffic-latency-monitor) [NextMonetization](https://docs.openalgo.in/monetization)

Last updated 3 months ago

## Monetizing OpenAlgo
**How Developers Can Monetize OpenAlgo (AGPL v3.0 License)**

OpenAlgo is an open-source, algorithmic trading framework written in Python under the AGPL v3.0 license. The AGPL enforces that any modifications or use of the software over a network must be made available to users under the same license.

If you take OpenAlgo, modify its core features (e.g., add a new trading algorithm or improve the user interface), and host it as a web service where users can log in and trade using your modified version. Under the AGPL-3.0 license, you are required to:

i)Share the source code of the modified version with your users.
ii)Ensure they have access to the exact changes you made to the original OpenAlgo.

This requirement ensures that even if the software is accessed over a network (like through a web app or SaaS platform), the users still have the freedom to view, modify, and distribute the code.

This ensures that any advancements built on OpenAlgo are contributed back to the community, but it does not preclude monetization efforts. Here’s how developers can monetize OpenAlgo within these constraints:

**1\. Open-Source Foundation with AGPL Compliance:**

OpenAlgo remains open-source under the AGPL v3.0 license, which mandates that any modifications must be shared with the community, including those used over a network. Developers can build new features and extensions but must ensure that any derivatives or services that expose OpenAlgo through a network also make the source code available to users.

**2\. Paid Plugins and Extensions (With Source Code Disclosure):**

Developers can create and sell plugins or extensions for OpenAlgo. However, under the AGPL license, if these plugins are used as part of a networked service (e.g., SaaS), the source code must be made available to the users of that service. Monetization can still happen by charging for the plugin itself, packaging, installation services, or enhanced support.

**3\. Custom Solutions and Consulting:**

One major avenue for monetization under AGPL is offering custom development or consulting services. While code must remain open, developers can charge for the expertise in creating tailored solutions for specific trading needs or strategies. This ensures that the code adheres to the licensing terms but allows developers to monetize their knowledge and implementation services.

**4\. Hosted Services and Premium Features:**

While AGPL requires the release of source code for any network service, developers can still offer value-added services around OpenAlgo, such as managed hosting, premium support, or data integrations that are separate from the core plugin functionality. These services can be charged for on a subscription basis while ensuring full compliance with AGPL by making any necessary source code available.

**5\. Support, Training, and Documentation:**

Developers can create value around the ecosystem by offering paid support plans, training sessions, or premium documentation. This could include webinars, one-on-one mentoring for algorithmic trading, or detailed guides for deploying OpenAlgo-based systems. Since these are services and not software, they do not require source code disclosure and are fully monetizable.

**How OpenAlgo Should Not Be Monetized:**

**1\. Closed-Source Modifications or Plugins:**

Under the AGPL license, any modifications or extensions to OpenAlgo that are deployed over a network must be open-source. Developers should not attempt to sell closed-source versions of the framework or plugins that violate the AGPL by keeping modifications proprietary.

**2\. Violation of AGPL Network Compliance:**

Developers should avoid monetizing services that make use of OpenAlgo over a network without releasing the associated source code. Failure to comply with the AGPL network provisions could lead to legal challenges and compromise the integrity of the platform.

**3\. Non-Disclosure of Derivatives:**

Any attempts to monetize derivatives of OpenAlgo without making the source code publicly available will breach the AGPL license. Developers must ensure that all modifications, particularly those used to power online services or platforms, are properly disclosed under the same AGPL terms.

The AGPL v3.0 license fosters a thriving community while ensuring transparency and sharing of innovations. Developers are encouraged to monetize responsibly by adhering to the open-source principles that benefit everyone involved in the OpenAlgo ecosystem.

[PreviousChartink Integration](https://docs.openalgo.in/new-features/chartink-integration) [Next5Paisa](https://docs.openalgo.in/connect-brokers/5paisa)

Last updated 3 months ago

## 5Paisa Integration Guide
OpenAlgo makes algorithmic trading accessible and straightforward by providing seamless integration with various brokers, including 5Paisa. This documentation will guide you through the process of configuring your 5Paisa account to work with OpenAlgo, ensuring you can automate your trading strategies efficiently. Follow the steps below to enable TOTP, generate APIs, and set up your environment for a smooth trading experience.

### [Direct link to heading](https://docs.openalgo.in/connect-brokers/5paisa\#step-1-enable-totp)    **Step 1: Enable TOTP**

**Install Google Authenticator:**

- Download and install the Google Authenticator app on your phone.


**Set Up TOTP on 5Paisa:**

- **Login to 5Paisa Website:**



- Navigate to the [5Paisa website](https://tradestation.5paisa.com/dashboard) and log in with your credentials.


- **Access TOTP Setup:**



- Click on your login ID at the top right corner to bring out the menu.

- Go to `Profile -> TOTP`.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F5mlUpuCUDW8WVfCJ9Xag%252Fimage.png%3Falt%3Dmedia%26token%3Da10c876f-c928-44e0-8f72-89f1665f5c3e&width=768&dpr=4&quality=100&sign=a2c186cd&sv=2)

- **Enable TOTP:**



- If you already have TOTP enabled but do not have the "TOTP Key," you will need to disable TOTP and then enable it again.


- **Enable External TOTP:**



- Click on "Enable external TOTP."

- Enter the OTP received on your phone/email.

- Enter your 6-digit MPIN.

- Scan the QR code in your Google Authenticator app.

- Copy the TOTP KEY shown below the QR code and save it in a notepad for later use.

- Enter the TOTP shown in the Google Authenticator app.

- Click the "Enable" button.


- **Confirmation:**



- You will see a message saying, "TOTP successfully enabled."


### [Direct link to heading](https://docs.openalgo.in/connect-brokers/5paisa\#step-2-generate-apis)    **Step 2: Generate APIs**

1. **Login to 5Paisa Website:**



- Navigate to the 5Paisa website and log in with your credentials.


2. **Access API Key Generation:**



- Click on the menu on the top right next to your name.

- Go to `Developer’s APIs -> Get API Keys`.

- Keep this page open and proceed to the next step.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FxhOUbW4cQsB8iyXRBVn3%252Fimage.png%3Falt%3Dmedia%26token%3D43ee26aa-0723-4f06-a013-25a5b6bc8e0a&width=768&dpr=4&quality=100&sign=49d6547b&sv=2)

### [Direct link to heading](https://docs.openalgo.in/connect-brokers/5paisa\#step-3-save-api-details)    **Step 3: Save API Details**

1. **Save API Details:**



- Save the generated User Key, User ID. Encryption Key, Later, you will add these details to the environmental variables along with the redirect URL.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FYAl15mlOE3HofSXh9JCX%252Fimage.png%3Falt%3Dmedia%26token%3D4569e260-4c5f-4457-b4de-7b5ef9c7ce3e&width=768&dpr=4&quality=100&sign=ab1206b4&sv=2)

**Get the Client ID**

**Login to 5Paisa Website:**

- Navigate to the [5Paisa website](https://tradestation.5paisa.com/dashboard) and log in with your credentials.


**Access MyProfile**

- Click on your login ID at the top right corner to bring out the menu.

- Go to `Profile -> MyProfile and get the ` `Client ID ` `as shown below`


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FAT328WnN2kJNFa4HF2oJ%252Fimage.png%3Falt%3Dmedia%26token%3Dedfdc05c-c55d-47b5-8d41-df527f4acdc2&width=768&dpr=4&quality=100&sign=223c7717&sv=2)

Save the generated User\_Key, User\_ID, client\_id and Encryption\_Key. Later we will be adding the apikey in the [environmental variable](https://docs.openalgo.in/getting-started/windows-installation/environmental-variables) along with the redirect url

Here is a sample of how the details would appear in a .env file for reference:

**Sample .env File:** Here is a sample of how the details should appear in a `.env` file for reference:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'User_Key:::User_ID:::client_id'
BROKER_API_SECRET = 'Encryption_Key'
REDIRECT_URL = 'http://127.0.0.1:5000/fivepaisa/callback'
```

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/5paisa\#conclusion)    Conclusion

By following the steps outlined in this guide, you have successfully configured your 5Paisa account for use with OpenAlgo. You can now leverage the power of algorithmic trading to enhance your trading strategies and make data-driven decisions. Should you encounter any issues or need further assistance, please refer to the OpenAlgo community or support resources. Happy trading!

[PreviousMonetization](https://docs.openalgo.in/monetization) [NextAliceBlue](https://docs.openalgo.in/connect-brokers/aliceblue)

Last updated 9 months ago

## OpenAlgo and AliceBlue Integration
OpenAlgo provides seamless integration with AliceBlue, enabling you to connect your trading strategies with AliceBlue’s brokerage services. Follow this guide to set up your AliceBlue broker account with OpenAlgo.

### [Direct link to heading](https://docs.openalgo.in/connect-brokers/aliceblue\#prerequisites)    Prerequisites

Before proceeding, ensure you have the following:

- An active AliceBlue trading account.

- Access to the AliceBlue ANT website.

- OpenAlgo installed and configured on your local machine.


### [Direct link to heading](https://docs.openalgo.in/connect-brokers/aliceblue\#steps-to-create-the-aliceblue-api-secret-key)    Steps to Create the AliceBlue API Secret Key

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F6muqmpQwTdE6regF3Pmw%252FScreenshot%25202024-07-16%2520at%252010.32.22%25E2%2580%25AFPM.png%3Falt%3Dmedia%26token%3D135e36df-a221-464c-992a-e01e7051dd26&width=768&dpr=4&quality=100&sign=8d923f86&sv=2)

1. **Login to AliceBlue ANT Website**



- Navigate to the [AliceBlue ANT website.](https://ant.aliceblueonline.com/)

- Enter your credentials to log in.


2. **Access API Key Section**



- On the top right corner, click on **Apps**.

- Select the **API Key** tab.


3. **Generate API Key**



- If you don’t already have an API key, generate a new one by following the on-screen instructions.

- Note down the **API Secret Key** as it will be required for configuring the `.env` file.


### [Direct link to heading](https://docs.openalgo.in/connect-brokers/aliceblue\#configuring-the-.env-file)    Configuring the `.env` File

The AliceBlue login user ID is used as the API key. Below is a sample configuration for the `.env` file:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# AliceBlue Broker Configuration
BROKER_API_KEY = 'your_client_id'
BROKER_API_SECRET = 'your_api_secret_here'
REDIRECT_URL = 'http://127.0.0.1:5000/aliceblue/callback'

```

Replace `your_client_id` with your AliceBlue login user ID and `your_api_secret_here` with the generated API secret key.

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/aliceblue\#important-notes)    Important Notes

- Ensure that your **API Secret Key** is stored securely and is not shared publicly.

- The **REDIRECT\_URL** should match the one registered with your API application.


Follow these steps to integrate AliceBlue with OpenAlgo successfully. If you encounter any issues, refer to the AliceBlue API documentation for further assistance.

[Previous5Paisa](https://docs.openalgo.in/connect-brokers/5paisa) [NextAngelOne](https://docs.openalgo.in/connect-brokers/angelone)

Last updated 8 months ago

## Composite Edge Trading
Work in Progress

[PreviousAngelOne](https://docs.openalgo.in/connect-brokers/angelone) [NextDhan](https://docs.openalgo.in/connect-brokers/dhan)

Last updated 2 days ago

## Dhan Trading Platform
Dhan is an innovative financial services provider focused on leveraging technology to offer a dynamic trading and investment platform. Recognized for its intuitive interface and powerful trading capabilities, Dhan strives to enhance the trading experiences of its users. The platform serves a diverse range of customers, from novice investors to seasoned traders, providing tools that support various investment strategies and trading styles.

OpenAlgo Dhan Integeration - YouTube

OpenAlgo

886 subscribers

[OpenAlgo Dhan Integeration](https://www.youtube.com/watch?v=EqCLLRUvtBg)

OpenAlgo

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

If playback doesn't begin shortly, try restarting your device.

More videos

## More videos

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

[Watch on](https://www.youtube.com/watch?v=EqCLLRUvtBg&embeds_referring_euri=https%3A%2F%2Fcdn.iframe.ly%2F)

0:00

0:00 / 9:59•Live

•

[Watch on YouTube](https://www.youtube.com/watch?v=EqCLLRUvtBg "Watch on YouTube")

For developers and algo traders looking to use the Dhan API, the integration process generally involves the following steps:

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/dhan\#steps-for-integration)    Steps for Integration:

1. **Log into Dhan Web Portal**: Visit the Dhan Web Portal at [web.dhan.co](http://web.dhan.co/) to start the integration process.

2. **Navigate to Profile**: Click on "DhanHQ Trading API's" under your profile options to access the API .![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FQ7CjX1gsA8PmxNSzeeLL%252Fimage.png%3Falt%3Dmedia%26token%3D51ee47f6-c54b-4741-88c2-5b2a877d254e&width=300&dpr=4&quality=100&sign=322842fb&sv=2)

3. **Generate API Token**:



- Under the "Trading APIs" tab, click on "Generate token".

- Enter "OpenAlgo" as the Application Name.

- Set the Token Validity for 30 days.

- Click on the "Generate Token" button to create your API token.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F0vmuvYZbeK7R6mbQws0l%252Fimage.png%3Falt%3Dmedia%26token%3Dd20acf21-ace2-446c-bd03-9501339fca73&width=768&dpr=4&quality=100&sign=919b66f4&sv=2)

4. **Retrieve API Credentials**:



- Copy the generated token id, which will serve as your `apisecret`.

- Go back to your profile page by clicking "My Profile on Dhan".

- Copy the Client ID, which will be your `apikey`.


#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/dhan\#configuration)    Configuration:

Here is how you would typically set up your environment variables in a .env file for Dhan's API:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'your_dhan_clientid_here'
BROKER_API_SECRET = 'your_dhan_token_here'
REDIRECT_URL = 'http://127.0.0.1:5000/dhan/callback'
```

Integrating with the Dhan API opens up new possibilities for implementing automated and algorithmic trading strategies. It provides developers and traders with a robust platform to access market opportunities efficiently and effectively. To fully leverage the capabilities of the Dhan API, it is essential to follow best practices for API integration. This includes careful management of API rate limits, secure handling of API keys, and thorough error handling and logging. These practices help ensure a dependable and optimal trading experience using Dhan's advanced technological infrastructure.

[PreviousCompositedge](https://docs.openalgo.in/connect-brokers/compositedge) [NextFirstock](https://docs.openalgo.in/connect-brokers/firstock)

Last updated 2 months ago

## Firstock Trading Services
Firstock is an Indian discount brokerage firm offering seamless trading services across various segments such as equities, commodities, currencies, and derivatives. Known for its user-friendly interface, Firstock provides mobile, web, and desktop platforms equipped with essential features like real-time market data, advanced charting tools, and order execution capabilities. Its competitive pricing structure and support for algorithmic trading make it an attractive option for both retail and professional traders.

## [Direct link to heading](https://docs.openalgo.in/connect-brokers/firstock\#getting-api-credentials)    Getting API Credentials

To integrate Firstock with OpenAlgo, follow these steps to obtain your API key and secret:

1\. Log in to Firstock Connect

• Visit [https://connect.thefirstock.com/login?ref=wikiconnect.thefirstock.com](https://connect.thefirstock.com/login?ref=wikiconnect.thefirstock.com).

• Enter your Firstock login credentials.

2\. Generate API Credentials:

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FeFpP3IeGW7b81knjYQmE%252FScreenshot%25202024-12-24%2520at%25202.49.27%25E2%2580%25AFPM.png%3Falt%3Dmedia%26token%3Dd26c6e85-3ee5-47ab-ace1-3fb741d52c7a&width=768&dpr=4&quality=100&sign=ac038709&sv=2)

• After logging in, navigate to the API Key section in your profile settings.

• Click on Generate API Key.

• Your Vendor Code and API Key will be displayed.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FTQ2yYLjI9qPz0rB2hgEY%252FScreenshot%25202024-12-24%2520at%25202.49.44%25E2%2580%25AFPM.png%3Falt%3Dmedia%26token%3D78c1b4dd-e984-48e8-8d2b-e264747c6104&width=768&dpr=4&quality=100&sign=453067d&sv=2)

3\. Configure OpenAlgo:

• In your OpenAlgo .env file, set the following variables:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'Your Vendor Code'
BROKER_API_SECRET = 'Your API Key'
REDIRECT_URL = 'http://127.0.0.1:5000/firstock/callback'
```

[PreviousDhan](https://docs.openalgo.in/connect-brokers/dhan) [NextFlatTrade](https://docs.openalgo.in/connect-brokers/flattrade)

Last updated 2 months ago

## FlatTrade API Integration
FlatTrade is an Indian discount broker recognized for its flat-fee brokerage model, which ensures cost-effective trading solutions for investors. The platform supports trading across multiple asset classes, including stocks, derivatives, and commodities, via its intuitive mobile and web applications. With features like real-time data feeds, customizable charting tools, and fast order execution, FlatTrade is designed to cater to traders seeking affordability without compromising on essential functionality.

## [Direct link to heading](https://docs.openalgo.in/connect-brokers/flattrade\#getting-api-credentials)    Getting API Credentials

To integrate Flattrade with OpenAlgo, follow these steps to obtain your API key and secret:

1\. Log in to Flattrade Wall

• Login to Wall [https://wall.flattrade.in](https://wall.flattrade.in/)

Enter your Shoonya login credentials.

2\. Navigate to Pi in top menu bar and click on “CREATE NEW API KEY”.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FU2qZ4nV70M1FJwmnwt6B%252Fwall.png%3Falt%3Dmedia%26token%3Da2b1f7a9-073c-432d-b61d-1d6b681f8d65&width=768&dpr=4&quality=100&sign=87a7b828&sv=2)

3.Click on Create the New API Key

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fq0k8MSvg9PfNPvPQnNdV%252FScreenshot%25202024-12-24%2520at%25204.51.22%25E2%2580%25AFAM.png%3Falt%3Dmedia%26token%3Da41a6999-c02f-43be-8f44-78824e06d17b&width=768&dpr=4&quality=100&sign=728ac2a5&sv=2)

4.Enter the Following Details in the Form

App Name

Your App Name

App ShortName

Short Name of your APP

Redirect URL

URL to which we need to redirect after successful login authentication.
Note: Code to generate the token will be sent as parameter to this URL

Postback URL

URL to which you will be reciving order updates for the orders placed through API.

Description

Short description about your app

5.Click on CREATE button

6.Your API key is now generated

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fq7EEoPMSDjPC4Hfk1ITQ%252Fimage.png%3Falt%3Dmedia%26token%3Dc0f71f3f-793e-4471-912b-bb25720b2d7a&width=768&dpr=4&quality=100&sign=79df0c6e&sv=2)

7.Copy the APIKEY

Click the eye icon to view the API secret key. Copy API secret key

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FTZNYCEtiA0lrarVJU4ke%252Fimage.png%3Falt%3Dmedia%26token%3Dc4604573-556b-40d7-a577-986984a38f91&width=768&dpr=4&quality=100&sign=d5fbe546&sv=2)

8\. Configure OpenAlgo:

• In your OpenAlgo .env file, set the following variables:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'client_id:::api_key'
BROKER_API_SECRET = 'api_secret'
REDIRECT_URL = 'http://127.0.0.1:5000/flattrade/callback'
```

[PreviousFirstock](https://docs.openalgo.in/connect-brokers/firstock) [NextFyers](https://docs.openalgo.in/connect-brokers/fyers)

Last updated 2 months ago

## Fyers API Integration
Fyers is a cutting-edge technology-driven brokerage firm that offers a comprehensive trading and investment platform. Renowned for their user-friendly applications and robust trading tools, Fyers aims to provide traders with an efficient and streamlined trading experience. They cater to a wide spectrum of users from casual investors to active day traders with services designed to accommodate various trading styles and strategies.

Fyers API - OpenAlgo Integration Procedure - YouTube

OpenAlgo

886 subscribers

[Fyers API - OpenAlgo Integration Procedure](https://www.youtube.com/watch?v=lintXPX5LzE)

OpenAlgo

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

If playback doesn't begin shortly, try restarting your device.

More videos

## More videos

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

[Watch on](https://www.youtube.com/watch?v=lintXPX5LzE&embeds_referring_euri=https%3A%2F%2Fcdn.iframe.ly%2F)

0:00

0:00 / 7:29•Live

•

[Watch on YouTube](https://www.youtube.com/watch?v=lintXPX5LzE "Watch on YouTube")

For developers and algo traders interested in leveraging the Fyers API, the integration process typically includes the following steps:

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FbWMjLrnf3QMd19CB45pJ%252FFyers%2520App%2520Details.png%3Falt%3Dmedia%26token%3D9ffad45e-d05d-4914-b282-c6d8809382a3&width=768&dpr=4&quality=100&sign=41a82380&sv=2)

1. **Navigate to the Fyers MyAPI Dashboard**: Access the [MyAPI Dashboard](https://myapi.fyers.in/dashboard). This dashboard is the central hub for all API-related activities.

2. **Create an Application**: Within the dashboard, there's an option to 'Create App'. This is the initial step in registering a new application that will interact with the Fyers platform through the API.

3. **Fill in Application Details**: You'll be prompted to provide essential details about your application such as the App Name and Redirect URL. The Redirect URL is critical as it's used for securely redirecting users after they have authenticated with Fyers.

4. **Optional App Description and Logo**: Although optional, adding a description and a logo for your app is recommended as it provides users with additional information about your application's purpose and branding.

5. **Save Changes**: Once all the information is provided, save the changes to register the application with Fyers.

6. **Copy the App Credentials**: After saving your app, you'll receive an APP ID (apikey) and a Secret ID (apisecret). These credentials are essential for authenticating API requests and should be stored securely.

7. **Utilize in .env File**: The obtained credentials, along with the Redirect URL, are typically used in a .env file for environment variables which your application can use to interact with the API.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FKhMkntDtKY0F43eRJtOQ%252FFyers%2520App%2520Credentials.png%3Falt%3Dmedia%26token%3D406c0282-4d4a-49bd-96ba-afd28e47c49a&width=768&dpr=4&quality=100&sign=5e04f0d1&sv=2)

Here is a sample of how the details would appear in a .env file for reference:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'your_api_key_here'
BROKER_API_SECRET = 'your_api_secret_here'
REDIRECT_URL = 'http://127.0.0.1:5000/fyers/callback'
```

Integrating with Fyers API marks the beginning of a new realm of possibilities for automated and algorithmic trading strategies, offering traders and developers a sophisticated platform to tap into market opportunities with agility and precision. To maximize the potential of the Fyers API, it's crucial to adhere to best practices for API integration. This includes being vigilant about handling rate limits, ensuring the secure management of API keys, and implementing comprehensive error handling and logging mechanisms. By doing so, one can ensure a reliable and effective trading experience that leverages the full capabilities of Fyers' advanced trading infrastructure.

[PreviousFlatTrade](https://docs.openalgo.in/connect-brokers/flattrade) [NextICICI Direct](https://docs.openalgo.in/connect-brokers/icici-direct)

Last updated 3 months ago

## ICICIDirect API Integration
ICICIDirect is a premier trading platform in India offering a comprehensive suite of investment products, including equity, derivatives, mutual funds, and more. The ICICIDirect Breeze API allows developers to build and integrate trading applications, automate trading strategies, and access market data seamlessly.

In this guide, we will walk you through the steps to obtain your API credentials, including the API Key and API Secret, necessary for integrating ICICIDirect Breeze API with OpenAlgo.

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/icici-direct\#api-login-procedure)    API Login Procedure

**Access the ICICIDirect Breeze API Portal**:

- Visit the [ICICIDirect Breeze API Portal](https://api.icicidirect.com/apiuser/home).


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F9UEZ5nGDhEcq668Hb1a5%252Fimage.png%3Falt%3Dmedia%26token%3Deb4ddfa4-1ea7-4ffc-997b-137dc9fb06e6&width=768&dpr=4&quality=100&sign=a35ab945&sv=2)

**Login**:

- Click on the Login button.

- Enter your ICICI Direct Login ID and Password.

- Enter the OTP received on your registered mobile number.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fn2zVRUeHab5XTzNk2Q15%252Fimage.png%3Falt%3Dmedia%26token%3D32e8fb8d-2456-4788-9597-56481da29165&width=768&dpr=4&quality=100&sign=6d409ae0&sv=2)

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/icici-direct\#getting-api-key-and-api-secret)    Getting API Key and API Secret

**Register an App**:

- After logging in, navigate to the "Register an App" section.

- Enter the following details:



- **App Name**: `openalgo`

- **Redirect URL**: `http://127.0.0.1:5000/icici/callback`


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FMtYSCoMpY6zHWqH219dz%252Fimage.png%3Falt%3Dmedia%26token%3D439526c1-52cc-4063-92a9-1018479422a9&width=768&dpr=4&quality=100&sign=1342b967&sv=2)

**Generate API Credentials**:

- Once you have registered your app, the API Key and API Secret will be generated.

- Copy the API Key and API Secret.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FB4M9b0NDLikpckDsAjzt%252Fimage.png%3Falt%3Dmedia%26token%3Dd47a40ab-fef8-439c-9de8-5cf3d8aae5b0&width=768&dpr=4&quality=100&sign=e53b569e&sv=2)

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/icici-direct\#sample-.env-file)    Sample .env File

Create a `.env` file in your project directory and add the following lines. Replace `your_api_key_here` and `your_api_secret_here` with the actual values you copied earlier:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'your_api_key_here'
BROKER_API_SECRET = 'your_api_secret_here'
REDIRECT_URL = 'http://127.0.0.1:5000/icici/callback'
```

By following the steps outlined in this guide, you will have successfully obtained your ICICIDirect Breeze API credentials and configured them for use with OpenAlgo. This integration allows you to leverage the powerful trading and market data features provided by ICICIDirect to enhance your trading strategies and applications.

For further assistance, refer to the [ICICIDirect Breeze API documentation](https://api.icicidirect.com/apiuser/home) or contact their support team.

[PreviousFyers](https://docs.openalgo.in/connect-brokers/fyers) [NextKotak Securities](https://docs.openalgo.in/connect-brokers/kotak-securities)

Last updated 9 months ago

## Kotak Securities API Integration
Kotak Securities is a prominent Indian stock broker offering services on major Indian stock exchanges, including NSE, BSE, and MCX. Known for its comprehensive financial services and advanced trading solutions, Kotak Securities provides a robust platform for traders and investors. By leveraging Kotak's Trading APIs, developers and algo traders can seamlessly integrate their trading strategies with the OpenAlgo platform.

For developers and algo traders looking to use the Kotak API, the integration process generally involves the following steps:

### [Direct link to heading](https://docs.openalgo.in/connect-brokers/kotak-securities\#step-by-step-integration)    Step-by-Step Integration

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/kotak-securities\#step-1-prepare-your-trading-credentials)    Step 1: Prepare Your Trading Credentials

Ensure you have your Kotak Securities Trading User ID and Password ready.

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/kotak-securities\#step-2-register-for-api-access)    Step 2: Register for API Access

1. Navigate to the [Kotak Securities API registration page.](https://www.kotaksecurities.com/trading-tools/kotak-neo-trading-platform/trading-api/)

2. Enter your API credentials.

3. Upon successful login, you will be presented with terms and conditions. Accept them to complete the registration.

4. You will receive a new set of Username and Password via email, specifically for the API web portal.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FQlPkgkX51CH0ie8wQA7b%252Fimage.png%3Falt%3Dmedia%26token%3D97574192-ed0b-4ac0-baf5-e3aae902b3f6&width=768&dpr=4&quality=100&sign=8e9ea5c1&sv=2)

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/kotak-securities\#step-3-access-the-api-web-portal)    Step 3: Access the API Web Portal

1. Using the credentials received via email, log in to the [API web portal](https://napi.kotaksecurities.com/devportal/apis) through the link provided in the email.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FiW4lBQVUkz1AAjPG4WaV%252Fimage.png%3Falt%3Dmedia%26token%3Db9f03b68-beb1-4d9d-8df1-87b51463b305&width=768&dpr=4&quality=100&sign=2b51c297&sv=2)

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/kotak-securities\#step-4-navigate-to-applications)    Step 4: Navigate to Applications

1. Once logged in to the Kotak Developer Portal (API Manager), click on the "Applications" tab located on the top navigation bar.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FWEc1vzGeLPzpnukx3lor%252Fimage.png%3Falt%3Dmedia%26token%3Ded2f767f-e22d-448c-9441-8de5234022b2&width=768&dpr=4&quality=100&sign=23940a88&sv=2)

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/kotak-securities\#step-5-select-the-default-application)    Step 5: Select the Default Application

1. Click on the "Default Application" that is already created. Do not create a new application.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FVpZQDqCR6GQHIwiv17UV%252Fimage.png%3Falt%3Dmedia%26token%3D53c0cc58-8129-47c7-85cd-73fc26f614a7&width=768&dpr=4&quality=100&sign=6cb77ca6&sv=2)

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/kotak-securities\#step-6-generate-oauth2-token)    Step 6: Generate OAuth2 Token

1. In the left-hand sidebar, click on "OAuth2 Token" under "Production Keys".

2. Locate the fields for Consumer Key and Consumer Secret.


### [Direct link to heading](https://docs.openalgo.in/connect-brokers/kotak-securities\#retrieve-api-credentials)    Retrieve API Credentials:

- Copy the Consumer key , which will be your API Key.

- Copy the Consumer Secret, which will serve as your API Secret


### [Direct link to heading](https://docs.openalgo.in/connect-brokers/kotak-securities\#configuration)    Configuration:

Set up your environment variables in a `.env` file for Kotak's API:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'your_kotak_consumer_key'
BROKER_API_SECRET = 'your_kotak_consumer_secret'
REDIRECT_URL = 'http://127.0.0.1:5000/kotak/callback'
```

Integrating with the Kotak API opens up new possibilities for implementing automated and algorithmic trading strategies. It provides developers and traders with a robust platform to access market opportunities efficiently and effectively. To fully leverage the capabilities of the Kotak API, it is essential to follow best practices for API integration. This includes careful management of API rate limits, secure handling of API keys, and thorough error handling and logging. These practices help ensure a dependable and optimal trading experience using Kotak's advanced technological infrastructure.

[PreviousICICI Direct](https://docs.openalgo.in/connect-brokers/icici-direct) [NextPaytm](https://docs.openalgo.in/connect-brokers/paytm)

Last updated 2 months ago

## Paytm Broker Connection
Work in Progress

[PreviousKotak Securities](https://docs.openalgo.in/connect-brokers/kotak-securities) [NextShoonya](https://docs.openalgo.in/connect-brokers/shoonya)

Last updated 2 days ago

## Shoonya API Integration
Shoonya, developed by Finvasia, is a trading platform in India that allows users to trade across multiple segments—including equities, commodities, currencies, and derivatives. The platform is accessible via mobile, web, and desktop applications, offering features like advanced charting tools, real-time data, and integration with third-party platforms for algorithmic trading.

## [Direct link to heading](https://docs.openalgo.in/connect-brokers/shoonya\#getting-api-credentials)    Getting API Credentials

To integrate Shoonya with OpenAlgo, follow these steps to obtain your API key and secret:

1\. Log in to Shoonya Prism:

• Visit [https://prism.shoonya.com/api](https://prism.shoonya.com/api).

• Enter your Shoonya login credentials.

2\. Generate API Credentials:

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FLn3QLsU49s99FcI8R0uQ%252FScreenshot%25202024-12-04%2520at%25204.36.31%25E2%2580%25AFPM.png%3Falt%3Dmedia%26token%3Db04d9834-d023-4a22-8a43-96056a74ab9a&width=768&dpr=4&quality=100&sign=a653e250&sv=2)

• After logging in, navigate to the API Key section in your profile settings.

• Click on Generate API Key.

• Your Vendor Code and API Key will be displayed.

3\. Configure OpenAlgo:

• In your OpenAlgo .env file, set the following variables:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'Your Vendor Code'
BROKER_API_SECRET = 'Your API Key'
REDIRECT_URL = 'http://127.0.0.1:5000/shoonya/callback'
```

[PreviousPaytm](https://docs.openalgo.in/connect-brokers/paytm) [NextUpstox](https://docs.openalgo.in/connect-brokers/upstox)

Last updated 3 months ago

## Connect Upstox Broker
[PreviousShoonya](https://docs.openalgo.in/connect-brokers/shoonya) [NextZebu](https://docs.openalgo.in/connect-brokers/zebu)

Last updated 11 months ago

## Zebu API Integration
Zebu, a leading stock trading platform, offers robust API services for traders and developers looking to integrate algorithmic trading solutions into their platforms. The Zebu MYNT API enables access to real-time market data, portfolio management, and trade execution for stocks, commodities, and mutual funds.

To integrate Zebu’s API, follow the steps below:

### [Direct link to heading](https://docs.openalgo.in/connect-brokers/zebu\#api-key-registration)    API Key Registration

Before using the API, you need to generate an API key and API secret.

1\. Login to Zebu MYNT

Go to the [MYNT Web Application](https://mynt.in/#/) and log in with your Zebu credentials.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FpbKbQyAHh19HeRdYRZA6%252Fimage.png%3Falt%3Dmedia%26token%3Df3003882-93bd-40ae-8644-df738cbc3eec&width=768&dpr=4&quality=100&sign=2a371f87&sv=2)

2\. Access API Key Generation

Navigate to Profile and click on the Client Code at the top right corner.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FDt8ofzY6avFd3qsaTTo1%252Fimage.png%3Falt%3Dmedia%26token%3D97c5705f-71cf-4114-8282-bfe2267d61e6&width=768&dpr=4&quality=100&sign=c2d4e900&sv=2)

Press the API Key button next to the logout option.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F03mATM32xSjdIh8nU6cX%252Fimage.png%3Falt%3Dmedia%26token%3D0dd8adf5-c227-4b5c-af15-9f95a31364ff&width=768&dpr=4&quality=100&sign=8261c005&sv=2)

3\. Generate API Key and API Secret

Select the validity period for the API key (choose a duration).

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F1jMdsj1WCgh6VTFSCK7M%252Fimage.png%3Falt%3Dmedia%26token%3D641ff725-080b-4d49-b297-6cd28f860731&width=768&dpr=4&quality=100&sign=4dc88248&sv=2)

Click the Generate API Key button to generate both the API Key (Vendor Code) and the API Secret (App Key).

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FKHq1mi8Nrke2CGikqIpO%252Fimage.png%3Falt%3Dmedia%26token%3D7060a483-a938-43e5-bf7f-8d17fee278ed&width=768&dpr=4&quality=100&sign=bb385f10&sv=2)

### [Direct link to heading](https://docs.openalgo.in/connect-brokers/zebu\#generating-api-key-and-secret)    Generating API Key and Secret

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fja6w4ONQHJjwqPX7xv0e%252Fimage.png%3Falt%3Dmedia%26token%3D124601f8-d4dd-4542-aed7-d0f4674c93c0&width=768&dpr=4&quality=100&sign=7fda2767&sv=2)

Once generated, the API Key and API Secret will be provided for the app. These keys are essential for authenticating API requests. Here’s how your .env file might look:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'your_api_key_here'
BROKER_API_SECRET = 'your_api_secret_here'
REDIRECT_URL = 'http://127.0.0.1:5000/zebu/callback'
```

Make sure to store your API credentials securely and handle them with care to prevent unauthorized access.

### [Direct link to heading](https://docs.openalgo.in/connect-brokers/zebu\#zebu-api-integration)    Zebu API Integration

Integrating OpenAlgo with Zebu’s MYNT API opens opportunities for algorithmic trading and portfolio management. By using the Zebu API, developers can automate trading strategies and enhance trading experiences for users. Be sure to implement best practices for API rate limits, security, and error handling.

For further assistance or troubleshooting, refer to [Zebu API Documentation](https://zebumyntapi.web.app/).

[PreviousUpstox](https://docs.openalgo.in/connect-brokers/upstox) [NextZerodha](https://docs.openalgo.in/connect-brokers/zerodha)

Last updated 6 months ago

## Zerodha Kite API Guide
Zerodha is a leading name in the Indian financial services industry, acclaimed for its discount brokerage model and tech-centric approach to trading. Kite by Zerodha is their flagship trading platform, known for its intuitive user interface and powerful performance. Kite API is a set of REST-like APIs that exposes Zerodha's trading functionalities programmatically, allowing developers to harness the capabilities of the Kite platform within their own custom applications.

The Kite API by Zerodha is particularly popular among algorithmic traders and fintech developers, as it provides real-time data feeds, order placement, portfolio management, and a host of other critical trading operations. The API ensures seamless integration with Zerodha's services, enabling the development of automated trading bots, analytical tools, and other innovative trading solutions.

#### [Direct link to heading](https://docs.openalgo.in/connect-brokers/zerodha\#api-key-and-api-secret-creation-process)    API Key and API Secret Creation Process

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FFzmgAO7D0Vyc3k2Nql3M%252FZerodha%2520Kite%2520App%2520Creation.png%3Falt%3Dmedia%26token%3D0c135866-c077-4039-95a4-dd12ce85b9fb&width=768&dpr=4&quality=100&sign=bba616fd&sv=2)

The process to create an API key and API secret for Zerodha's Kite API involves the following steps:

1. **Visit the Zerodha Kite Developer Portal**: Access the developer portal by visiting `https://developers.kite.trade/login`.

2. **Create an Application**: Click on the 'Create App' button to start the process of registering a new application.

3. **Enter Application Details**: You will be asked to provide details such as the App Name, your Zerodha Client ID, and the Redirect URL. The Redirect URL is important for OAuth authentication, as users will be redirected here after successful authentication with Zerodha.

4. **Optional App Logo**: Uploading an app logo is optional, but it can help users recognize your application.

5. **Save Changes**: After filling in all required fields, click on 'Save Changes' to register your application with Zerodha.

6. **Copy API Credentials**: Post-registration, you will be given an API Key and API Secret. These credentials are essential for making API requests and should be stored securely.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FYkVwgbgwmQesPN0VgOEe%252FZerodha%2520Kite%2520Connect.png%3Falt%3Dmedia%26token%3Da2158fd3-e711-4fe6-b863-1259ee28bf1c&width=768&dpr=4&quality=100&sign=1fcaa830&sv=2)

Here is how you would typically store these details in a `.env` file:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
BROKER_API_KEY = 'your_api_key_here'
BROKER_API_SECRET = 'your_api_secret_here'
REDIRECT_URL = 'http://127.0.0.1:5000/zerodha/callback'
```

Utilizing the Kite API from Zerodha presents a wealth of opportunities for developers and traders aiming to create bespoke trading tools and strategies. Leveraging this API effectively calls for a commitment to best practices such as secure storage and management of API keys, mindful adherence to API rate limits, and the implementation of solid error handling and logging mechanisms. When harnessed properly, the Kite API can become a powerful asset in the arsenal of any trader or fintech application developer, enabling them to capitalize on the dynamism of financial markets with precision and efficiency.

[PreviousZebu](https://docs.openalgo.in/connect-brokers/zebu) [NextGetting Started](https://docs.openalgo.in/getting-started)

Last updated 11 months ago

## OpenAlgo Installation Guide
- [Windows Platform](https://docs.openalgo.in/getting-started/windows-installation)

- [Mac OS Installation](https://docs.openalgo.in/getting-started/mac-os-installation)

- [Linux/Nginx Server](https://docs.openalgo.in/getting-started/ubuntu-server-installation)


[PreviousZerodha](https://docs.openalgo.in/connect-brokers/zerodha) [NextWindows Installation](https://docs.openalgo.in/getting-started/windows-installation)

Last updated 1 month ago

## OpenAlgo Windows Installation
This section provides OpenAlgo Installation Guideline for Windows Users

OpenAlgo Windows Installation

## [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation\#how-to-configure-ngrok-for-openalgo-to-automate-tradingview-strategies)    How to Configure Ngrok for OpenAlgo to Automate Tradingview Strategies

How to Configure Ngrok for OpenAlgo to Automate Tradingview Strategies

## [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation\#how-to-upgrade-openalgo-to-latest-version)    How to Upgrade OpenAlgo to Latest Version

How to Upgrade OpenAlgo to Latest Version

[PreviousGetting Started](https://docs.openalgo.in/getting-started) [NextPre-Requesites](https://docs.openalgo.in/getting-started/windows-installation/pre-requesites)

Last updated 11 months ago

## Installation Prerequisites
#### [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/pre-requesites\#prerequisites)    Prerequisites

Before we begin, ensure you have the following:

- **Windows 10** or Higher

- **Visual Studio Code (VS Code)** is installed.

- **Python** version 3.10 or higher version installed

- **Git** for cloning the repository (Download from [https://git-scm.com/downloads](https://git-scm.com/downloads)).


[PreviousWindows Installation](https://docs.openalgo.in/getting-started/windows-installation) [NextSetup](https://docs.openalgo.in/getting-started/windows-installation/setup)

Last updated 10 months ago

## OpenAlgo Windows Setup
#### [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/setup\#setup)    Setup

1. **Install VS Code Extensions**: Open VS Code, navigate to the Extensions section on the left tab, and install the Python, Pylance, and Jupyter extensions.

2. **Clone the Repository**: Open the VS Code Terminal and clone the OpenAlgo repository with the command:


`git clone ` [`https://github.com/marketcalls/openalgo`](https://github.com/marketcalls/openalgo)

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F0PPG2JmmogRyFc5VrGaG%252FOpenAlgo%2520Github%2520Clone.png%3Falt%3Dmedia%26token%3D7da94b2c-988e-43c9-9144-2a44222e17db&width=768&dpr=4&quality=100&sign=c4f40028&sv=2)

[PreviousPre-Requesites](https://docs.openalgo.in/getting-started/windows-installation/pre-requesites) [NextInstall Dependencies](https://docs.openalgo.in/getting-started/windows-installation/install-dependencies)

Last updated 10 months ago

## OpenAlgo Windows Installation
Windows users Navigate to the directory where OpenAlgo is cloned and execute:

`pip install -r requirements.txt`

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FyrQDKMfVVtBvQI7wMr0O%252Fpip%2520install.png%3Falt%3Dmedia%26token%3Db6ecc633-edc5-4b58-a34a-964bd75370ef&width=768&dpr=4&quality=100&sign=31271c9a&sv=2)

[PreviousSetup](https://docs.openalgo.in/getting-started/windows-installation/setup) [NextNgrok Config](https://docs.openalgo.in/getting-started/windows-installation/ngrok-config)

Last updated 2 months ago

## Ngrok Windows Setup
## [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/ngrok-config\#download-ngrok)    Download Ngrok

1. Visit the [Ngrok](https://ngrok.com/) website and sign up or log in.

2. Navigate to the [download section](https://dashboard.ngrok.com/get-started/setup/windows) and select the version for Windows.

3. Download the ZIP file.

4. Copy the Auth Token and keep it separately later this will be used to set the **ngrok.yml** config file


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fp5yGbSOn1ObwdvrWzKZO%252FNgrok%2520Windows%2520Download.webp%3Falt%3Dmedia%26token%3De2ba63f6-0100-4689-9738-d4e573df499c&width=768&dpr=4&quality=100&sign=e15e0736&sv=2)

## [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/ngrok-config\#extract-the-zip-file)    Extract the Zip File

Once downloaded, extract the ZIP file to a folder of your choice, such as `C:\ngrok\`. This folder will contain the `ngrok.exe` executable.

## [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/ngrok-config\#add-ngrok-path-to-environmental-variable)    Add Ngrok Path to Environmental Variable

For Windows users:

1. Unzip the `ngrok` executable to a directory, e.g., `C:\ngrok\`.

2. Right-click on ‘This PC’ or ‘Computer’ on your desktop and select ‘Properties’.

3. Click on ‘Advanced system settings’.

4. Click on the ‘Environment Variables‘ button.

5. In the ‘System variables’ section, find the ‘Path‘ variable and click ‘Edit’.

6. Click ‘New’ and add the path to the directory where you unzipped `ngrok` (e.g., `C:\ngrok\`).

7. Click ‘OK’ to close the dialogs and apply the changes.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F9L4PjwWkWZ5ApFGgeYzV%252FNgrok%2520Environmental%2520Variables.webp%3Falt%3Dmedia%26token%3Ddf1e6078-ddc5-428a-9590-9627a5f20baf&width=768&dpr=4&quality=100&sign=9f017961&sv=2)

Now, `ngrok` can be run from the command line regardless of the current directory.

## [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/ngrok-config\#setting-up-the-ngrok-free-custom-domain)    Setting up the Ngrok Free Custom Domain

Go to the **Ngrok portal**, navigate to **Domains -> New Domain**, and create your free domain.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fga6ttI0qb1fKE5408nPm%252FNgrok%2520Free%2520Custom%2520Domain.webp%3Falt%3Dmedia%26token%3D52211b6d-d144-4904-af81-923da134008d&width=768&dpr=4&quality=100&sign=6e2b91c8&sv=2)

## [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/ngrok-config\#setting-up-the-ngrok-config-file)    Setting up the Ngrok Config File

1. Open the command prompt in Windows.

2. Enter the command `ngrok config edit`.

3. This opens the ngrok config file. Enter your Auth Token, Tunnel Name, hostname, and addr as follows:


Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
version: "3"
tunnels:
    flask:
        proto: http
        hostname: <your-ngrok-free-domain>.ngrok-free.app
        addr: 127.0.0.1:5000
agent:
    authtoken: <your-ngrok-auth-token>
```

Replace `<Your Auth Token>` with your actual Ngrok authentication token and `<your-chosen-hostname>` with the hostname you’ve set up.

#### [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/ngrok-config\#undefined)

## [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/ngrok-config\#security-best-practices-when-using-ngrok)    Security Best Practices When Using Ngrok

- **Keep Your Ngrok Auth Token Secure**: Your Ngrok authentication token is the key to creating tunnels with your account. Keep it secure to prevent unauthorized access.

- **Use Strong Authentication for Exposed Services**: If you’re exposing a web service or application, ensure it has its own strong authentication mechanism.

- **Monitor Tunnel Usage**: Regularly review logs and monitor tunnel usage for any unexpected or unauthorized access.

- **Limit Exposure Time**: Only keep tunnels open for as long as necessary. The longer a tunnel is open, the higher the potential security risk.


[PreviousInstall Dependencies](https://docs.openalgo.in/getting-started/windows-installation/install-dependencies) [NextEnvironmental Variables](https://docs.openalgo.in/getting-started/windows-installation/environmental-variables)

Last updated 3 months ago

## OpenAlgo Environmental Variables
Rename the `.sample.env` file located in `openalgo` folder to `.env`

Update the `.env` with your specific configurations as shown in the provided template.

### [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/environmental-variables\#sample-environmental-file)    Sample Environmental File

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Broker Configuration
BROKER_API_KEY = 'YOUR_BROKER_API_KEY'
BROKER_API_SECRET = 'YOUR_BROKER_API_SECRET'

REDIRECT_URL = 'http://127.0.0.1:5000/<broker>/callback'  # Change if different

# Valid Brokers Configuration
VALID_BROKERS = 'fivepaisa,aliceblue,angel,dhan,fyers,icici,kotak,shoonya,upstox,zebu,zerodha'

# Security Configuration
# IMPORTANT: Generate new random values for both keys during setup!

# OpenAlgo Application Key
APP_KEY = '3daa0403ce2501ee7432b75bf100048e3cf510d63d2754f952e93d88bf07ea84'

# Security Pepper - Used for hashing/encryption of sensitive data
# This is used for:
# 1. API key hashing
# 2. User password hashing
# 3. Broker auth token encryption
# Generate a new random string during setup using: python -c "import secrets; print(secrets.token_hex(32))"
API_KEY_PEPPER = 'a25d94718479b170c16278e321ea6c989358bf499a658fd20c90033cef8ce772'

# OpenAlgo Database Configuration
DATABASE_URL = 'sqlite:///db/openalgo.db'

# OpenAlgo Ngrok Configuration
NGROK_ALLOW = 'FALSE'

# OpenAlgo Hosted Server (Custom Domain Name) or Ngrok Domain Configuration
# Change to your custom domain or Ngrok domain
HOST_SERVER = 'http://127.0.0.1:5000'

# OpenAlgo Flask App Host and Port Configuration
# For 0.0.0.0 (accessible from other devices on the network)
# Flask Environment - development or production
FLASK_HOST_IP='127.0.0.1'
FLASK_PORT='5000'
FLASK_DEBUG='False'
FLASK_ENV='development'

# OpenAlgo Rate Limit Settings
LOGIN_RATE_LIMIT_MIN = "5 per minute"
LOGIN_RATE_LIMIT_HOUR = "25 per hour"
API_RATE_LIMIT="10 per second"

# OpenAlgo API Configuration

# Required to give 0.5 second to 1 second delay between multi-legged option strategies
# Single legged orders are not affected by this setting.
SMART_ORDER_DELAY = '0.5'

# Session Expiry Time (24-hour format, IST)
# All user sessions will automatically expire at this time daily
SESSION_EXPIRY_TIME = '03:00'

# Note: OpenAlgo version is now managed in utils/version.py
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/windows-installation/environmental-variables\#undefined)

[PreviousNgrok Config](https://docs.openalgo.in/getting-started/windows-installation/ngrok-config) [NextStart OpenAlgo](https://docs.openalgo.in/getting-started/windows-installation/start-openalgo)

Last updated 3 months ago

## Start OpenAlgo Application
From the `openalgo` directory, start the Flask application with the command:

`python app.py`

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F6GViS2Zo1wIK2IAAsfSL%252FRunning%2520OpenAlgo%2520Application.png%3Falt%3Dmedia%26token%3Dbf3de9d2-a86a-48d3-a8d4-555171046690&width=768&dpr=4&quality=100&sign=aee9e7de&sv=2)

[PreviousEnvironmental Variables](https://docs.openalgo.in/getting-started/windows-installation/environmental-variables) [NextSSL Verification Failed](https://docs.openalgo.in/getting-started/windows-installation/ssl-verification-failed)

Last updated 10 months ago

## SSL Verification Fix
If you’ve encountered the SSL: CERTIFICATE\_VERIFY\_FAILED error while using OpenAlgo on Windows, there’s good news. A user from the OpenAlgo community has shared a comprehensive solution that resolved this issue on their Windows system. Here’s a detailed guide on how to implement this solution.

**Understanding the Issue**

The SSL: CERTIFICATE\_VERIFY\_FAILED error usually indicates that the SSL certificate presented by the server cannot be verified by the client. This can happen due to several reasons, including outdated or missing root certificates on your system.

**Proposed Solution**

A user successfully resolved this issue by updating the root certificates on their Windows system. The solution involves using the certutil tool to update and install root certificates. Here are the detailed steps:

**1\. Update Certificates Using Certutil**

First, you need to update the root certificates on your Windows system. Follow these steps using Command Prompt with administrative access:

1\. **Open Command Prompt with Admin Access**: Right-click on the Command Prompt icon and select “Run as administrator”.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FMjG8v3CmcbGHxuDZHnnU%252Fimage.png%3Falt%3Dmedia%26token%3D714276c4-1315-466f-b07b-a414ee7c87cf&width=768&dpr=4&quality=100&sign=4c21aa6e&sv=2)

2\. **Generate Root Certificates File**: Run the following command to generate the root certificates file.

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
certutil -generateSSTFromWU roots.sst
```

3\. **Install Root Certificates**: Once the roots.sst file is generated, run the following command to install the certificates.

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
certutil -addstore -f root roots.sst
```

**2\. Verify and Reinstall**

After updating the root certificates, you can verify if the issue is resolved by running your OpenAlgo application. Here’s an additional step-by-step verification process shared by the user:

1\. **Uninstall Existing Python Installation**: If you still face issues, uninstall the existing Python installation.

2\. **Reboot the Server**: Reboot your Windows system to ensure all changes take effect.

3\. **Install Latest Python Version**: Download and install the latest version of Python (e.g., python-3.12.4-amd64).

4\. **Run OpenAlgo Application**: Run your OpenAlgo application to verify if the SSL error is resolved.

By updating the root certificates using certutil and ensuring that your system has the latest Python installation, you can resolve the SSL: CERTIFICATE\_VERIFY\_FAILED error on Windows systems. This method has been tested and confirmed to work by couple of users in the OpenAlgo community.

For more details and context, you can refer to [this issue on GitHub](https://github.com/marketcalls/openalgo/issues/43).

If you’re encountering SSL-related errors on Windows, give these Command Prompt actions a try. Your feedback and experiences are valuable, so feel free to share them in the comments below. Happy coding with OpenAlgo!

[PreviousStart OpenAlgo](https://docs.openalgo.in/getting-started/windows-installation/start-openalgo) [NextAccessing OpenAlgo](https://docs.openalgo.in/getting-started/windows-installation/accessing-openalgo)

Last updated 2 months ago

## Accessing OpenAlgo
After starting the openalgo application, access the OpenAlgo platform by navigating to [http://127.0.0.1:5000](http://127.0.0.1:5000/) in your web browser.

If ngrok is configured then access your custom ngrok domain name in the web broker.

After completing the setup, access the OpenAlgo platform by navigating to [http://127.0.0.1:5000](http://127.0.0.1:5000/) in your web browser. setup the account using [http://127.0.0.1:5000/setup](http://127.0.0.1:5000/setup)

Login into openalgo with the credentials and start using OpenAlgo for Automation.

[PreviousSSL Verification Failed](https://docs.openalgo.in/getting-started/windows-installation/ssl-verification-failed) [NextWindows Server Installation](https://docs.openalgo.in/getting-started/windows-server-installation)

Last updated 11 months ago

## OpenAlgo Windows Server Setup
#### [Direct link to heading](https://docs.openalgo.in/getting-started/windows-server-installation\#why-choose-a-server-over-a-desktop)    Why Choose a Server over a Desktop?

- **Reliability and Stability:** Servers provide a stable and dedicated environment for your trading software. Unlike a desktop, servers are designed for constant operation and are less susceptible to disruptions like power outages, system crashes, or internet issues.

- **Scalability:** If your trading algorithms become more complex or require access to vast amounts of data, you can easily scale up your server resources to accommodate those needs.

- **Security:** Servers offer enhanced security measures to protect your trading strategies and data. You can control access, enforce strict firewall rules, and implement encryption protocols for better data protection.

- **Accessibility:** You can access your server and trading platform remotely, regardless of your location. This allows for greater flexibility and control over your operations.


This video tutorial guides you through installing OpenAlgo and [Amibroker](https://docs.openalgo.in/trading-platform/amibroker) on a Windows Server via AWS, specifically targeting the Mumbai data center for optimal trading latency. It covers the complete setup process, from launching an AWS instance to configuring necessary software and testing the trading setup. For troubleshooting use [community support](https://docs.openalgo.in/community-support) for assistance.

#### [Direct link to heading](https://docs.openalgo.in/getting-started/windows-server-installation\#step-by-step-installation-process)    Step-by-Step Installation Process:

01. **Create an AWS Account:** If you don't have one already, sign up for an AWS account at [aws.amazon.com](https://aistudio.google.com/app/aws.amazon.com). AWS offers a free tier for new users, allowing you to try out the services without any initial cost.

02. **Launch an EC2 Instance:** Navigate to the EC2 service within the AWS console. Choose a Windows Server 2022 Base image for your instance and select a suitable instance type (for example t2.medium).

03. **Create a Key Pair:** This is crucial for securely connecting to your instance. Choose a unique key pair name (like "OpenAlgo-Server") and save the downloaded private key file in a secure location.

04. **Install Python:** Download the appropriate version of Python (for Amibroker compatibility, 3.11.9 is recommended) from [python.org](https://aistudio.google.com/app/python.org). During installation, ensure you select "Add python.exe to PATH" for easy access.

05. **Install VS Code:** Download VS Code from [code.visualstudio.com](https://aistudio.google.com/app/code.visualstudio.com). Once installed, go to the Extensions tab and search for "Python." Install the official Python extension to get all the required tools for coding.

06. **Install Git:** Download Git for Windows from [git-scm.com](https://aistudio.google.com/app/git-scm.com) and install it on your EC2 instance. Git is essential for downloading and managing OpenAlgo, which is hosted on GitHub.

07. **Download OpenAlgo:** Open your VS Code, open a new terminal window, and use the Git command to download OpenAlgo from GitHub: This command will create a new folder named "OpenAlgo" containing the OpenAlgo codebase as shown in the video.

08. **Install Dependencies:** Navigate to the "OpenAlgo" folder using the cd command. Open the "requirements.txt" file. This file contains all the necessary dependencies for OpenAlgo. In the VS Code terminal, run the command: **pip install -r requirements.txt**. This will install all the required libraries for OpenAlgo to run smoothly.

09. **Obtain Broker API Credentials:** Log into your Broker and obtain the API key, API Secret key, and the redirect URL (could vary broker to broker. Hence,it is recommeded to refer the connect to the broker section). Remember to copy and paste these credentials without any spaces in the .env file.

10. **Configure OpenAlgo:** Open the "OpenAlgo" folder in VS Code. Inside the "OpenAlgo" folder, you'll find a ".env" file. This file stores your broker configuration. Replace the placeholder values for API key, API Secret key, and the redirect URL with your actual Broker credentials.

11. **Launch Amibroker:** Download Amibroker from [amibroker.com](https://aistudio.google.com/app/amibroker.com). Install it and get the openalgo amibroker module from openalgo documentation section as shown in the video.

12. **Test your Setup:** You are now ready to test your setup. Open Amibroker and ensure that you have the correct data downloaded and configured. Place a test order using the "Market Order" option. You should be able to see the order ID, timestamp, and other details in your order book and OpenAlgo's trading dashboard.


Remember, if you encounter any issues or have questions, the OpenAlgo community is a great resource. Utilize their Discord server or the documentation on OpenAlgo's website for assistance.

By following these steps, you can create a stable and secure environment on AWS for backtesting, developing, and implementing your own algorithmic trading strategies using OpenAlgo and Amibroker. Happy trading!

[PreviousAccessing OpenAlgo](https://docs.openalgo.in/getting-started/windows-installation/accessing-openalgo) [NextMac OS Installation](https://docs.openalgo.in/getting-started/mac-os-installation)

Last updated 10 months ago

## OpenAlgo Mac Installation
[Pre-Requesties](https://docs.openalgo.in/getting-started/mac-os-installation/pre-requesties) [Setup](https://docs.openalgo.in/getting-started/mac-os-installation/setup) [Install Dependencies](https://docs.openalgo.in/getting-started/mac-os-installation/install-dependencies) [Ngrok Config](https://docs.openalgo.in/getting-started/mac-os-installation/ngrok-config) [Environmental Variables](https://docs.openalgo.in/getting-started/mac-os-installation/environmental-variables) [Start OpenAlgo](https://docs.openalgo.in/getting-started/mac-os-installation/start-openalgo) [Install certifi](https://docs.openalgo.in/getting-started/mac-os-installation/install-certifi) [Accessing OpenAlgo](https://docs.openalgo.in/getting-started/mac-os-installation/accessing-openalgo)

[PreviousWindows Server Installation](https://docs.openalgo.in/getting-started/windows-server-installation) [NextPre-Requesties](https://docs.openalgo.in/getting-started/mac-os-installation/pre-requesties)

## Mac OS Installation Prerequisites
- **Mac OS 11** or Higher

- Install **HomeBrew**

- **Visual Studio Code (VS Code)** is installed.

- **Python** version 3.10 or higher version installed

- **Git** for cloning the repository (Download from terminal using the command brew install github).


[PreviousMac OS Installation](https://docs.openalgo.in/getting-started/mac-os-installation) [NextSetup](https://docs.openalgo.in/getting-started/mac-os-installation/setup)

Last updated 10 months ago

## OpenAlgo Mac OS Setup
#### [Direct link to heading](https://docs.openalgo.in/getting-started/mac-os-installation/setup\#setup)    Setup

1. **Install VS Code Extensions**: Open VS Code, navigate to the Extensions section on the left tab, and install the Python, Pylance, and Jupyter extensions.

2. **Clone the Repository**: Open the VS Code Terminal , open folder where you want to download and clone the OpenAlgo repository with the command:


`git clone ` [`https://github.com/marketcalls/openalgo`](https://github.com/marketcalls/openalgo)

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FQEnksLtRY1cUzNMdMQyz%252FClone%2520OpenAlgo.png%3Falt%3Dmedia%26token%3D51eb4be1-84f1-4eed-a571-0ec2a95a56fb&width=768&dpr=4&quality=100&sign=2bcc254b&sv=2)

[PreviousPre-Requesties](https://docs.openalgo.in/getting-started/mac-os-installation/pre-requesties) [NextInstall Dependencies](https://docs.openalgo.in/getting-started/mac-os-installation/install-dependencies)

Last updated 10 months ago

## Mac OS Installation Guide
Windows users Navigate to the directory where OpenAlgo is cloned and execute:

`pip3 install -r requirements.txt`

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F2yttSeo3jHXAdAZCkMNk%252FInstall%2520dependencies.png%3Falt%3Dmedia%26token%3D40f0ae87-adb2-42c0-8d4a-e16a65be8537&width=768&dpr=4&quality=100&sign=fa211ef3&sv=2)

[PreviousSetup](https://docs.openalgo.in/getting-started/mac-os-installation/setup) [NextNgrok Config](https://docs.openalgo.in/getting-started/mac-os-installation/ngrok-config)

Last updated 10 months ago

## Ngrok Configuration
[PreviousInstall Dependencies](https://docs.openalgo.in/getting-started/mac-os-installation/install-dependencies) [NextEnvironmental Variables](https://docs.openalgo.in/getting-started/mac-os-installation/environmental-variables)

Last updated 3 months ago

## Mac OS Environmental Variables
Rename the `.sample.env` file located in `openalgo` folder to `.env`

Update the `.env` with your specific configurations as shown in the provided template.

### [Direct link to heading](https://docs.openalgo.in/getting-started/mac-os-installation/environmental-variables\#sample-environmental-file)    Sample Environmental File

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Broker Configuration
BROKER_API_KEY = 'YOUR_BROKER_API_KEY'
BROKER_API_SECRET = 'YOUR_BROKER_API_SECRET'

REDIRECT_URL = 'http://127.0.0.1:5000/<broker>/callback'  # Change if different

# Valid Brokers Configuration
VALID_BROKERS = 'fivepaisa,aliceblue,angel,dhan,fyers,icici,kotak,shoonya,upstox,zebu,zerodha'

# Security Configuration
# IMPORTANT: Generate new random values for both keys during setup!

# OpenAlgo Application Key
APP_KEY = '3daa0403ce2501ee7432b75bf100048e3cf510d63d2754f952e93d88bf07ea84'

# Security Pepper - Used for hashing/encryption of sensitive data
# This is used for:
# 1. API key hashing
# 2. User password hashing
# 3. Broker auth token encryption
# Generate a new random string during setup using: python -c "import secrets; print(secrets.token_hex(32))"
API_KEY_PEPPER = 'a25d94718479b170c16278e321ea6c989358bf499a658fd20c90033cef8ce772'

# OpenAlgo Database Configuration
DATABASE_URL = 'sqlite:///db/openalgo.db'

# OpenAlgo Ngrok Configuration
NGROK_ALLOW = 'FALSE'

# OpenAlgo Hosted Server (Custom Domain Name) or Ngrok Domain Configuration
# Change to your custom domain or Ngrok domain
HOST_SERVER = 'http://127.0.0.1:5000'

# OpenAlgo Flask App Host and Port Configuration
# For 0.0.0.0 (accessible from other devices on the network)
# Flask Environment - development or production
FLASK_HOST_IP='127.0.0.1'
FLASK_PORT='5000'
FLASK_DEBUG='False'
FLASK_ENV='development'

# OpenAlgo Rate Limit Settings
LOGIN_RATE_LIMIT_MIN = "5 per minute"
LOGIN_RATE_LIMIT_HOUR = "25 per hour"
API_RATE_LIMIT="10 per second"

# OpenAlgo API Configuration

# Required to give 0.5 second to 1 second delay between multi-legged option strategies
# Single legged orders are not affected by this setting.
SMART_ORDER_DELAY = '0.5'

# Session Expiry Time (24-hour format, IST)
# All user sessions will automatically expire at this time daily
SESSION_EXPIRY_TIME = '03:00'

# Note: OpenAlgo version is now managed in utils/version.py
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/mac-os-installation/environmental-variables\#undefined)

[PreviousNgrok Config](https://docs.openalgo.in/getting-started/mac-os-installation/ngrok-config) [NextStart OpenAlgo](https://docs.openalgo.in/getting-started/mac-os-installation/start-openalgo)

Last updated 3 months ago

## OpenAlgo Mac Installation
From the `openalgo` directory, start the Flask application with the command:

`python3 app.py`

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FdeF5SKFXgSRdQDir9moa%252Frunning%2520openalgo.png%3Falt%3Dmedia%26token%3D899d8453-4b7b-4604-8bb2-0fa1cfa190d6&width=768&dpr=4&quality=100&sign=202ad11d&sv=2)

[PreviousEnvironmental Variables](https://docs.openalgo.in/getting-started/mac-os-installation/environmental-variables) [NextInstall certifi](https://docs.openalgo.in/getting-started/mac-os-installation/install-certifi)

Last updated 10 months ago

## macOS Python SSL Fix
If you’re encountering, SSLCertVerificationError: \[SSL: CERTIFICATE\_VERIFY\_FAILED\] certificate verify failed: unable to get local issuer certificate, is common on macOS when Python is unable to verify SSL certificates due to a missing or inaccessible certificate store. This usually affects the ability to fetch data over HTTPS, such as when attempting to download or use resources like ngrok.

To resolve this issue on macOS, you need to install the certificates for Python. Follow these steps:

In this example I used python3.11 as the version replace it with python3.xx version in the below commands

**1\. Locate the Correct Path of Python Installation:**

To find out where Python 3.11 is installed on your system, use the which command. Open your Terminal and type:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
which python3.11
```

Locate and Run the Install Certificates Script:

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FjNIidEvTmbvHer9wUHkM%252FInstall%2520Python%2520SSL%2520Certifications.png%3Falt%3Dmedia%26token%3D2722fceb-41b8-4576-848f-571d390c6de6&width=768&dpr=4&quality=100&sign=5d48e415&sv=2)

Once you have the correct path to Python 3.11, you can attempt to locate the Install Certificates.command script. Typically, if you installed Python via Homebrew, the command might not directly exist, but Python installations downloaded from the official Python website typically include it.

Assuming you installed Python using Homebrew, you might not find an Install Certificates.command. Instead, you can ensure the certificates are installed by manually installing the certifi package and configuring your environment to use it. Here’s how you can do that:

1. **Install certifi:**


Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
python3.11 -m pip install certifi
```

1. **Set the SSL\_CERT\_FILE Environment Variable:**


To manually specify the certificate file for Python to use, you can set the SSL\_CERT\_FILE environment variable to point to the certifi certificate file:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
export SSL_CERT_FILE=$(python3.11 -m certifi)
```

1. **Retry Running Your Python Code:**


After setting up the certificates through certifi, try running your Python code again. This should resolve any SSL certificate issues.

If you installed Python using a method other than Homebrew and the Python installation includes the Install Certificates.command, you would typically find it in the Python application directory within /Applications/Python 3.11 or similar. If this is the case, navigate to this directory in Finder, and you should be able to run the Install Certificates.command by double-clicking on it.

Ensure that you are using the correct paths and commands based on how and where Python is installed on your system.

[PreviousStart OpenAlgo](https://docs.openalgo.in/getting-started/mac-os-installation/start-openalgo) [NextAccessing OpenAlgo](https://docs.openalgo.in/getting-started/mac-os-installation/accessing-openalgo)

Last updated 10 months ago

## Accessing OpenAlgo
After starting the openalgo application, access the OpenAlgo platform by navigating to [http://127.0.0.1:5000](http://127.0.0.1:5000/) in your web browser.

If ngrok is configured then access your custom ngrok domain name in the web broker.

After completing the setup, access the OpenAlgo platform by navigating to [http://127.0.0.1:5000](http://127.0.0.1:5000/) in your web browser. setup the account using [http://127.0.0.1:5000/setup](http://127.0.0.1:5000/setup)

Login into openalgo with the credentials and start using OpenAlgo for Automation.

[PreviousInstall certifi](https://docs.openalgo.in/getting-started/mac-os-installation/install-certifi) [NextAmazon Elastic Beanstalk](https://docs.openalgo.in/getting-started/amazon-elastic-beanstalk)

Last updated 11 months ago

## Hosting OpenAlgo on AWS
## [Direct link to heading](https://docs.openalgo.in/getting-started/amazon-elastic-beanstalk\#hosting-openalgo-in-the-cloud-using-amazon-aws-elastic-beanstalk)    Hosting OpenAlgo in the Cloud using Amazon AWS Elastic Beanstalk

[OpenAlgo](https://openalgo.in/) is an open-source algo trading platform, offering a wide range of features for both beginners and experienced traders. This tutorial guides you through the process of hosting OpenAlgo in the cloud using Amazon AWS Elastic Beanstalk.

**Prerequisites:**

- An Amazon AWS account

- VS Code (or any code editor with Git installed)

- A hosting account with DNS management and custom domain(Cloudflare is recommended)


Hosting OpenAlgo in the Cloud using Amazon AWS Elastic Beanstalk - YouTube

OpenAlgo

886 subscribers

[Hosting OpenAlgo in the Cloud using Amazon AWS Elastic Beanstalk](https://www.youtube.com/watch?v=MWOuMUzWGgI)

OpenAlgo

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

If playback doesn't begin shortly, try restarting your device.

More videos

## More videos

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

[Watch on](https://www.youtube.com/watch?v=MWOuMUzWGgI&embeds_referring_euri=https%3A%2F%2Fcdn.iframe.ly%2F)

0:00

0:00 / 15:45•Live

•

[Watch on YouTube](https://www.youtube.com/watch?v=MWOuMUzWGgI "Watch on YouTube")

**Steps by Step Instruction to host OpenAlgo in Amazon Cloud with custom domain**

**Clone the OpenAlgo Repository:**

- Go to the [OpenAlgo GitHub repository](https://github.com/marketcalls/openalgo).

- Copy the repository link.

- Open your VS Code and navigate to your project folder.

- Open a new terminal in VS Code and type **git clone** [**https://github.com/marketcalls/openalgo**](https://github.com/marketcalls/openalgo) and press enter.

- This will download the OpenAlgo application locally in your VS Code.


**Configure the .env File**

- Open the sample.env file in the OpenAlgo project.

- Right-click and rename it to .env.

- Update the REDIRECT\_URL to your custom domain.

- For example, if your custom domain for angel trading account is opendash.app, update it to https://opendash.app/angel/callback.

- If you’re not using HTTPS, use http://openalgo.app/angel/callback.

- Make sure to update the HOST\_SERVER to your custom domain as well as shown in the video.

- You might also want to update the BROKER\_API\_KEY and BROKER\_API\_SECRET according to your broker credentials.

- Save the changes.


**Create the Elastic Beanstalk Application**

- Go to the [AWS Management Console](https://aws.amazon.com/) and sign in.

- Select the desired region (e.g., Asia Pacific (Mumbai) ap-south-1).

- Search for “Elastic Beanstalk”.

- Click on “Create application”.

- Provide an application name (e.g., openalgo) and an environment name (e.g., openalgo-env).

- Ensure the domain name is available (e.g., openalgo.ap-south-1.elasticbeanstalk.com).

- Provide a description for your environment (optional).

- Select “Python” as the platform and choose the “Python 3.11” platform branch.

- Select “4.1.0 (Recommended)” as the platform version.

- For “Application code”, choose “Upload your code”.

- Give a version label (e.g., 1.0.0.1).

- Choose “Local file” for “Source code origin”.

- Select the zipped OpenAlgo project file you created earlier.

- Choose “Single instance (free tier eligible)” as the configuration preset (or choose “Custom configuration” for more options).

- Click on “Next” to proceed.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FNdhF417PVzLfFLNrWWiA%252Fimage.png%3Falt%3Dmedia%26token%3Dfd4b2078-f193-41e3-a112-9042502be4a7&width=768&dpr=4&quality=100&sign=50e68e93&sv=2)

**Configure Service Access:**

- Select the existing service role you created earlier.

- If you don’t have one, click on “Create and use new service role”.

- Select your EC2 key pair (e.g., test).

- If you don’t have an EC2 key pair, click on “Choose an EC2 key pair” and create a new one.

- Select the existing EC2 instance profile (e.g., “aws-elasticbeanstalk-ec2-role-flaskenv”).

- If you don’t have one, click on “View permission details” and create a new instance profile.

- Click on “Next”.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FSGNr4vPZmStLqQuWBlO0%252Fimage.png%3Falt%3Dmedia%26token%3D7f28af87-bb71-4ccf-a970-d7ab33d2d7e2&width=768&dpr=4&quality=100&sign=bdb1470f&sv=2)

**Configure VPC Settings**

- Select the default VPC. You can create a new VPC, if needed.

- This is the virtual network where your Elastic Beanstalk environment will be deployed.


**Activate Public IP Address and Instance Subnet:**

- Ensure the Public IP address is enabled for your instance. This allows your application to be accessible from the internet.

- Choose an instance subnet from your VPC.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fare2GJssCn5u3SvrAf4h%252Fimage.png%3Falt%3Dmedia%26token%3D83b72e54-43a7-4d1c-90d4-5befbf9b4cfd&width=768&dpr=4&quality=100&sign=932babf7&sv=2)

**Configure Security Group:**

- By default, select the default security group.

- This will allow your application to connect to the internet.

- If you want to restrict access, you can create a new security group and add rules to control incoming and outgoing traffic.

- Click on “Next”.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FDADJzwvj3HN3v7DgG6B0%252Fimage.png%3Falt%3Dmedia%26token%3D8cb33e20-153b-4661-81ef-33d3da132a27&width=768&dpr=4&quality=100&sign=97056f9f&sv=2)

**Configure Instance Type, Load Balancer, and CloudWatch Logs:**

- Choose an instance type (e.g., T3 micro, T3 Small).

- If you are looking for a free tier option, use T3 micro.

- Select “Single instance” if you don’t need a load balancer.

- Choose “Enhanced” for health reporting (optional).

- Choose the default settings for CloudWatch logs (optional).

- Click on “Next”.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F8m6EcTdF2UvAvkRzxTv7%252Fimage.png%3Falt%3Dmedia%26token%3D52078497-716f-4c32-9056-c10cf7e9b688&width=768&dpr=4&quality=100&sign=fed470b&sv=2)

**Review and Submit:**

- Review all the configuration steps.

- Make sure all the settings are correct.

- Click on “Submit”.

- This will initiate the automated provisioning of the servers in the backend.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F1797lx2wk4HGOb7CT6fv%252Fimage.png%3Falt%3Dmedia%26token%3Da294e169-faca-4274-bf87-c9fed3ec052d&width=768&dpr=4&quality=100&sign=9dbb687b&sv=2)

After deploying your OpenAlgo application on Elastic Beanstalk, you need to configure your custom domain to point to the Elastic Beanstalk environment. This involves creating a CNAME record in your DNS settings. Here’s how to do it:

**Access Your DNS Provider:**

- Log in to your DNS provider (e.g., Cloudflare, GoDaddy, Namecheap, etc.)

- Find your domain’s DNS management section.


**Create a CNAME Record:**

- Click on “Add record” or similar to create a new record.

- **Name:** Enter the subdomain you want to use (e.g., trade). This will be the part of your custom domain that will point to your Elastic Beanstalk application (e.g., trade.openalgo.app).

- **Type:** Select “CNAME”.

- **Value:** Copy the Elastic Beanstalk domain generated by AWS. It will look something like this: openalgo.ap-south-1.elasticbeanstalk.com.


**Save and Verify:**

- Save the CNAME record you just created.

- Wait for the DNS propagation to complete, which may take some time (usually 24-48 hours).

- Test your custom domain by entering it into your web browser. You should be redirected to your OpenAlgo application on Elastic Beanstalk.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2Fi0.wp.com%2Fwww.marketcalls.in%2Fwp-content%2Fuploads%2F2024%2F06%2Fimage-17-1024x466.png%3Fresize%3D1024%252C466%26ssl%3D1&width=768&dpr=4&quality=100&sign=aa4f379c&sv=2)

**Example:**

- Let’s say your custom domain is openalgo.app.

- You want to use the subdomain trade to access your OpenAlgo application.

- In your DNS settings, create a CNAME record with the following:



- **Name:** trade

- **Type:** CNAME

- **Value:** openalgo.ap-south-1.elasticbeanstalk.com (replace with your Elastic Beanstalk domain)


Once the DNS propagation completes, you’ll be able to access your OpenAlgo application at trade.openalgo.app.

**SSL Configuration in Cloudflare**

If you are using Cloudflare for DNS Management ensure to enable the flexible mode to access the openalgo domain with https SSL certificate.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2Fi0.wp.com%2Fwww.marketcalls.in%2Fwp-content%2Fuploads%2F2024%2F06%2Fimage-18-1024x524.png%3Fresize%3D1024%252C524%26ssl%3D1&width=768&dpr=4&quality=100&sign=71b2d10f&sv=2)

By following these steps, you can successfully deploy OpenAlgo in the cloud using Amazon AWS Elastic Beanstalk. You can then start configuring your trading strategies and begin your algorithmic trading journey.

[PreviousAccessing OpenAlgo](https://docs.openalgo.in/getting-started/mac-os-installation/accessing-openalgo) [NextUbuntu Server Installation](https://docs.openalgo.in/getting-started/ubuntu-server-installation)

Last updated 9 months ago

## Ubuntu Server Installation
### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#undefined)

YouTube

### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#prerequisites)    Prerequisites

#### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#system-requirements)    System Requirements

- Ubuntu Server (22.04 LTS or later recommended)

- Minimum 2GB RAM

- Clean installation recommended


#### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#domain-and-dns-setup-required)    Domain and DNS Setup (Required)

1. **Cloudflare Account Setup**



- Create a Cloudflare account if you don't have one

- Add your domain to Cloudflare

- Update your domain's nameservers to Cloudflare's nameservers


2. **DNS Configuration**



- Add an A record pointing to your server's IP address







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Type: A
Name: yourdomain.com
Content: YOUR_SERVER_IP
Proxy status: Proxied
```

- Add a CNAME record for the domain (optional). Not required for sub.yourdomain.com







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Type: CNAME
Name: www
Content: yourdomain.com
Proxy status: Proxied
```


3. **SSL/TLS Configuration in Cloudflare**



- Go to SSL/TLS section

- Set encryption mode to "Full (strict)"


#### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#broker-setup-required)    Broker Setup (Required)

- Obtain your broker's API credentials as per the openalgo documentation:



- API Key

- API Secret


- Prepare the Redirection URL as per your domain name and broker name


Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Example - domain name is yourdomain.com and broker is icici

https://yourdomain.com/icici/callback

# Example - domain name is sub.yourdomain.com and broker is angel

https://sub.yourdomain.com/angel/callback
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#login-to-the-ubuntu-server)    Login to the Ubuntu Server

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Connect to your Ubuntu server via SSH
# example ssh root@134.56.76.23

ssh user@your_server_ip
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#installation-steps)    Installation Steps

#### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#id-1.-download-installation-script)    1\. Download Installation Script

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Create a directory for installation
mkdir -p ~/openalgo-install
cd ~/openalgo-install

# Download the installation script
wget https://raw.githubusercontent.com/marketcalls/openalgo/main/install/install.sh

# Make the script executable
chmod +x install.sh
```

#### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#id-2.-run-installation-script)    2\. Run Installation Script

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Execute the installation script
sudo ./install.sh
```

The script will interactively prompt you for:

- Your domain name (supports both root domains and subdomains)

- Broker selection

- Broker API credentials


The installation process will:

- Install required packages

- Configure Nginx with SSL

- Set up the OpenAlgo application

- Create systemd service with unique name based on domain and broker

- Generate installation logs in the logs directory


**Multi-Domain Deployment**

The installation script supports deploying multiple instances on the same server:

- Each deployment gets a unique service name (e.g., openalgo-yourdomain-broker)

- Separate configuration files and directories for each deployment

- Individual log files for each installation in the logs directory

- Independent SSL certificates for each domain

- Isolated Python virtual environments


Example of running multiple deployments:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# First deployment
sudo ./install.sh
# Enter domain: trading1.yourdomain.com
# Enter broker: fyers

# Second deployment
sudo ./install.sh
# Enter domain: trading2.yourdomain.com
# Enter broker: zerodha
```

Each deployment will:

- Have its own systemd service

- Use separate configuration files

- Store logs in unique timestamped files

- Run independently of other deployments


#### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#id-3.-verify-installation)    3\. Verify Installation

After installation completes, verify each deployment:

1. **Check Service Status**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Example for Fyers deployment
sudo systemctl status openalgo-fyers-yourdomain-fyers

# Example for Zerodha deployment
sudo systemctl status openalgo-zerodha-yourdomain-zerodha
```

2. **Verify Nginx Configuration**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Test overall Nginx configuration
sudo nginx -t

# Check specific site configurations
ls -l /etc/nginx/sites-enabled/
cat /etc/nginx/sites-enabled/fyers.yourdomain.com
cat /etc/nginx/sites-enabled/zerodha.yourdomain.com
```

3. **Access Web Interfaces** Test each deployment in your web browser:







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
https://fyers.yourdomain.com
https://zerodha.yourdomain.com
```

4. **Check Installation Logs**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# View the installation log for your deployment
cat install/logs/install_YYYYMMDD_HHMMSS.log
```


### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#troubleshooting)    Troubleshooting

#### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#common-issues)    Common Issues

1. **SSL Certificate Issues**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Check Certbot logs
sudo journalctl -u certbot

# Example: Manually run certificate installation for trading.yourdomain.com
sudo certbot --nginx -d trading.yourdomain.com

# Example: Manually run certificate installation for multiple subdomains
sudo certbot --nginx -d fyers.yourdomain.com -d zerodha.yourdomain.com
```

2. **Application Not Starting** Example scenario: Managing multiple broker deployments







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Example 1: Fyers deployment on fyers.yourdomain.com
sudo journalctl -u openalgo-fyers-yourdomain-fyers    # View logs
sudo systemctl restart openalgo-fyers-yourdomain-fyers # Restart service

# Example 2: Zerodha deployment on zerodha.yourdomain.com
sudo journalctl -u openalgo-zerodha-yourdomain-zerodha # View logs
sudo systemctl restart openalgo-zerodha-yourdomain-zerodha # Restart service
```

3. **Nginx Issues**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Check Nginx error logs for all deployments
sudo tail -f /var/log/nginx/error.log

# Check access logs for specific domains
sudo tail -f /var/log/nginx/fyers.yourdomain.com.access.log
sudo tail -f /var/log/nginx/zerodha.yourdomain.com.access.log
```

4. **Installation Logs** Example: Checking installation logs for multiple deployments







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# List all installation logs
ls -l install/logs/

# View latest installation log
cat install/logs/$(ls -t install/logs/ | head -1)

# Example: View specific deployment logs
cat install/logs/install_20240101_120000.log  # Fyers installation
cat install/logs/install_20240101_143000.log  # Zerodha installation
```


#### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#managing-multiple-deployments)    Managing Multiple Deployments

1. **Service Management Examples**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# List all OpenAlgo services
systemctl list-units "openalgo-*"

# Example outputs:
# openalgo-fyers-yourdomain-fyers.service    loaded active running
# openalgo-zerodha-yourdomain-zerodha.service loaded active running

# Restart specific deployment
sudo systemctl restart openalgo-fyers-yourdomain-fyers

# Check status of specific deployment
sudo systemctl status openalgo-zerodha-yourdomain-zerodha
```

2. **Log Management Examples**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# View real-time logs for Fyers deployment
sudo journalctl -f -u openalgo-fyers-yourdomain-fyers

# View last 100 lines of Zerodha deployment logs
sudo journalctl -n 100 -u openalgo-zerodha-yourdomain-zerodha

# View logs since last hour for specific deployment
sudo journalctl --since "1 hour ago" -u openalgo-fyers-yourdomain-fyers
```

3. **Nginx Configuration Examples**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# View Nginx configs for different deployments
sudo nano /etc/nginx/sites-available/fyers.yourdomain.com
sudo nano /etc/nginx/sites-available/zerodha.yourdomain.com

# Test Nginx configuration
sudo nginx -t

# Reload Nginx after config changes
sudo systemctl reload nginx
```

4. **Installation Directory Examples**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# List deployment directories
ls -l /var/python/openalgo-flask/

# Example structure:
# /var/python/openalgo-flask/fyers-yourdomain-fyers/
# /var/python/openalgo-flask/zerodha-yourdomain-zerodha/

# Check specific deployment files
ls -l /var/python/openalgo-flask/fyers-yourdomain-fyers/
```


### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#security-notes)    Security Notes

1. **Firewall**



- The installation configures UFW to allow only HTTP, HTTPS, and SSH

- Additional ports can be opened if needed:








Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
sudo ufw allow <port_number>
```


2. **SSL/TLS**



- Certificates are automatically renewed by Certbot

- The installation configures modern SSL parameters

- Regular updates are recommended:


Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
sudo apt update && sudo apt upgrade -y
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#post-installation)    Post-Installation

1. Configure your broker settings in the web interface

2. Set up monitoring and alerts if needed

3. Regularly check logs for any issues

4. Keep the system updated with security patches


### [Direct link to heading](https://docs.openalgo.in/getting-started/ubuntu-server-installation\#support)    Support

For issues and support:

- Check the [GitHub repository](https://github.com/marketcalls/openalgo)

- Review the logs using commands provided above

- Contact support with relevant log information


Remember to:

- Regularly backup your configuration

- Monitor system resources

- Keep the system updated

- Review security best practices


[PreviousAmazon Elastic Beanstalk](https://docs.openalgo.in/getting-started/amazon-elastic-beanstalk) [NextDocker Development](https://docs.openalgo.in/getting-started/docker-development)

Last updated 3 months ago

## OpenAlgo Docker Setup
This guide focuses on setting up a development environment for OpenAlgo using Docker.

### [Direct link to heading](https://docs.openalgo.in/getting-started/docker-development\#prerequisites)    Prerequisites

- Docker Engine

- Docker Compose

- Git


### [Direct link to heading](https://docs.openalgo.in/getting-started/docker-development\#files-required)    Files Required

**1\. Dockerfile**

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
FROM python:3.11-slim

WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends gcc python3-dev libpq-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements-nginx.txt .
RUN pip install --no-cache-dir -r requirements-nginx.txt
RUN pip install gunicorn eventlet>=0.24.1

# Copy project files
COPY . .

# Create directories and set permissions
RUN mkdir -p db logs && \
    chmod -R 777 db logs

# Command to run the application
CMD ["gunicorn", \\
     "--bind", "0.0.0.0:5000", \\
     "--worker-class", "eventlet", \\
     "--workers", "1", \\
     "--reload", \\
     "--log-level", "debug", \\
     "--access-logfile", "-", \\
     "--error-logfile", "-", \\
     "app:app"]
```

**2\. docker-compose.yml**

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
version: '3.8'

services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - ./db:/app/db
    env_file:
      - .env
    environment:
      - FLASK_DEBUG=True
      - FLASK_ENV=development
      - DATABASE_URL=sqlite:///db/openalgo.db
    restart: unless-stopped
```

**3\. .dockerignore**

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
**/__pycache__
**/*.pyc
**/*.pyo
**/*.pyd
.Python
env/
venv/
.env*
!.env.example
*.sqlite
.git
.gitignore
.docker
Dockerfile
README.md
*.sock
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/docker-development\#quick-start)    Quick Start

1. **Create Environment File:**



Copy `.sample.env` to `.env`:







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
cp .sample.env .env
```

2. **Build and Start:**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
docker-compose up --build
```

3. **View Logs:**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
docker-compose logs -f
```


### [Direct link to heading](https://docs.openalgo.in/getting-started/docker-development\#development-features)    Development Features

- Hot reload enabled (code changes reflect immediately)

- Debug mode active

- Console logging

- Port 5000 exposed

- Volume mounting for live code updates


### [Direct link to heading](https://docs.openalgo.in/getting-started/docker-development\#common-commands)    Common Commands

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Start development server
docker-compose up

# Start in detached mode
docker-compose up -d

# View logs
docker-compose logs -f

# Stop containers
docker-compose down

# Rebuild after dependency changes
docker-compose up --build

# Enter container shell
docker-compose exec web bash

# Check container status
docker-compose ps
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/docker-development\#directory-structure)    Directory Structure

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
openalgo/
├── Dockerfile
├── docker-compose.yml
├── .dockerignore
├── .env
├── app.py
├── requirements-nginx.txt
└── db/
    └── openalgo.db
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/docker-development\#development-tips)    Development Tips

1. **Live Reload:**



- Code changes will automatically reload

- Check logs for errors after changes


2. **Database Access:**



- SQLite database persists in ./db directory

- Can be accessed from both host and container


3. **Debugging:**



- Logs are printed to console

- Debug mode enables detailed error pages


4. **Dependencies:**



- Add new packages to requirements-nginx.txt

- Rebuild container after adding dependencies:







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
docker-compose up --build
```


### [Direct link to heading](https://docs.openalgo.in/getting-started/docker-development\#troubleshooting)    Troubleshooting

1. **Port Already In Use:**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Check what's using port 5000
sudo lsof -i :5000

# Stop the container and restart
docker-compose down
docker-compose up
```

2. **Database Issues:**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Fix permissions if needed
chmod -R 777 db/
```

3. **Container Won't Start:**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Check logs
docker-compose logs

# Remove container and try again
docker-compose down
docker-compose up --build
```

4. **Package Installation Issues:**







Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Rebuild without cache
docker-compose build --no-cache
docker-compose up
```


### [Direct link to heading](https://docs.openalgo.in/getting-started/docker-development\#note)    Note

This configuration is optimized for development. For production deployment, additional security measures and optimizations would be necessary.

[PreviousUbuntu Server Installation](https://docs.openalgo.in/getting-started/ubuntu-server-installation) [NextTesting OpenAlgo in Cloud](https://docs.openalgo.in/getting-started/testing-openalgo-in-cloud)

Last updated 4 months ago

## Testing OpenAlgo in Cloud
### [Direct link to heading](https://docs.openalgo.in/getting-started/testing-openalgo-in-cloud\#testing-openalgo-in-the-github-codespaces)    Testing OpenAlgo in the Github Codespaces

Learn to Deploy OpenAlgo Instantly in Github CodeSpaces

### [Direct link to heading](https://docs.openalgo.in/getting-started/testing-openalgo-in-cloud\#test-openalgo-in-google-colab)    Test OpenAlgo in Google Colab

How to Run and Test OpenAlgo in Google Colab

[PreviousDocker Development](https://docs.openalgo.in/getting-started/docker-development) [NextUpgrade](https://docs.openalgo.in/getting-started/upgrade)

Last updated 3 months ago

## OpenAlgo Upgrade Guide
Follow these steps to upgrade your OpenAlgo application:

### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#backup-the-database)    Backup the Database

Navigate to your database folder and make a copy of the current database file for safekeeping.

### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#update-the-application-code)    Update the Application Code

Open your terminal and run the following command to pull the latest changes:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
cd openalgo
git pull
```

**4\. Install Dependencies**

Install or update the required Python packages by running:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
pip install -r requirements.txt
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#run-the-migration-script)    Run the Migration Script

Execute the migration script to add the `feed_token` column to your database:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Navigate to your OpenAlgo upgrade directory
cd upgrade

# Run the migration script
python add_feed_token.py

# Get back to openalgo directory
cd..

# Run the OpenAlgo App
python app.py
```

The script will:

1. Check if the `feed_token` column already exists

2. Add the column if it doesn't exist

3. Log the results of the operation


### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#verify-the-migration)    Verify the Migration

After running the script, verify that the column was added successfully by:

1. Checking the script output for success messages

2. Logging into your OpenAlgo application and testing Angel broker authentication


### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#technical-notes)    Technical Notes

#### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#what-is-the-feed-token)    What is the Feed Token?

The feed token (data token) is provided by Angel Broking's API during authentication and is used for real-time market data operations. It is separate from the authentication token and has its own validity period.

#### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#implementation-details)    Implementation Details

The upgrade adds:

1. A new `feed_token` column to the `auth` table in the database

2. Storage and retrieval mechanisms for the feed token

3. Integration of the feed token with market data operations


#### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#modified-files)    Modified Files

This upgrade modifies the following key files:

1. `openalgo/broker/angel/api/auth_api.py` \- To extract and return the feed token from the Angel authentication response

2. `openalgo/database/auth_db.py` \- To add storage and retrieval functions for the feed token

3. `openalgo/utils/auth_utils.py` \- To handle the feed token in session management


### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#troubleshooting)    Troubleshooting

#### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#unable-to-open-database-file-error)    "Unable to open database file" Error

If you encounter this error, check:

1. The database path in your `.env` file is correct

2. The directory exists and has proper permissions

3. You are running the script from the correct location


#### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#feed_token-column-already-exists-message)    "feed\_token column already exists" Message

This is not an error. It means the migration has already been applied to your database.

#### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#authentication-issues-after-upgrade)    Authentication Issues After Upgrade

If you experience authentication issues:

1. Verify that all files have been properly updated

2. Log out and log back in to generate a new feed token

3. Check the application logs for specific error messages


### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#support)    Support

If you need assistance with the feed token upgrade, please:

1. Check the OpenAlgo documentation

2. Refer to the Angel broking API documentation for feed token details

3. File an issue on the OpenAlgo GitHub repository


### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#dependecies-check-optional)    Dependecies Check (Optional)

Ensure all installed dependencies are compatible with the new version:

• Use a virtual environment to avoid conflicts:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
pip install -r requirements.txt
```

### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#configure-the-environment)    Configure the Environment

Create a .env file from the provided .sample.env file. Update the following configurations in the .env file:

• Generate random values for APP\_KEY and API\_KEY\_PEPPER using:

• Update the following parameters:

• BROKER\_API\_KEY

• BROKER\_API\_SECRET

• REDIRECT\_URL

• Verify and adjust other configurations as needed.

#### [Direct link to heading](https://docs.openalgo.in/getting-started/upgrade\#sample-.env-template)    Sample .env template

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
# Broker Configuration
BROKER_API_KEY = 'YOUR_BROKER_API_KEY'
BROKER_API_SECRET = 'YOUR_BROKER_API_SECRET'

REDIRECT_URL = 'http://127.0.0.1:5000/<broker>/callback'  # Change if different

# Valid Brokers Configuration
VALID_BROKERS = 'fivepaisa,aliceblue,angel,dhan,fyers,icici,kotak,shoonya,upstox,zebu,zerodha'

# Security Configuration
# IMPORTANT: Generate new random values for both keys during setup!

# OpenAlgo Application Key
APP_KEY = 'GENERATE_A_RANDOM_APP_KEY'

# Security Pepper - Used for hashing/encryption of sensitive data
# This is used for:
# 1. API key hashing
# 2. User password hashing
# 3. Broker auth token encryption
API_KEY_PEPPER = 'GENERATE_A_RANDOM_PEPPER_KEY'

# OpenAlgo Database Configuration
DATABASE_URL = 'sqlite:///db/openalgo.db'

# OpenAlgo Ngrok Configuration
NGROK_ALLOW = 'FALSE'

# OpenAlgo Hosted Server (Custom Domain Name) or Ngrok Domain Configuration
# Change to your custom domain or Ngrok domain
HOST_SERVER = 'http://127.0.0.1:5000'

# OpenAlgo Flask App Host and Port Configuration
# For 0.0.0.0 (accessible from other devices on the network)
# Flask Environment - development or production
FLASK_HOST_IP='127.0.0.1'
FLASK_PORT='5000'
FLASK_DEBUG='False'
FLASK_ENV='development'

# OpenAlgo Flask App Version Management
FLASK_APP_VERSION='1.0.0.14'

# OpenAlgo Rate Limit Settings
LOGIN_RATE_LIMIT_MIN = "5 per minute"
LOGIN_RATE_LIMIT_HOUR = "25 per hour"
API_RATE_LIMIT="10 per second"

# OpenAlgo API Configuration

# Required to give 0.5 second to 1 second delay between multi-legged option strategies
# Single legged orders are not affected by this setting.
SMART_ORDER_DELAY = '0.5'

# Session Expiry Time (24-hour format, IST)
# All user sessions will automatically expire at this time daily
SESSION_EXPIRY_TIME = '03:00'
```

[PreviousTesting OpenAlgo in Cloud](https://docs.openalgo.in/getting-started/testing-openalgo-in-cloud) [NextLatency](https://docs.openalgo.in/latency)

Last updated 4 days ago

## Understanding Latency in Trading
## [Direct link to heading](https://docs.openalgo.in/latency\#understanding-latency-and-roundtrip-in-algo-trading)    Understanding Latency and Roundtrip in Algo Trading

Latency and roundtrip time (RTT) are crucial concepts in algorithmic trading, especially for traders who aim to optimize their systems for better performance. However, understanding these concepts and their impact on trading strategies is crucial. Let’s break it down and discuss why latency matters, who should care about it, and how trading infrastructure plays a role in your long-term success.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fty7UM2n16nwpv5GD2h85%252FScreenshot%25202025-01-04%2520at%25206.01.17%25E2%2580%25AFPM.png%3Falt%3Dmedia%26token%3De26fc40a-1783-433f-8ca9-01a9d3e8c396&width=768&dpr=4&quality=100&sign=7762fd92&sv=2)

### [Direct link to heading](https://docs.openalgo.in/latency\#what-is-latency)    What Is Latency?

In trading, latency refers to the time it takes for your system to send an order to the broker’s server and for the broker to respond. It’s measured in milliseconds (ms) and directly affects the speed of order execution.

**For example:**

• If your one-way latency is 50ms, your system takes 50ms to send the order to the broker’s server.

• Roundtrip time (RTT) includes the time for the broker to process the order and send a response back. If the RTT is 150ms, the one-way latency is around 75ms.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FDf0jJrCzCpd9aHi9kenK%252FScreenshot%25202025-01-04%2520at%25206.04.05%25E2%2580%25AFPM.png%3Falt%3Dmedia%26token%3Db53790ab-f7e0-43ee-ab46-aee9ec18586b&width=768&dpr=4&quality=100&sign=66f29ee6&sv=2)

### [Direct link to heading](https://docs.openalgo.in/latency\#what-affects-latency)    What Affects Latency?

Several factors contribute to the latency of an algo trading system:

**1\. Proximity to Exchange Servers**

Physical distance plays a significant role. Servers located closer to the exchange experience lower latency due to shorter data transmission distances. For example, hosting a server in Mumbai for Indian markets can reduce latency significantly compared to running the system from Bangalore.

**2\. Broker Latency**

This is the time taken by the broker’s infrastructure to process your order and respond. Broker latencies typically range between 30-80ms but can vary depending on the broker’s technology stack and load.

**3\. Network Latency**

The quality of your internet connection and the routing of data packets can add delays. For example, a direct connection between your system and the broker’s server will be faster than one routed through intermediate servers.

**4\. Application Processing**

The framework or technology stack you use to build your trading application also contributes. Flask, for instance, is moderately fast, while FastAPI can handle more concurrent requests and may reduce processing time slightly.

**5\. Use of Tools like Ngrok**

Tools like ngrok add significant latency because they route your data through external servers before reaching the destination. This can increase RTT to 500-700ms, making it unsuitable for low-latency strategies but fine for development, testing, and latency-insensitive trading systems.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FYIn7ExZQ8jPEeirHxef1%252FScreenshot%25202025-01-04%2520at%25206.08.52%25E2%2580%25AFPM.png%3Falt%3Dmedia%26token%3D5e853db7-9bb2-48b9-8e39-cd9752eb8a75&width=768&dpr=4&quality=100&sign=c812a1f8&sv=2)

### [Direct link to heading](https://docs.openalgo.in/latency\#why-latency-matters-in-algo-trading)    Why Latency Matters in Algo Trading

The importance of latency depends on the type of trading strategy you are running:

**1\. High-Frequency Trading (HFT):**

In HFT, latency is everything. These strategies involve executing thousands of trades in milliseconds to capture small price movements. A difference of even a few microseconds can mean losing out on profitable opportunities to faster competitors.

**2\. Medium-Frequency Trading (MFT) and Low-Frequency Trading (LFT):**

For MFT or LFT strategies, latency is far less critical. These strategies execute trades over longer timeframes—seconds, minutes, or even hours. A difference of 100-200ms typically has no significant impact on performance. Most retail traders and algo developers fall into this category, so there’s no need to obsess over ultra-low latency.

**3\. Scalping and Arbitrage Strategies:**

While not as latency-sensitive as HFT, these strategies do benefit from reasonably low latency (e.g., under 200ms). Delays in execution can erode the narrow profit margins these strategies rely on.

### [Direct link to heading](https://docs.openalgo.in/latency\#real-world-test-results-vultr-mumbai-server)    **Real-World Test Results: Vultr Mumbai Server**

To demonstrate the impact of server proximity, let’s compare two setups:

**1\. Vultr Mumbai Data Center (2 cores, 4GB RAM)**

• Average Roundtrip Time (RTT): ~144ms

• Latency (One-Way): ~72ms

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F6FqY1Xmp25jlpGFo7WUx%252Fimage.png%3Falt%3Dmedia%26token%3D7652c54e-84e5-4d65-9764-498329e0f5f8&width=768&dpr=4&quality=100&sign=74013d37&sv=2)

**2\. Local Machine in Bangalore**

• RTT: ~166-222ms

• Latency (One-Way): ~83-111ms

The Mumbai server, being closer to the exchange, has significantly lower latency than the Bangalore setup. This shows how proximity to the exchange can reduce latency and improve execution speed.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FXcOX9gY4zdE5vw7bkcF9%252Fimage.png%3Falt%3Dmedia%26token%3D5bc26262-2714-432d-a598-3008ea7167ee&width=768&dpr=4&quality=100&sign=89a2bede&sv=2)

This includes:

1 **. Broker Latency**: Typically 30-80ms for AngelOne.

2 **. Network Delay**: Approximately 50-70ms due to the distance from Bangalore to Mumbai.

**3\. Processing Overheads**: Another 30-50ms for application and server processing.

These values are normal and expected for algo trading systems operating from a non-co-located setup.

**Why Trading Infrastructure Matters in the Long Run**

While latency may not seem critical for most retail or MFT strategies, investing in a solid trading infrastructure pays off over time. Here’s why:

**1\. Reliability:**

Downtime during volatile market conditions can be costly. A robust infrastructure ensures consistent uptime and smooth execution.

**2\. Scalability:**

As your strategies grow in complexity or volume, your infrastructure should be able to handle the load without slowing down.

**3\. Reducing Slippage:**

Even for MFT strategies, lower latency helps reduce slippage, which can add up over time and affect overall profitability.

### [Direct link to heading](https://docs.openalgo.in/latency\#when-to-ignore-latency)    When to Ignore Latency

Latency isn’t always the most critical factor. For most retail traders running MFT or LFT strategies, the focus should be on:

• Robust strategy logic

• Execution reliability

• Minimizing errors and downtime

In these cases, the difference between 100ms and 200ms latency will have a negligible impact on performance.

### [Direct link to heading](https://docs.openalgo.in/latency\#takeaways-for-budding-algo-traders)    Takeaways for Budding Algo Traders

**1\. Latency isn’t everything**: For MFT or LFT strategies, focus on building reliable, consistent systems. Latency only becomes critical for HFT or scalping/arbitrage strategies.

**2\. Server location matters:** Hosting servers close to the exchange (e.g., Vultr Mumbai for Indian markets) can significantly reduce latency.

**3\. Ngrok is not for latency sensitive strategy**: While ngrok is great for development and testing, it’s not ideal for live trading systems that require low latency. If you are using NGROK for connecting your tradingview/chartink aware about the 500-800 ms of latency it could create if you are running in your local desktop.

**4\. Plan for growth**: Investing in scalable infrastructure ensures your system can handle increased complexity or volume as you evolve.

In conclusion, while latency matters for specific strategies, most traders should prioritize strategy robustness, execution consistency, and scalability over chasing the lowest possible latency. A solid understanding of latency and infrastructure will prepare you for success in both the short and long term.

[PreviousUpgrade](https://docs.openalgo.in/getting-started/upgrade) [NextV1](https://docs.openalgo.in/api-documentation/v1)

Last updated 2 months ago

## OpenAlgo API Overview
OpenAlgo API is a set of **REST APIs** that provide integration with multiple brokers with which you can build your own customized trading applications

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1\#endpoint-url)    Endpoint URL

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  http://127.0.0.1:5000/api/v1/placeorder
Ngrok Domain :  https://<your-ngrok-domain>.ngrok-free.app/api/v1/placeorder
Custom Domain:  https://<your-custom-domain>/api/v1/placeorder
```

[PreviousLatency](https://docs.openalgo.in/latency) [NextAccounts API](https://docs.openalgo.in/api-documentation/v1/accounts-api)

Last updated 11 months ago

## Accounts API
The Accounts API provides a comprehensive list of operations to manage and handle Trading Accounts efficiently.

[PreviousV1](https://docs.openalgo.in/api-documentation/v1) [NextFunds](https://docs.openalgo.in/api-documentation/v1/accounts-api/funds)

Last updated 3 months ago

## Funds API Overview
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/funds\#endpoint-url)    Endpoint URL

This API Function Fetches Funds and Margin Details of the Connected Trading Account

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/funds
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/funds
Custom Domain:  POST https://<your-custom-domain>/api/v1/funds
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/funds\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>"
}

```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/funds\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/funds\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": {
    "availablecash": "18083.01",
    "collateral": "0.00",
    "m2mrealized": "0.00",
    "m2munrealized": "0.00",
    "utiliseddebits": "0.00"
  },
  "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/funds\#request-body)    Request Body

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/funds\#response-fields)    Response Fields

Field

Type

Description

seconds

array

List of supported second-based intervals

minutes

array

List of supported minute-based intervals

hours

array

List of supported hour-based intervals

days

array

List of supported daily intervals

weeks

array

List of supported weekly intervals

months

array

List of supported monthly intervals

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/funds\#notes)    Notes

1. Always check supported intervals first using the intervals API

2. Use exact interval strings from intervals API response

3. All timestamps are in Unix epoch format


[PreviousAccounts API](https://docs.openalgo.in/api-documentation/v1/accounts-api) [NextOrderbook](https://docs.openalgo.in/api-documentation/v1/accounts-api/orderbook)

Last updated 2 months ago

## Orderbook API Documentation
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/orderbook\#endpoint-url)    Endpoint URL

This API Function fetches the Orderbook details from the broker with basic orderbook statistics

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/orderbook
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/orderbook
Custom Domain:  POST https://<your-custom-domain>/api/v1/orderbook
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/orderbook\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>"
}

```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/orderbook\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": {
    "orders": [\
      {\
        "action": "SELL",\
        "exchange": "NSE",\
        "order_status": "complete",\
        "orderid": "24120900000213",\
        "price": 1500,\
        "pricetype": "LIMIT",\
        "product": "MIS",\
        "quantity": 5,\
        "symbol": "INFY",\
        "timestamp": "09-Dec-2024 09:44:09",\
        "trigger_price": 0\
      },\
      {\
        "action": "BUY",\
        "exchange": "NSE",\
        "order_status": "complete",\
        "orderid": "24120900000212",\
        "price": 0,\
        "pricetype": "MARKET",\
        "product": "MIS",\
        "quantity": 10,\
        "symbol": "RELIANCE",\
        "timestamp": "09-Dec-2024 09:44:09",\
        "trigger_price": 0\
      }\
\
\
    ],
    "statistics": {
      "total_buy_orders": 1,
      "total_completed_orders": 2,
      "total_open_orders": 0,
      "total_rejected_orders": 0,
      "total_sell_orders": 1
    }
  },
  "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/orderbook\#request-body)    Request Body

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

[PreviousFunds](https://docs.openalgo.in/api-documentation/v1/accounts-api/funds) [NextTradebook](https://docs.openalgo.in/api-documentation/v1/accounts-api/tradebook)

Last updated 2 months ago

## TradeBook API Details
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/tradebook\#endpoint-url)    Endpoint URL

This API Function fetches the TradeBook details from the broker

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/tradebook
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/tradebook
Custom Domain:  POST https://<your-custom-domain>/api/v1/tradebook
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/tradebook\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>"
}

```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/tradebook\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": [\
    {\
      "action": "BUY",\
      "average_price": 1914.4,\
      "exchange": "NSE",\
      "orderid": "24120900009388",\
      "product": "MIS",\
      "quantity": 1,\
      "symbol": "INFY",\
      "timestamp": "09-Dec-2024 09:16:48",\
      "trade_value": 1914.4\
    },\
    {\
      "action": "SELL",\
      "average_price": 21.61,\
      "exchange": "NSE",\
      "orderid": "24120900010875",\
      "product": "MIS",\
      "quantity": 20,\
      "symbol": "YESBANK",\
      "timestamp": "09-Dec-2024 09:17:30",\
      "trade_value": 432.2\
    }\
  ],
  "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/tradebook\#request-body)    Request Body

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

[PreviousOrderbook](https://docs.openalgo.in/api-documentation/v1/accounts-api/orderbook) [NextPositionBook](https://docs.openalgo.in/api-documentation/v1/accounts-api/positionbook)

Last updated 2 months ago

## PositionBook API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/positionbook\#endpoint-url)    Endpoint URL

This API Function fetches the PositionBook details from the broker

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/positionbook
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/positionbook
Custom Domain:  POST https://<your-custom-domain>/api/v1/positionbook
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/positionbook\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>"
}

```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/positionbook\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": [\
    {\
      "average_price": "0.00",\
      "exchange": "NSE",\
      "product": "MIS",\
      "quantity": 0,\
      "symbol": "YESBANK"\
    },\
    {\
      "average_price": "0.00",\
      "exchange": "NSE",\
      "product": "MIS",\
      "quantity": -1,\
      "symbol": "INFY"\
    },\
    {\
      "average_price": "0.00",\
      "exchange": "NSE",\
      "product": "MIS",\
      "quantity": 1,\
      "symbol": "RELIANCE"\
    }\
  ],
  "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/positionbook\#request-body)    Request Body

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

[PreviousTradebook](https://docs.openalgo.in/api-documentation/v1/accounts-api/tradebook) [NextHoldings](https://docs.openalgo.in/api-documentation/v1/accounts-api/holdings)

Last updated 2 months ago

## Stock Holdings API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/holdings\#endpoint-url)    Endpoint URL

This API Function fetches the stock holdings details from the broker

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/holdings
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/holdings
Custom Domain:  POST https://<your-custom-domain>/api/v1/holdings
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/holdings\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>"
}

```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/holdings\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": {
    "holdings": [\
      {\
        "exchange": "NSE",\
        "pnl": 3.27,\
        "pnlpercent": 13.04,\
        "product": "CNC",\
        "quantity": 1,\
        "symbol": "BSLNIFTY"\
      },\
      {\
        "exchange": "NSE",\
        "pnl": 1.02,\
        "pnlpercent": 14.37,\
        "product": "CNC",\
        "quantity": 1,\
        "symbol": "IDEA"\
      }\
    ],
    "statistics": {
      "totalholdingvalue": 36.46,
      "totalinvvalue": 32.17,
      "totalpnlpercentage": 13.34,
      "totalprofitandloss": 4.29
    }
  },
  "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/accounts-api/holdings\#request-body)    Request Body

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

[PreviousPositionBook](https://docs.openalgo.in/api-documentation/v1/accounts-api/positionbook) [NextOrders API](https://docs.openalgo.in/api-documentation/v1/orders-api)

Last updated 2 months ago

## Orders API Overview
The Orders API provides a comprehensive list of operations to manage and handle orders efficiently.

[PreviousHoldings](https://docs.openalgo.in/api-documentation/v1/accounts-api/holdings) [NextPlaceorder](https://docs.openalgo.in/api-documentation/v1/orders-api/placeorder)

Last updated 3 months ago

## Place Order API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placeorder\#endpoint-url)    Endpoint URL

This API Function Place Orders to the Broker

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/placeorder
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/placeorder
Custom Domain:  POST https://<your-custom-domain>/api/v1/placeorder
```

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>",
    "strategy": "Test Strategy",
    "symbol":"SAIL",
    "action":"BUY",
    "exchange":"NSE",
    "pricetype":"MARKET",
    "product":"MIS",
    "quantity":"1"

}

```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placeorder\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "your_app_apikey",
    "strategy": "Test Strategy",
    "exchange": "NSE",
    "symbol": "BHEL",
    "action": "BUY",
    "product": "MIS",
    "pricetype": "MARKET",
    "quantity": "1",
    "price": "0",
    "trigger_price": "0",
    "disclosed_quantity": "0"
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placeorder\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placeorder\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "orderid": "240307000614705",
    "status": "success"
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placeorder\#undefined-1)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placeorder\#parameter-description)    Parameter Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

exchange

Exchange code

Mandatory

-

symbol

Trading symbol

Mandatory

-

action

Action (BUY/SELL)

Mandatory

-

product

Product type

Optional

MIS

pricetype

Price type

Optional

MARKET

quantity

Quantity

Mandatory

-

price

Price

Optional

0

trigger\_price

Trigger price

Optional

0

disclosed\_quantity

Disclosed quantity

Optional

0

[PreviousOrders API](https://docs.openalgo.in/api-documentation/v1/orders-api) [NextPlaceSmartOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/placesmartorder)

Last updated 2 months ago

## Smart Order Placement
Place Order Smartly by analyzing the current open position. It matches the Position Size with the given position book. Buy/Sell Signal Orders will be traded accordingly to the Position Size

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placesmartorder\#endpoint-url)    Endpoint URL

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/placesmartorder
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/placesmartorder
Custom Domain:  POST https://<your-custom-domain>/api/v1/placesmartorder
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placesmartorder\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>",
    "strategy": "Test Strategy",
    "exchange": "NSE",
    "symbol": "IDEA",
    "action": "BUY",
    "product": "MIS",
    "pricetype": "MARKET",
    "quantity": "1",
    "position_size": "5",
    "price": "0",
    "trigger_price": "0",
    "disclosed_quantity": "0"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placesmartorder\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "orderid": "240307000616990",
    "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placesmartorder\#parameters-description)    Parameters Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

exchange

Exchange code

Mandatory

-

symbol

Trading symbol

Mandatory

-

action

Action (BUY/SELL)

Mandatory

-

product

Product type

Optional

MIS

pricetype

Price type

Optional

MARKET

quantity

Quantity

Mandatory

-

position\_size

Position Size

Mandatory

-

price

Price

Optional

0

trigger\_price

Trigger price

Optional

0

disclosed\_quantity

Disclosed quantity

Optional

0

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/placesmartorder\#how-placesmartorder-api-works)    How PlaceSmartOrder API Works?

YouTube

PlaceSmartOrder API function, which allows traders to build intelligent trading systems that can automatically place orders based on existing trade positions in the position book.

Action

Qty (API)

Pos Size (API)

Current Open Pos

Action by OpenAlgo

BUY

100

0

0

No Open Pos Found. Buy +100 qty

BUY

100

100

-100

BUY 200 to match Open Pos in API Param

BUY

100

100

100

No Action. Position matched

BUY

100

200

100

BUY 100 to match Open Pos in API Param

SELL

100

0

0

No Open Pos Found. SELL 100 qty

SELL

100

-100

+100

SELL 200 to match Open Pos in API Param

SELL

100

-100

-100

No Action. Position matched

SELL

100

-200

-100

SELL 100 to match Open Pos in API Param

[PreviousPlaceorder](https://docs.openalgo.in/api-documentation/v1/orders-api/placeorder) [NextBasketOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/basketorder)

Last updated 1 month ago

## Basket Order API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/basketorder\#endpoint-url)    Endpoint URL

This API Function Place Basket Orders to the Broker

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/basketorder
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/basketorder
Custom Domain:  POST https://<your-custom-domain>/api/v1/basketorder
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/basketorder\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>",
    "strategy": "your-strategy",
    "orders": [\
        {\
            "symbol": "RELIANCE",\
            "exchange": "NSE",\
            "action": "BUY",\
            "quantity": "1",\
            "pricetype": "MARKET",\
            "product": "MIS"\
        },\
        {\
            "symbol": "INFY",\
            "exchange": "NSE",\
            "action": "SELL",\
            "quantity": "1",\
            "pricetype": "MARKET",\
            "product": "MIS"\
        }\
    ]
}

```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/basketorder\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/basketorder\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "results": [\
    {\
      "orderid": "24120900343250",\
      "status": "success",\
      "symbol": "INFY"\
    },\
    {\
      "orderid": "24120900343249",\
      "status": "success",\
      "symbol": "RELIANCE"\
    }\
  ],
  "status": "success"
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/basketorder\#undefined-1)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/basketorder\#parameter-description)    Parameter Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

exchange

Exchange code

Mandatory

-

symbol

Trading symbol

Mandatory

-

action

Action (BUY/SELL)

Mandatory

-

product

Product type

Optional

MIS

pricetype

Price type

Optional

MARKET

quantity

Quantity

Mandatory

-

price

Price

Optional

0

trigger\_price

Trigger price

Optional

0

disclosed\_quantity

Disclosed quantity

Optional

0

[PreviousPlaceSmartOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/placesmartorder) [NextSplitOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/splitorder)

Last updated 2 months ago

## Split Order API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/splitorder\#endpoint-url)    Endpoint URL

This API Function Place Split Orders to the Broker

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/splitorder
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/splitorder
Custom Domain:  POST https://<your-custom-domain>/api/v1/splitorder
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/splitorder\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>",
    "strategy": "Test Strategy",
    "exchange": "NSE",
    "symbol": "YESBANK",
    "action": "SELL",
    "quantity": "105",
    "splitsize": "20",
    "pricetype": "MARKET",
    "product": "MIS"
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/splitorder\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/splitorder\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "results": [\
    {\
      "order_num": 1,\
      "orderid": "24120900343417",\
      "quantity": 20,\
      "status": "success"\
    },\
    {\
      "order_num": 2,\
      "orderid": "24120900343419",\
      "quantity": 20,\
      "status": "success"\
    },\
    {\
      "order_num": 3,\
      "orderid": "24120900343420",\
      "quantity": 20,\
      "status": "success"\
    },\
    {\
      "order_num": 4,\
      "orderid": "24120900343418",\
      "quantity": 20,\
      "status": "success"\
    },\
    {\
      "order_num": 5,\
      "orderid": "24120900343421",\
      "quantity": 20,\
      "status": "success"\
    },\
    {\
      "order_num": 6,\
      "orderid": "24120900343416",\
      "quantity": 5,\
      "status": "success"\
    }\
  ],
  "split_size": 20,
  "status": "success",
  "total_quantity": 105
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/splitorder\#undefined-1)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/splitorder\#parameter-description)    Parameter Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

exchange

Exchange code

Mandatory

-

symbol

Trading symbol

Mandatory

-

action

Action (BUY/SELL)

Mandatory

-

product

Product type

Optional

MIS

pricetype

Price type

Optional

MARKET

quantity

Quantity

Mandatory

-

price

Price

Optional

0

trigger\_price

Trigger price

Optional

0

disclosed\_quantity

Disclosed quantity

Optional

0

[PreviousBasketOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/basketorder) [NextModifyOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/modifyorder)

Last updated 2 months ago

## Modify Order API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/modifyorder\#endpoint-url)    Endpoint URL

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/modifyorder
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/modifyorder
Custom Domain:  POST https://<your-custom-domain>/api/v1/modifyorder
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/modifyorder\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey",
    "strategy": "Test Message",
    "symbol": "USDINR15MAR2483CE",
    "action": "BUY",
    "exchange": "CDS",
    "orderid":"240307000562466",
    "product":"NRML",
    "pricetype":"LIMIT",
    "price":"0.0050",
    "quantity":"1",
    "disclosed_quantity":"0",
    "trigger_price":"0"
}

```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/modifyorder\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
        "orderid": "240307000562466",
        "status": "success"
}

```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/modifyorder\#parameter-description)    Parameter Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

symbol

Trading Symbol

Mandatory

-

action

Action (BUY/SELL)

Mandatory

-

exchange

Exchange

Mandatory

-

orderid

Order ID

Mandatory

-

product

Product type

Mandatory

-

pricetype

Price type

Mandatory

-

quantity

Quantity

Mandatory

-

price

Price

Mandatory

0

trigger\_price

Trigger price

Mandatory

0

disclosed\_quantity

Disclosed quantity

Mandatory

0

[PreviousSplitOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/splitorder) [NextCancelOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelorder)

Last updated 2 months ago

## Cancel Order API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelorder\#endpoint-url)    Endpoint URL

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/cancelorder
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/cancelorder
Custom Domain:  POST https://<your-custom-domain>/api/v1/cancelorder
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelorder\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]

{
    "apikey": "<your_app_apikey>",
    "strategy": "Test Strategy",
    "orderid": "1000000123665912"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelorder\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]

{
        "orderid": "1000000123665912",
        "status": "success"
}

```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelorder\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelorder\#parameters-description)    Parameters Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

orderid

Order Id

Mandatory

-

[PreviousModifyOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/modifyorder) [NextCancelAllOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelallorder)

Last updated 2 months ago

## Cancel All Orders API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelallorder\#endpoint-url)    Endpoint URL

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/cancelallorder
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/cancelallorder
Custom Domain:  POST https://<your-custom-domain>/api/v1/cancelallorder
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelallorder\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
"apikey":"<your_app_apikey>",
"strategy":"Test Strategy"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelallorder\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "canceled_orders": [\
    "24120600373935",\
    "24120600373918",\
    "24120600373901",\
    "24120600373890"\
  ],
  "failed_cancellations": [],
  "message": "Canceled 4 orders. Failed to cancel 0 orders.",
  "status": "success"
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelallorder\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelallorder\#parameters-description)    Parameters Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

[PreviousCancelOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelorder) [NextClosePosition](https://docs.openalgo.in/api-documentation/v1/orders-api/closeposition)

Last updated 2 months ago

## Close Position API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/closeposition\#endpoint-url)    Endpoint URL

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/closeposition
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/closeposition
Custom Domain:  POST https://<your-custom-domain>/api/v1/closeposition
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/closeposition\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
"apikey":"<your_app_apikey>",
"strategy":"Test Strategy"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/closeposition\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
        "message": "All Open Positions SquaredOff",
        "status": "success"
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/closeposition\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/closeposition\#parameters-description)    Parameters Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

[PreviousCancelAllOrder](https://docs.openalgo.in/api-documentation/v1/orders-api/cancelallorder) [NextOrderStatus](https://docs.openalgo.in/api-documentation/v1/orders-api/orderstatus)

Last updated 2 months ago

## Order Status API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/orderstatus\#endpoint-url)    Endpoint URL

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/orderstatus
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/orderstatus
Custom Domain:  POST https://<your-custom-domain>/api/v1/orderstatus
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/orderstatus\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey":"<your_app_apikey>",
    "strategy": "Test Strategy",
    "orderid": "24120900146469"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/orderstatus\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": {
    "action": "BUY",
    "exchange": "NSE",
    "order_status": "complete",
    "orderid": "24120900146469",
    "price": 21.81,
    "pricetype": "MARKET",
    "product": "CNC",
    "quantity": 10,
    "symbol": "YESBANK",
    "timestamp": "09-Dec-2024 10:53:31",
    "trigger_price": 0
  },
  "status": "success"
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/orderstatus\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/orderstatus\#parameters-description)    Parameters Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

orderid

Order Id

Mandatory

-

[PreviousClosePosition](https://docs.openalgo.in/api-documentation/v1/orders-api/closeposition) [NextOpenPosition](https://docs.openalgo.in/api-documentation/v1/orders-api/openposition)

Last updated 2 months ago

## Open Position API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/openposition\#endpoint-url)    Endpoint URL

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/openposition
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/openposition
Custom Domain:  POST https://<your-custom-domain>/api/v1/openposition
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/openposition\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey":"<your_app_apikey>",
    "strategy": "Test Strategy",
    "symbol": "YESBANK",
    "exchange": "NSE",
    "product": "CNC"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/openposition\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "quantity": 10,
  "status": "success"
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/openposition\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/orders-api/openposition\#parameters-description)    Parameters Description

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

strategy

Strategy name

Mandatory

-

Symbol

Trading Symbol

Mandatory

-

Exchange

Exchange

Mandatory

-

Product

Product

Mandatory

-

[PreviousOrderStatus](https://docs.openalgo.in/api-documentation/v1/orders-api/orderstatus) [NextData API](https://docs.openalgo.in/api-documentation/v1/data-api)

Last updated 2 months ago

## OpenAlgo API Documentation
[Quotes](https://docs.openalgo.in/api-documentation/v1/data-api/quotes) [Depth](https://docs.openalgo.in/api-documentation/v1/data-api/depth) [History](https://docs.openalgo.in/api-documentation/v1/data-api/history) [Ticker](https://docs.openalgo.in/api-documentation/v1/data-api/ticker) [Intervals](https://docs.openalgo.in/api-documentation/v1/data-api/intervals)

[PreviousOpenPosition](https://docs.openalgo.in/api-documentation/v1/orders-api/openposition) [NextQuotes](https://docs.openalgo.in/api-documentation/v1/data-api/quotes)

## Broker Quotes API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/quotes\#endpoint-url)    Endpoint URL

This API Function fetches Quotes from the Broker

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/quotes
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/quotes
Custom Domain:  POST https://<your-custom-domain>/api/v1/quotes
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/quotes\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>",
    "symbol":"SBIN",
    "exchange":"NSE",
}

```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/quotes\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/quotes\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": {
    "ask": 863.65,
    "bid": 0,
    "high": 875.45,
    "low": 857,
    "ltp": 863.65,
    "open": 865.25,
    "prev_close": 863.65,
    "volume": 14520568
  },
  "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/quotes\#request-fields)    Request Fields

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

symbol

Trading symbol

Mandatory

-

exchange

Exchange code

Mandatory

-

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/quotes\#response-fields)    Response Fields

Field

Type

Description

bid

number

Best bid price

ask

number

Best ask price

open

number

Opening price

high

number

High price

low

number

Low price

ltp

number

Last traded price

prev\_close

number

Previous day's closing price

volume

number

Total traded volume

[PreviousData API](https://docs.openalgo.in/api-documentation/v1/data-api) [NextDepth](https://docs.openalgo.in/api-documentation/v1/data-api/depth)

Last updated 2 months ago

## Market Depth API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/depth\#endpoint-url)    Endpoint URL

This API Function get Market Depth from the Broker

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/depth
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/depth
Custom Domain:  POST https://<your-custom-domain>/api/v1/depth
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/depth\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>",
    "symbol": "RELIANCE",
    "exchange": "NSE"
}

```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/depth\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/depth\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": {
    "asks": [\
      {\
        "price": 1311.55,\
        "quantity": 5187\
      },\
      {\
        "price": 0,\
        "quantity": 0\
      },\
      {\
        "price": 0,\
        "quantity": 0\
      },\
      {\
        "price": 0,\
        "quantity": 0\
      },\
      {\
        "price": 0,\
        "quantity": 0\
      }\
    ],
    "bids": [\
      {\
        "price": 0,\
        "quantity": 0\
      },\
      {\
        "price": 0,\
        "quantity": 0\
      },\
      {\
        "price": 0,\
        "quantity": 0\
      },\
      {\
        "price": 0,\
        "quantity": 0\
      },\
      {\
        "price": 0,\
        "quantity": 0\
      }\
    ],
    "high": 1323.9,
    "low": 1310,
    "ltp": 1311.55,
    "ltq": 10,
    "oi": 0,
    "open": 1323.9,
    "prev_close": 1311.55,
    "totalbuyqty": 0,
    "totalsellqty": 5187,
    "volume": 9037514
  },
  "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/depth\#request-body)    Request Body

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

symbol

Trading symbol

Mandatory

-

exchange

Exchange code

Mandatory

-

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/depth\#response-fields)    Response Fields

Field

Type

Description

asks

array

List of 5 best ask prices

bids

array

List of 5 best bid prices

totalbuyqty

number

Total buy quantity

totalsellqty

number

Total sell quantity

high

number

Day's high price

low

number

Day's low price

ltp

number

Last traded price

ltq

number

Last traded quantity

open

number

Opening price

prev\_close

number

Previous day's closing price

volume

number

Total traded volume

oi

number

Open interest

[PreviousQuotes](https://docs.openalgo.in/api-documentation/v1/data-api/quotes) [NextHistory](https://docs.openalgo.in/api-documentation/v1/data-api/history)

Last updated 2 months ago

## Historical Data API
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/history\#endpoint-url)    Endpoint URL

This API Function to fetch historical data from the Broker

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/history
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/history
Custom Domain:  POST https://<your-custom-domain>/api/v1/history
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/history\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>",
    "symbol": "SBIN",
    "exchange": "NSE",
    "interval": "1m",
    "start_date": "2024-12-01",
    "end_date": "2024-12-31"

}

```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/history\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/history\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": [\
    {\
      "close": 836.4,\
      "high": 841.1,\
      "low": 836,\
      "open": 838.95,\
      "timestamp": 1733111100,\
      "volume": 121671\
    },\
    {\
      "close": 835.75,\
      "high": 836.6,\
      "low": 835.1,\
      "open": 836.15,\
      "timestamp": 1733111160,\
      "volume": 40517\
    },\
    {\
      "close": 835.2,\
      "high": 836.15,\
      "low": 834.5,\
      "open": 835.75,\
      "timestamp": 1733111220,\
      "volume": 69600\
    }\
  ],
  "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/history\#request-body)    Request Body

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

symbol

Trading symbol

Mandatory

-

exchange

Exchange code

Mandatory

-

interval

candle interval (see supported values)

Mandatory

-

start\_date

Start date (YYYY-MM-DD)

Mandatory

-

end\_date

End date (YYYY-MM-DD)

Mandatory

-

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/history\#response-fields)    Response Fields

Field

Type

Description

timestamp

number

Unix epoch timestamp

open

number

Opening price

high

number

High price

low

number

Low price

close

number

Closing price

volume

number

Trading volume

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/history\#notes)    Notes

1. Always check supported intervals first using the intervals API

2. Use exact interval strings from intervals API response

3. All timestamps are in Unix epoch format


[PreviousDepth](https://docs.openalgo.in/api-documentation/v1/data-api/depth) [NextTicker](https://docs.openalgo.in/api-documentation/v1/data-api/ticker)

Last updated 2 months ago

## Ticker API Documentation
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#endpoint-url)    Endpoint URL

The Ticker API provides historical price data for stocks in customizable time windows. It allows you to fetch OHLCV (Open, High, Low, Close, Volume) data for any stock with flexible interval options.

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  GET http://127.0.0.1:5000/api/v1/ticker/{exchange}:{symbol}
Ngrok Domain :  GET https://<your-ngrok-domain>.ngrok-free.app/api/v1/ticker/{exchange}:{symbol}
Custom Domain:  GET https://<your-custom-domain>/api/v1/ticker/{exchange}:{symbol}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#parameters)    Parameters

#### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#path-parameters)    Path Parameters

- `exchange:symbol` (required): Combined exchange and symbol (e.g., NSE:ZOMATO). Defaults to NSE:ZOMATO if not provided.


### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#exchange)    Exchange

- NSE: NSE Equity

- NFO: NSE Futures & Options

- CDS: NSE Currency

- BSE: BSE Equity

- BFO: BSE Futures & Options

- BCD: BSE Currency

- MCX: MCX Commodity

- NCDEX: NCDEX Commodity


#### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#query-parameters)    Query Parameters

- `interval` (optional): The time interval for the data. Default: D Supported intervals:



- Seconds: 5s, 10s, 15s, 30s, 45s

- Minutes: 1m, 2m, 3m, 5m, 10m, 15m, 20m, 30m

- Hours: 1h, 2h, 4h

- Days: D

- Weeks: W

- Months: M


- `from` (required): The start date in YYYY-MM-DD format or millisecond timestamp

- `to` (required): The end date in YYYY-MM-DD format or millisecond timestamp

- `adjusted` (optional): Whether to adjust for splits. Default: true



- true: Results are adjusted for splits

- false: Results are NOT adjusted for splits


- `sort` (optional): Sort results by timestamp. Default: asc



- asc: Results sorted in ascending order (oldest first)

- desc: Results sorted in descending order (newest first)


#### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#authentication)    Authentication

API key must be provided either:

- In the request header as `X-API-KEY`

- As a query parameter `apikey`


### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#example-request)    Example Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
GET http://127.0.0.1:5000/api/v1/ticker/NSE:ZOMATO?interval=D&from=2025-01-09&to=2025-02-10&adjusted=true&sort=asc
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#response-format)    Response Format

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "status": "success",
    "data": [\
        {\
            "timestamp": "2023-01-09, 05:00:00",\
            "open": 60.25,\
            "high": 61.40,\
            "low": 59.80,\
            "close": 60.95,\
            "volume": 12345678\
        },\
        // ... more data points\
    ]
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#error-responses)    Error Responses

- 400: Bad Request - Invalid parameters

- 403: Forbidden - Invalid API key

- 404: Not Found - Broker module not found

- 500: Internal Server Error - Unexpected error


### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#example-usage)    Example Usage

For example, to get Daily bars for ZOMATO stock from NSE:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
http://127.0.0.1:5000/api/v1/ticker/NSE:ZOMATO?apikey=<openalgo-api-key>&interval=D&from=2024-12-02&to=2025-01-01&format=txt
```

This will return 5-minute OHLCV bars for ZOMATO between December 02, 2024, and January 01, 2025.

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#ticker-api-documentation)    Ticker API Documentation

The Ticker API provides historical stock data in both daily and intraday formats. The API supports both JSON and plain text responses.

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#endpoint)    Endpoint

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
GET /api/v1/ticker/{exchange}:{symbol}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#parameters-1)    Parameters

Parameter

Type

Required

Description

Example

symbol

string

Yes

Stock symbol with exchange (e.g., NSE:ZOMATO)

NSE:ZOMATO

interval

string

No

Time interval (D, 1m, 5m, 1h, etc.). Default: D

5m

from

string

No

Start date in YYYY-MM-DD format

2024-12-01

to

string

No

End date in YYYY-MM-DD format

2024-12-31

apikey

string

Yes

API Key for authentication

your\_api\_key

format

string

No

Response format (json/txt). Default: json

txt

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#response-formats)    Response Formats

#### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#plain-text-format-format-txt)    Plain Text Format (format=txt)

**Daily Data (interval=D)**

Format: `Ticker,Date_YMD,Open,High,Low,Close,Volume`

Example:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
NSE:ZOMATO,2024-12-02,281.9,285.7,280.45,282.5,35170688
NSE:ZOMATO,2024-12-03,279.7,282.35,279.0,279.85,30078648
NSE:ZOMATO,2024-12-04,283.0,288.0,283.0,286.25,45520598
NSE:ZOMATO,2024-12-05,288.25,304.65,286.85,299.35,102148528
NSE:ZOMATO,2024-12-06,300.0,303.9,296.25,302.95,49309068
NSE:ZOMATO,2024-12-09,304.7,304.7,291.8,295.3,51131895
NSE:ZOMATO,2024-12-10,296.75,299.45,295.0,295.85,31333039
```

**Intraday Data (interval=1m, 5m, etc.)**

Format: `Ticker,Date_YMD,Time,Open,High,Low,Close,Volume`

Example:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
NSE:ZOMATO,2024-12-02,09:14:00,281.9,281.9,281.9,281.9,0
NSE:ZOMATO,2024-12-02,09:15:00,281.5,281.95,280.45,281.05,529484
NSE:ZOMATO,2024-12-02,09:16:00,281.0,281.4,280.65,280.95,391523
NSE:ZOMATO,2024-12-02,09:17:00,280.85,280.95,280.5,280.6,261194
NSE:ZOMATO,2024-12-02,09:18:00,280.65,282.1,280.6,282.1,390782
NSE:ZOMATO,2024-12-02,09:19:00,282.25,282.25,281.35,281.5,306109
NSE:ZOMATO,2024-12-02,09:20:00,281.45,281.7,281.0,281.0,242716
NSE:ZOMATO,2024-12-02,09:21:00,281.1,281.45,280.9,281.35,123044
NSE:ZOMATO,2024-12-02,09:22:00,281.5,281.65,281.4,281.55,174850
NSE:ZOMATO,2024-12-02,09:23:00,281.6,282.45,281.5,282.4,224578
```

#### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#json-format-format-json)    JSON Format (format=json)

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "status": "success",
    "data": [\
        {\
            "timestamp": 1701432600,\
            "open": 281.9,\
            "high": 285.7,\
            "low": 280.45,\
            "close": 282.5,\
            "volume": 35170688\
        },\
        ...\
    ]
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#error-responses-1)    Error Responses

#### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#plain-text-format)    Plain Text Format

Error messages are returned as plain text with appropriate HTTP status codes.

Example:

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Invalid openalgo apikey
```

#### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#json-format)    JSON Format

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "status": "error",
    "message": "Invalid openalgo apikey"
}
```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#http-status-codes)    HTTP Status Codes

Code

Description

200

Successful request

400

Bad request (invalid parameters)

403

Invalid API key

404

Broker module not found

500

Internal server error

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#rate-limiting)    Rate Limiting

The API is rate-limited to 10 requests per second by default. This can be configured using the `API_RATE_LIMIT` environment variable.

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/ticker\#notes)    Notes

1. All timestamps in the responses are in Indian Standard Time (IST)

2. Volume is always returned as an integer

3. If no symbol is provided, defaults to "NSE:ZOMATO"

4. If no exchange is specified in the symbol, defaults to "NSE"

5. The API supports both formats:



- `NSE:ZOMATO` (preferred)

- `ZOMATO` (defaults to NSE)


[PreviousHistory](https://docs.openalgo.in/api-documentation/v1/data-api/history) [NextIntervals](https://docs.openalgo.in/api-documentation/v1/data-api/intervals)

Last updated 2 months ago

## Broker Timeframe Intervals
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/intervals\#endpoint-url)    Endpoint URL

This API Function responds with supported broker timeframe interval for fetching historical data

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
Local Host   :  POST http://127.0.0.1:5000/api/v1/intervals
Ngrok Domain :  POST https://<your-ngrok-domain>.ngrok-free.app/api/v1/intervals
Custom Domain:  POST https://<your-custom-domain>/api/v1/intervals
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/intervals\#sample-api-request)    Sample API Request

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
    "apikey": "<your_app_apikey>"
}

```

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/intervals\#undefined)

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/intervals\#sample-api-response)    Sample API Response

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
{
  "data": {
    "days": [\
      "D"\
    ],
    "hours": [\
      "1h",\
      "2h",\
      "4h"\
    ],
    "minutes": [\
      "10m",\
      "15m",\
      "1m",\
      "20m",\
      "2m",\
      "30m",\
      "3m",\
      "5m"\
    ],
    "months": [\
      "M"\
    ],
    "seconds": [\
      "10s",\
      "15s",\
      "30s",\
      "45s",\
      "5s"\
    ],
    "weeks": [\
      "W"\
    ]
  },
  "status": "success"
}
```

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/intervals\#request-body)    Request Body

Parameters

Description

Mandatory/Optional

Default Value

apikey

App API key

Mandatory

-

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/intervals\#response-fields)    Response Fields

Field

Type

Description

seconds

array

List of supported second-based intervals

minutes

array

List of supported minute-based intervals

hours

array

List of supported hour-based intervals

days

array

List of supported daily intervals

weeks

array

List of supported weekly intervals

months

array

List of supported monthly intervals

## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/data-api/intervals\#notes)    Notes

1. Always check supported intervals first using the intervals API

2. Use exact interval strings from intervals API response

3. All timestamps are in Unix epoch format


[PreviousTicker](https://docs.openalgo.in/api-documentation/v1/data-api/ticker) [NextOrder Constants](https://docs.openalgo.in/api-documentation/v1/order-constants)

Last updated 2 months ago

## Order Constants Guide
## [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/order-constants\#order-constants)    Order Constants

### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/order-constants\#exchange)    Exchange

- NSE: NSE Equity

- NFO: NSE Futures & Options

- CDS: NSE Currency

- BSE: BSE Equity

- BFO: BSE Futures & Options

- BCD: BSE Currency

- MCX: MCX Commodity

- NCDEX: NCDEX Commodity


### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/order-constants\#product-type)    Product Type

- CNC: Cash & Carry for equity

- NRML: Normal for futures and options

- MIS: Intraday Square off


### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/order-constants\#price-type)    Price Type

- MARKET: Market Order

- LIMIT: Limit Order

- SL: Stop Loss Limit Order

- SL-M: Stop Loss Market Order


### [Direct link to heading](https://docs.openalgo.in/api-documentation/v1/order-constants\#action)    Action

- BUY: Buy

- SELL: Sell


[PreviousIntervals](https://docs.openalgo.in/api-documentation/v1/data-api/intervals) [NextHTTP Status Codes](https://docs.openalgo.in/api-documentation/v1/http-status-codes)

Last updated 3 months ago

## HTTP Status Codes
The status codes contain the following

Status Code

Meaning

200

Request was successful

400

Bad request. The request is invalid or certain other errors

401

Authorization error. User could not be authenticated

403

Permission error. User does not have the necessary permissions

429

Rate limit exceeded. Users have been blocked for exceeding the rate limit.

500

Internal server error.

[PreviousOrder Constants](https://docs.openalgo.in/api-documentation/v1/order-constants) [NextRate Limiting](https://docs.openalgo.in/api-documentation/v1/rate-limiting)

Last updated 3 months ago

## API Rate Limiting Overview
Rate limiting defines limits on how many API calls can be made within a second.

The limit-exceeding requests will fail and return 403 Access denied because of exceeding rate limit.

Sr. No

API Name

Throttling Limit Rate (Request/Second)

1

PlaceOrder

10

2

PlaceSmartOrder

10

3

ModifyOrder

10

4

CancelOrder

10

5

CancelAllOrder

10

6

ClosePosition

10

[PreviousHTTP Status Codes](https://docs.openalgo.in/api-documentation/v1/http-status-codes) [NextAPI Collections](https://docs.openalgo.in/api-documentation/v1/api-collections)

Last updated 3 months ago

## OpenAlgo API Collections
The OpenAlgo API Collections are a comprehensive set of tools designed to streamline your journey into algorithmic trading. Hosted on [GitHub](https://github.com/marketcalls/openalgo/tree/main/collections), these collections offer an intuitive and ready-to-use interface to interact with OpenAlgo’s powerful capabilities, making it easier for developers, traders, and enthusiasts to integrate and automate trading strategies.

[Postman Collections](https://github.com/marketcalls/openalgo/blob/main/collections/openalgo_postman.json)

[Bruno Collections](https://github.com/marketcalls/openalgo/blob/main/collections/openalgo_bruno.json)

[PreviousRate Limiting](https://docs.openalgo.in/api-documentation/v1/rate-limiting) [NextSymbol Format](https://docs.openalgo.in/symbol-format)

Last updated 2 months ago

## OpenAlgo Symbol Format
#### [Direct link to heading](https://docs.openalgo.in/symbol-format\#openalgo-symbol-format-standardization)    OpenAlgo Symbol Format Standardization

OpenAlgo standardizes financial instrument identification via a common symbol format across all exchanges and brokers, enhancing compatibility and simplifying automated trading. This uniform symbology eliminates the need for traders to adapt to varied broker-specific formats, streamlining algorithm development and execution. The format integrates key identifiers such as the base symbol, expiration date, and option type, ensuring consistent and error-free communication within trading systems. With OpenAlgo, developers can efficiently extend platform capabilities while traders focus on strategy, not syntax.

### [Direct link to heading](https://docs.openalgo.in/symbol-format\#equity-symbol-format)    Equity Symbol Format

In the context of OpenAlgo, equity symbols are constructed based on the base symbol of the stock.

**Examples:**

1. **NSE Equity for Infosys:** Given the base symbol `INFY`, the OpenAlgo symbol for Infosys on the National Stock Exchange (NSE) would be `INFY`.

2. **BSE Equity for Tata Motors:** With the base symbol `TATAMOTORS`, the symbol on the Bombay Stock Exchange (BSE) would be `TATAMOTORS`.

3. **NSE Equity for State Bank of India:** If the base symbol is `SBIN`, the OpenAlgo symbol on NSE would be `SBIN`.


### [Direct link to heading](https://docs.openalgo.in/symbol-format\#future-symbol-format)    Future Symbol Format

For futures, the OpenAlgo symbology specifies that the symbol should consist of the base symbol followed by the expiration date and "FUT" to denote that it is a futures contract.

**Format:** `[Base Symbol][Expiration Date]FUT`

Below are the extended examples for various futures contracts:

**NSE Futures:**

- **Example:** For Bank Nifty futures expiring in April 2024, the symbol would be `BANKNIFTY24APR24FUT`.


**BSE Futures:**

- **Example:** For SENSEX futures expiring in April 2024, the symbol would be `SENSEX24APRFUT`.


**Currency Futures:**

- **Example:** For USDINR currency futures expiring in May 2024, the symbol would be `USDINR10MAY24FUT`.


**MCX Futures:**

- **Example:** For crude oil futures on MCX expiring in May 2024, the symbol would be `CRUDEOILM20MAY24FUT`.


**IRC Futures:**

- **Example:** For government bond futures, specifically the 7.26% 2033 bond expiring in April 2024, the symbol in OpenAlgo would be `726GS203325APR24FUT`.


### [Direct link to heading](https://docs.openalgo.in/symbol-format\#options-symbol-format)    Options Symbol Format

Options symbols in OpenAlgo are structured to include the base symbol, the expiration date, the strike price, and whether it's a Call or Put option.

**Format:** `[Base Symbol][Expiration Date][Strike Price][Option Type]`

**Examples:**

**NSE Index Options:**

- **Example:** For a Nifty call option with a strike price of 20,800, expiring on 28th March 2024, the symbol would be `NIFTY28MAR2420800CE`.


**NSE Stock Options:**

- **Example:** For a Vedanta Limited (VEDL) call option with a strike price of 292.50, expiring on 25th April 2024, the symbol would be `VEDL25APR24292.5CE`.


**Currency Options:**

- **Example:** For a US Dollar to Indian Rupee (USDINR) call option with a strike price of 82, expiring on 19th April 2024, the symbol would be `USDINR19APR2482CE`.


**MCX Options:**

- **Example:** For a Crude Oil call option with a strike price of 6,750, expiring on 17th April 2024, the symbol would be `CRUDEOIL17APR246750CE`.


**IRC Options:**

- **Example:** For an Goverent bond (726GS2032) put option with a strike price of 97, expiring on 25th April 2024, the symbol would be `726GS203225APR2497PE`.


### [Direct link to heading](https://docs.openalgo.in/symbol-format\#common-nse-index-symbols-exchange-code-nse_index)    Common NSE Index Symbols (Exchange Code : NSE\_INDEX)

NIFTY
NIFTYNXT50
FINNIFTY
BANKNIFTY
MIDCPNIFTY
INDIAVIX

### [Direct link to heading](https://docs.openalgo.in/symbol-format\#common-bse-index-symbols-exchange-code-bse_index)    Common BSE Index Symbols (Exchange Code : BSE\_INDEX)

SENSEX
BANKEX
SENSEX50

### [Direct link to heading](https://docs.openalgo.in/symbol-format\#exchange-codes)    Exchange Codes

The supported exchange symbol formats in OpenAlgo allow for an identification system that denotes where the instrument is traded, along with specific details that vary by instrument type:

- **NSE:** `NSE` for National Stock Exchange equities.

- **BSE:** `BSE` for Bombay Stock Exchange equities.

- **NFO:** `NFO` for NSE Futures and Options.

- **BFO:** `BFO` for BSE Futures and Options.

- **BCD:** `BCD` for BSE Currency Derivatives.

- **CDS:** `CDS` for NSE Currency Derivatives.

- **MCX:** `MCX` for commodities traded on the Multi Commodity Exchange.

- **NSE\_INDEX:** `NSE_INDEX` for indices on the National Stock Exchange.

- **BSE\_INDEX:** `BSE_INDEX` for indices on the Bombay Stock Exchange.


### [Direct link to heading](https://docs.openalgo.in/symbol-format\#database-schema-common-symbols)    Database Schema (Common Symbols)

For developers, understanding the database schema is essential for managing data effectively within OpenAlgo:

01. **id:** A unique identifier for each record in the database.

02. **symbol:** The standard trading symbol of the instrument as per OpenAlgo's symbology.

03. **brsymbol:** The broker-specific symbol for the instrument, if applicable.

04. **name:** The common name of the instrument (e.g., the company name for equities).

05. **exchange:** The standard exchange identifier code (e.g NSE, BSE, MCX CDS etc) where the instrument is traded as per OpenAlgo's symbology.

06. **brexchange:** The specific broker exchange identifier, if different from the standard exchange code.

07. **token:** A unique token or code assigned to the instrument, possibly for internal tracking or broker-specific identification.

08. **expiry:** The expiration date for derivatives contracts, formatted as per broker/exchange standards.

09. **strike:** The strike price for options contracts.

10. **lotsize:** The standardized lot size for the instrument, particularly relevant for derivatives trading.

11. **instrumenttype:** The type of instrument (e.g., equity, future, option).

12. **tick\_size:** The minimum price movement of the instrument on the exchange.


![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FvUWO49dLv5Pklo6qPtIV%252Fimage.png%3Falt%3Dmedia%26token%3D7cea9426-f5b9-4c29-b29f-a2e4b9ea7030&width=768&dpr=4&quality=100&sign=9413d7ce&sv=2)

This schema captures both the standardized OpenAlgo symbology and the potentially divergent broker-specific information, enabling algorithms and traders to operate across multiple platforms without confusion. It allows for the storage of instrument metadata necessary for trading activities and ensures that all financial instruments are identifiable and their market details readily accessible.

[PreviousAPI Collections](https://docs.openalgo.in/api-documentation/v1/api-collections) [NextAmibroker](https://docs.openalgo.in/trading-platform/amibroker)

Last updated 6 days ago

## AmiBroker Trading Platform
AmiBroker is a popular software among traders for its advanced technical analysis and algorithmic trading capabilities. It suits algorithmic trading well due to several key features:

1. **Advanced Charting and Analysis Tools**: AmiBroker offers a wide range of charting options and technical indicators, allowing traders to conduct thorough market analysis and develop strategies based on historical and real-time data.

2. **AFL (AmiBroker Formula Language)**: One of the core strengths of AmiBroker is its powerful and efficient programming language, AFL. It enables traders to write custom trading rules, indicators, and algorithms. AFL is designed to be easy to learn and fast to execute, making it ideal for developing complex trading strategies without requiring extensive programming knowledge.

3. **Backtesting Capability**: AmiBroker provides robust backtesting tools that allow traders to test their trading strategies on historical data before applying them in live markets. This feature is crucial for algorithmic trading, as it helps identify and refine effective strategies while minimizing risk.

4. **Optimization**: Along with backtesting, AmiBroker offers optimization features that enable traders to fine-tune their strategies by testing various parameters. This process helps in identifying the most effective settings for maximum profitability or efficiency.

5. **Automation and Execution**: AmiBroker can be integrated with trading platforms for automated trading. It can send orders directly to the market based on the rules defined in the AFL scripts, enabling fully automated, hands-off trading.

6. **Scalability and Speed**: The software is designed for efficiency, able to handle large volumes of data and execute trading strategies with minimal delay. This is crucial for high-frequency trading strategies that rely on speed and efficiency.


[PreviousSymbol Format](https://docs.openalgo.in/symbol-format) [NextAmiQuotes](https://docs.openalgo.in/trading-platform/amibroker/amiquotes)

Last updated 11 months ago

## Amiquotes Live Data
**This tool helps you to fetch live data ( 1minute / Daily) data directly from the broker and seamlessly update Amibroker using the Amiquotes tool every minute.**

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/amiquotes\#prerequisites)    Prerequisites

OpenAlgo and OpenAlgo API Key

Amibroker 6.0 or higher

Amiquotes 4.10 or higher (mostly preinstalled with Amibroker) if not download from [Amibroker Download section](https://amibroker.com/download.html)

OpenAlgo supported Brokers providing Historical Data / Intraday Data API

Note : As of now kotak not supporting intraday/historical data API

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/amiquotes\#step-1-download-openalgo-amiquotes-plugin)    Step 1 : Download OpenAlgo - Amiquotes (Plugin)

[1KB\\
\\
OpenAlgo.ads](https://17901342-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FmBwEhITzgv0O0fEGIIRN%2Fuploads%2F31IU1iIdV0PJEkEDEZpw%2FOpenAlgo.ads?alt=media&token=21bd064a-ee01-480f-888f-6f914f0d6c2a)

Download the file and save under **Amibroker -> Amiquotes -> DataSource Folder**

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FPtrzbYVzbQhSIDnuLgue%252Fimage.png%3Falt%3Dmedia%26token%3Dca3fdb10-471c-42a1-9129-28ff9e56c876&width=768&dpr=4&quality=100&sign=ba809c5d&sv=2)

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/amiquotes\#step-2-create-the-amibroker-database)    Step 2 : Create the Amibroker Database

Open Amibroker Goto File Menu -> New -> Database

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FI44CxY3hDTnlhwlSr26b%252Fimage.png%3Falt%3Dmedia%26token%3Dabfe59d3-cf8b-46f2-ad8b-718c8f732ad7&width=768&dpr=4&quality=100&sign=26c53f06&sv=2)

Create a New Database

Enter the Database Name, Base Time Interval and Click Create

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F04eADIlm3v4f35hmP5ob%252Fimage.png%3Falt%3Dmedia%26token%3D3f9d56a0-da7c-421f-8304-18d1f7252eea&width=768&dpr=4&quality=100&sign=418136d6&sv=2)

Enter the Database Source as (local database) and Number of Bars as 75000

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FpKGW2kxsGWNNPKAvnbCF%252Fimage.png%3Falt%3Dmedia%26token%3D5235cfbb-0461-4acf-97ca-7d6c687a042f&width=768&dpr=4&quality=100&sign=5448a39b&sv=2)

Now click on Intraday Settings and Enable Allow Mixed EOD/Interval data and press ok

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FAQsTGLiFFypDqpy8Waus%252Fimage.png%3Falt%3Dmedia%26token%3D68e57553-cc2c-4902-9dea-215029f98235&width=768&dpr=4&quality=100&sign=662910cf&sv=2)

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/amiquotes\#step-3-add-openalgo-ticker-symbols)    Step 3 : Add OpenAlgo Ticker Symbols

Add Ticker Symbols from the Symbols menu -> New

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FR64U6n63bSWO1Y8tP7tS%252Fimage.png%3Falt%3Dmedia%26token%3D39c505a8-bff9-4b4f-a66d-db873b19601e&width=768&dpr=4&quality=100&sign=39893e25&sv=2)

You can Also add the ticker symbol with comma separated

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F3hrzjMuJ7BgGvN4vgxC5%252Fimage.png%3Falt%3Dmedia%26token%3Db5f99296-eea1-4322-94cd-3393ee2c8bc7&width=768&dpr=4&quality=100&sign=f17ad097&sv=2)

If you want to import bulk symbols consider using Watchlist import method (Supports .txt or .csv or .tls format)

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fu7YgvHmewMR5Z3eBEKKM%252Fimage.png%3Falt%3Dmedia%26token%3Dc06aefcf-9cda-4b0b-abd4-d32c385d90d2&width=768&dpr=4&quality=100&sign=87c15aa&sv=2)

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/amiquotes\#step-4-amiquote-realtime-update)    Step 4 : Amiquote Realtime Update

Open Amiquote from Tools Menu -> Auto-update quotes (AmiQuote)

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F4y9PtyCqpGi3hjbE52Lp%252Fimage.png%3Falt%3Dmedia%26token%3D1357ac88-e131-478e-bf1b-9f0c2ca8aefa&width=768&dpr=4&quality=100&sign=e15bfc8c&sv=2)

From the dropdown of Amiquote Select OpenAlgo

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FxT2Ud1yV4uIXPOt9QrW1%252Fimage.png%3Falt%3Dmedia%26token%3Db3258412-2813-4608-ad23-86cb49156625&width=768&dpr=4&quality=100&sign=8b44184c&sv=2)

Alternatively, you can also import the openalgo template using the import method. Goto **Data Source Menu -> Import**

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F3oWZ4Zd6jhV3VJQKIGXU%252Fimage.png%3Falt%3Dmedia%26token%3D05ec954b-5498-41a6-bcdd-a094c492be4d&width=768&dpr=4&quality=100&sign=672b35ce&sv=2)

configure the OpenAlgo API key

Get the OpenAlgo API Key by visiting **openalgo -> Dashboard -> Click on Profile Icon -> APIKey**

Create one if you installed openalgo for the first time. Copy the API key and paste in the User-definable data source -> API Key Section as shown below and press ok

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FZMWtuCqQHptrrykRHaBC%252Fimage.png%3Falt%3Dmedia%26token%3Da8aaebf6-e090-4e82-a0d0-8e0c1593133d&width=768&dpr=4&quality=100&sign=dcbc7f95&sv=2)

Now Select the desired interval and set Run every 1min and press the play button

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FFBtiGDlkaFyo7iKsUvm9%252Fimage.png%3Falt%3Dmedia%26token%3D06dca8ac-528f-4d06-9c32-8c95ddef49b7&width=768&dpr=4&quality=100&sign=f4c92161&sv=2)

Now the Data Download from the Broker via OpenAlgo Starts

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FwYg1qCQWkU2koAWhWaxW%252Fimage.png%3Falt%3Dmedia%26token%3Dc78516ca-3121-4c11-bd70-299c4e3bbcb9&width=768&dpr=4&quality=100&sign=fcd8bf21&sv=2)

Now you can see that openalgo is Auto updating the Amibroker Database every 1 minute

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F1KrpDzssbcIdO8gfsHBm%252Fimage.png%3Falt%3Dmedia%26token%3D513979d9-6760-4130-b2d5-533b3327062b&width=768&dpr=4&quality=100&sign=3da2b037&sv=2)

Make sure that Charts are loaded properly.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F0XmX0BvnmZZ9Wwe2WxbA%252FAmibroker%2520Chart.png%3Falt%3Dmedia%26token%3D684e60b0-69ac-4e9b-9ae6-4c1aeb9b3230&width=768&dpr=4&quality=100&sign=5b50d836&sv=2)

Start using your brokers data for your analysis purpose.

For more details and troubleshooting refer the [Ticker API](https://docs.openalgo.in/api-documentation/v1/data-api/ticker)

Make sure to login to openalgo every day to fetch the live intraday/EOD quotes

[PreviousAmibroker](https://docs.openalgo.in/trading-platform/amibroker) [NextButton Trading Module](https://docs.openalgo.in/trading-platform/amibroker/button-trading-module)

Last updated 2 months ago

## Button Trading Module
Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
//Rajandran R - Creator of OpenAlgo
//website - openalgo.in / marketcalls.in
//OpenAlgo - Amibroker Button Trading Split Order Module v1.0
//Date - 21/08/2024

_SECTION_BEGIN("OpenAlgo Button Trading with Split Orders");

RequestTimedRefresh(1, False);

// Parameters for trading settings
apikey = ParamStr("OpenAlgo API Key", "******");
strategy = ParamStr("Strategy", "Button Trading");
symbol = ParamStr("Symbol", "NIFTY29AUG2424600CE"); //OpenAlgo Symbol
exchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS",1);
pricetype = ParamStr("Price Type", "MARKET");
product = ParamList("Product", "MIS|NRML|CNC");
quantity = Param("Quantity", 5000, 1, 10000, 1);  // Total quantity to be traded
freezeqty = Param("Freeze Quantity", 1800, 1, 5000, 1);  // Maximum allowed quantity per order

// Parameters for connectivity settings
host = ParamStr("Host", "http://127.0.0.1:5000");
ver = ParamStr("API Version", "v1");

// Control parameters for voice alerts and algo mode
VoiceAlert = ParamList("Voice Alert", "Disable|Enable", 1);
EnableAlgo = ParamList("Algo Mode", "Disable|Enable", 0);  // Algo Mode

bridgeurl = host + "/api/" + ver;

static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = static_name_+interval(2)+strategy+"algostatus";

//OpenAlgo Dashboard

GfxSelectFont( "BOOK ANTIQUA", 14, 100 );
GfxSetBkMode( 1 );
if(EnableAlgo == "Enable")
{
AlgoStatus = "Algo Enabled";
GfxSetTextColor( colorGreen );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=1)
{
_TRACE("Algo Status : Enabled");
StaticVarSet(static_name_algo, 1);
}
}
if(EnableAlgo == "Disable")
{
AlgoStatus = "Algo Disabled";
GfxSetTextColor( colorRed );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=0)
{
_TRACE("Algo Status : Disabled");
StaticVarSet(static_name_algo, 0);
}
}

_SECTION_BEGIN("OpenAlgo Bridge Controls");

EnableScript("VBScript");
<%
Public Sub PlaceOrder(action, quantity)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placeorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " api_url :" & url


    AFL("api_request") = api_parameters
    AFL("api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub SquareoffAll()
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/closeposition"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " api_url :" & url


    AFL("sq_api_request") = api_parameters
    AFL("sq_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

%>

openalgo = GetScriptObject();

// Function to split orders and place them in smaller batches based on freezeqty
function PlaceSplitOrders(action, totalQuantity) {
    remainingQuantity = totalQuantity;  // Start with total quantity

    while (remainingQuantity > 0) {
        if (remainingQuantity >= freezeqty) {
            orderQuantity = freezeqty;
        } else {
            orderQuantity = remainingQuantity;  // Remaining quantity for the last order
        }

        // Place the order with the calculated order quantity
        openalgo.PlaceOrder(action, orderQuantity);
        _TRACE("Placed " + action + " order for " + orderQuantity + " qty");
		_TRACE("API Request : " + api_request);
        _TRACE("API Response : " + api_response);


        // Update the remaining quantity
        remainingQuantity = remainingQuantity - orderQuantity;
    }
}

// Button Trading Logic
X0 = 20;
Y0 = 100;
X1 = 60;

LBClick = GetCursorMouseButtons() == 9;  // Left Button Click
MouseX  = Nz(GetCursorXPosition(1));     // X Position of Mouse
MouseY  = Nz(GetCursorYPosition(1));     // Y Position of Mouse

// Procedure to draw buttons on the chart
procedure DrawButton(Text, x1, y1, x2, y2, colorFrom, colorTo) {
    GfxSetOverlayMode(0);
    GfxSelectFont("Verdana", 9, 700);
    GfxSetBkMode(1);
    GfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);
    GfxDrawText(Text, x1, y1, x2, y2, 32 | 1 | 4 | 16);
}

GfxSetTextColor(colorWhite);

if (EnableAlgo == "Enable") {
    // Drawing buttons for Buy, Sell, Short, Cover, and Close All
    DrawButton("BUY", X0, Y0, X0 + X1, Y0 + 50, colorGreen, colorGreen);
    CursorInBEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 AND MouseY <= Y0 + 50;
    BEButtonClick = CursorInBEButton AND LBClick;

    DrawButton("SELL", X0 + 65, Y0, X0 + X1 + 65, Y0 + 50, colorRed, colorRed);
    CursorInBXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 AND MouseY <= Y0 + 50;
    BXButtonClick = CursorInBXButton AND LBClick;

    DrawButton("SHORT", X0, Y0 + 55, X0 + X1, Y0 + 105, colorRed, colorRed);
    CursorInSEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;
    SEButtonClick = CursorInSEButton AND LBClick;

    DrawButton("COVER", X0 + 65, Y0 + 55, X0 + X1 + 65, Y0 + 105, colorGreen, colorGreen);
    CursorInSXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;
    SXButtonClick = CursorInSXButton AND LBClick;

    DrawButton("CLOSE ALL", X0, Y0 + 110, X0 + X1 + 65, Y0 + 155, colorRed, colorRed);
    CursorInCXButton = MouseX >= X0 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 110 AND MouseY <= Y0 + 155;
    CXButtonClick = CursorInCXButton AND LBClick;

    // BUY Button Click Event
    if (BEButtonClick AND StaticVarGet(static_name_ + "BEAlgo") == 0) {
        PlaceSplitOrders("BUY", quantity);  // Split the order into smaller quantities
        if (VoiceAlert == "Enable") {
            Say("Buy Order Triggered");
        }

        StaticVarSet(static_name_ + "BEAlgo", 1);
    } else {
        StaticVarSet(static_name_ + "BEAlgo", 0);
    }

    // SELL Button Click Event
    if (BXButtonClick AND StaticVarGet(static_name_ + "BXAlgo") == 0) {
        PlaceSplitOrders("SELL", quantity);  // Split the order into smaller quantities
        if (VoiceAlert == "Enable") {
            Say("Sell Order Triggered");
        }

        StaticVarSet(static_name_ + "BXAlgo", 1);
    } else {
        StaticVarSet(static_name_ + "BXAlgo", 0);
    }

    // SHORT Button Click Event
    if (SEButtonClick AND StaticVarGet(static_name_ + "SEAlgo") == 0) {
        PlaceSplitOrders("SELL", quantity);  // Execute short order as SELL
        if (VoiceAlert == "Enable") {
            Say("Short Order Triggered");
        }

        StaticVarSet(static_name_ + "SEAlgo", 1);
    } else {
        StaticVarSet(static_name_ + "SEAlgo", 0);
    }

    // COVER Button Click Event
    if (SXButtonClick AND StaticVarGet(static_name_ + "SXAlgo") == 0) {
        PlaceSplitOrders("BUY", quantity);  // Execute cover order as BUY
        if (VoiceAlert == "Enable") {
            Say("Cover Order Triggered");
        }

        StaticVarSet(static_name_ + "SXAlgo", 1);
    } else {
        StaticVarSet(static_name_ + "SXAlgo", 0);
    }

    // CLOSE ALL Button Click Event
    if (CXButtonClick AND StaticVarGet(Name() + GetChartID() + "CXAlgo") == 0) {
        openalgo.SquareoffAll();  // Call the function to close all open positions
        if (VoiceAlert == "Enable") {
            Say("Squareoff All Triggered");
        }
        _TRACE("API Request : " + sq_api_request);
        _TRACE("API Response : " + sq_api_response);
        StaticVarSet(Name() + GetChartID() + "CXAlgo", 1);
    } else {
        StaticVarSet(Name() + GetChartID() + "CXAlgo", 0);
    }
}

_SECTION_END();

_SECTION_BEGIN("Candlestick Charts with Date & Time Axis");

// Enable the Date & Time Axis
SetChartOptions(0, chartShowArrows | chartShowDates);

// Plotting Candlestick charts
Plot(Close, "Candle", colorDefault, styleCandle);

_SECTION_END();

```

[PreviousButton Trading Module](https://docs.openalgo.in/trading-platform/amibroker/button-trading-module) [NextButton Trading with Stoploss](https://docs.openalgo.in/trading-platform/amibroker/button-trading-with-stoploss)

Last updated 7 months ago

## Button Trading with Stoploss
Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
//Rajandran R - Creator of OpenAlgo
//website - openalgo.in / marketcalls.in
//OpenAlgo - Amibroker Button Trading Module v1.0 with Stoploss
//Date - 13/08/2024

_SECTION_BEGIN("OpenAlgo Button Trading");

RequestTimedRefresh(1,False);
SetOption("StaticVarAutoSave", 30 );
EnableTextOutput(False);

apikey = ParamStr("OpenAlgo API Key", "******");
strategy = ParamStr("Strategy", "Amibroker");
symbol = ParamStr("Symbol", "RELIANCE");
exchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");
pricetype = ParamStr("Price Type", "MARKET");
product = ParamList("Product", "MIS|NRML|CNC");
quantity = Param("Quantity", 1,1,1000,1);
stops = Param("Stoploss (points)",30,0.05,1000,0.05);

host = ParamStr("host","http://127.0.0.1:5000");
ver = ParamStr("API Version","v1");

VoiceAlert = ParamList("Voice Alert","Disable|Enable",1);
EnableAlgo = ParamList("Algo Mode","Disable|Enable",0); // Algo Mode

bridgeurl = host+"/api/"+ver;

static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = static_name_+interval(2)+strategy+"algostatus";

//OpenAlgo Dashboard

GfxSelectFont( "BOOK ANTIQUA", 14, 100 );
GfxSetBkMode( 1 );
if(EnableAlgo == "Enable")
{
AlgoStatus = "Algo Enabled";
GfxSetTextColor( colorGreen );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=1)
{
_TRACE("Algo Status : Enabled");
StaticVarSet(static_name_algo, 1);
}
}
if(EnableAlgo == "Disable")
{
AlgoStatus = "Algo Disabled";
GfxSetTextColor( colorRed );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=0)
{
_TRACE("Algo Status : Disabled");
StaticVarSet(static_name_algo, 0);
}
}

_SECTION_BEGIN("OpenAlgo Bridge Controls");

EnableScript("VBScript");
<%
Public Sub PlaceOrder(action, quantity)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placeorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " api_url :" & url


    AFL("api_request") = api_parameters
    AFL("api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub PlaceSLOrder(action, quantity,stopprice)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product, price, disclosed_quantity
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = "SL-M"
    product = AFL.Var("product")
    price = "0"
    disclosed_quantity = "0"



    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & _
    """,""price"":""" & price & _
    """,""trigger_price"":""" & stopprice & _
    """,""disclosed_quantity"":""" & disclosed_quantity & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placeorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " api_url :" & url


    AFL("sl_api_request") = api_parameters
    AFL("sl_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub CancelOrder(orderid)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")



    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""orderid"":""" & orderid & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/cancelorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " orderid :" & orderid


    AFL("cancel_api_request") = api_parameters
    AFL("cancel_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub SquareoffAll()
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/closeposition"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " api_url :" & url


    AFL("sq_api_request") = api_parameters
    AFL("sq_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

%>

openalgo = GetScriptObject();

_SECTION_BEGIN("Stoploss OrderID Display");

StaticVarBuySLOrderID = StaticVarGetText(static_name_ + "BuySLOrderID");
StaticVarSellSLOrderID = StaticVarGetText(static_name_ + "ShortSLOrderID");

printf("\n The Buy Stoploss Order ID is : " + StaticVarBuySLOrderID);
printf("\n The Sell Stoploss Order ID is : " + StaticVarSellSLOrderID);

_SECTION_END();

_SECTION_BEGIN("Button Trading - For Old Amibroker Versions");

X0 = 20;
Y0 = 100;
X1 = 60;

LBClick = GetCursorMouseButtons() == 9;	// Click
MouseX  = Nz(GetCursorXPosition(1));		//
MouseY  = Nz(GetCursorYPosition(1));		//

procedure DrawButton (Text, x1, y1, x2, y2, colorFrom, colorTo)
{
	GfxSetOverlayMode(0);
	GfxSelectFont("Verdana", 9, 700);
	GfxSetBkMode(1);
	GfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);
	GfxDrawText(Text, x1, y1, x2, y2, 32|1|4|16);
}
GfxSetTextColor(colorWhite);

if(EnableAlgo == "Enable")
{

	DrawButton("BE", X0, Y0, X0+X1, Y0+50, colorGreen, colorGreen);
	CursorInBEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0 AND MouseY <= Y0+50;
	BEButtonClick = CursorInBEButton AND LBClick;

	DrawButton("BX", X0+65, Y0, X0+X1+65, Y0+50, colorRed, colorRed);
	CursorInBXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0 AND MouseY <= Y0+50;
	BxButtonClick = CursorInBXButton AND LBClick;

	DrawButton("SE", X0, Y0+55, X0+X1, Y0+105, colorRed, colorRed);
	CursorInSEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0+55 AND MouseY <= Y0+105;
	SEButtonClick = CursorInSEButton AND LBClick;

	DrawButton("SX", X0+65, Y0+55, X0+X1+65, Y0+105, colorGreen, colorGreen);
	CursorInSXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0+55 AND MouseY <= Y0+105;
	SXButtonClick = CursorInSXButton AND LBClick;

	DrawButton("CLOSE ALL", X0, Y0+110, X0+X1+65, Y0+155, colorRed, colorRed);
	CursorInCXButton = MouseX >= X0 AND MouseX <= X0+X1+65 AND MouseY >= Y0+110 AND MouseY <= Y0+155;
	CXButtonClick = CursorInCXButton AND LBClick;


	if( BEButtonClick AND StaticVarGet(static_name_+"BEAlgo")==0 )
	{
		openalgo.placeorder("BUY",quantity);
		_TRACE("API Request : "+api_request);
		_TRACE("API Response : "+api_response);
		slprice = LastValue(Close + stops);
		openalgo.placeSLorder("SELL",quantity,slprice);

		orderid = StrExtract(sl_api_response,1,'{');
		orderid = StrExtract(orderid,1,':');
		orderid = StrExtract(orderid,0,',');
		orderid = StrExtract(orderid,1,'"');

		_TRACE("API Request : "+sl_api_request);
		_TRACE("API Response : "+sl_api_response);
		_TRACE("The OrderID : "+orderid);

		StaticVarSetText(static_name_+"BuySLOrderID",orderid,True);


        if(VoiceAlert == "Enable"){
				Say("Buy Order Triggered");
			}


		StaticVarSet(static_name_+"BEAlgo",1);
	}
	else
	{
		StaticVarSet(static_name_+"BEAlgo",0);
	}
	if( BXButtonClick AND StaticVarGet(static_name_+"BXAlgo")==0 )
	{

		StaticVarBuySLOrderID = StaticVarGetText(static_name_ + "BuySLOrderID");
		openalgo.cancelorder(StaticVarBuySLOrderID);
		_TRACE("Cancel API Request : "+cancel_api_request);
		_TRACE("Cancel API Response : "+cancel_api_response);
		StaticVarSetText(static_name_+"BuySLOrderID","",True);

		openalgo.placeorder("SELL",quantity);
        if(VoiceAlert == "Enable"){
				Say("Sell Order Triggered");
			}
		_TRACE("API Request : "+api_request);
		_TRACE("API Response : "+api_response);
		StaticVarSet(static_name_+"BXAlgo",1);
	}
	else
	{
		StaticVarSet(static_name_+"BXAlgo",0);
	}

	if( SEButtonClick AND StaticVarGet(static_name_+"SEAlgo")==0 )
	{
		openalgo.placeorder("SELL",quantity);
		_TRACE("API Request : "+api_request);
		_TRACE("API Response : "+api_response);
		slprice = LastValue(Close - stops);
		openalgo.placeSLorder("BUY",quantity,slprice);

		orderid = StrExtract(sl_api_response,1,'{');
		orderid = StrExtract(orderid,1,':');
		orderid = StrExtract(orderid,0,',');
		orderid = StrExtract(orderid,1,'"');

		_TRACE("API Request : "+sl_api_request);
		_TRACE("API Response : "+sl_api_response);
		_TRACE("The OrderID : "+orderid);

		StaticVarSetText(static_name_+"ShortSLOrderID",orderid,True);

        if(VoiceAlert == "Enable"){
				Say("Short Order Triggered");
			}
		_TRACE("API Request : "+api_request);
		_TRACE("API Response : "+api_response);
		StaticVarSet(static_name_+"SEAlgo",1);
	}
	else
	{
		StaticVarSet(static_name_+"SEAlgo",0);
	}

	if( SXButtonClick AND StaticVarGet(static_name_+"SXAlgo")==0 )
	{
		StaticVarSellSLOrderID = StaticVarGetText(static_name_ + "ShortSLOrderID");
		openalgo.cancelorder(StaticVarSellSLOrderID);
		_TRACE("Cancel API Request : "+cancel_api_request);
		_TRACE("Cancel API Response : "+cancel_api_response);
		StaticVarSetText(static_name_+"ShortSLOrderID","",True);

		openalgo.placeorder("BUY",quantity);
        if(VoiceAlert == "Enable"){
				Say("Cover Order Triggered");
			}
		_TRACE("API Request : "+api_request);
		_TRACE("API Response : "+api_response);
		StaticVarSet(static_name_+"SXAlgo",1);
	}
	else
	{
		StaticVarSet(static_name_+"SXAlgo",0);
	}

	if( CXButtonClick AND StaticVarGet(Name()+GetChartID()+"CXAlgo")==0 )
	{
		openalgo.Squareoffall();
		if(VoiceAlert == "Enable"){
				Say("Squareoff All Triggered");
			}
		_TRACE("API Request : "+sq_api_request);
		_TRACE("API Response : "+sq_api_response);
		StaticVarSet(Name()+GetChartID()+"CXAlgo",1);
	}
	else
	{
		StaticVarSet(Name()+GetChartID()+"CXAlgo",0);
	}


}

_SECTION_END();

_SECTION_BEGIN("Candlestick Charts with Date & Time Axis");

//Enable the Date & Time Axis
SetChartOptions(0, chartShowArrows | chartShowDates);

//Plotting Candlestick charts
Plot(Close,"Candle",colorDefault,styleCandle);

_SECTION_END();

```

[PreviousButton Trading with Split Orders](https://docs.openalgo.in/trading-platform/amibroker/button-trading-with-split-orders) [NextSmartOrder Chart Module](https://docs.openalgo.in/trading-platform/amibroker/smartorder-chart-module)

Last updated 7 months ago

## OpenAlgo SmartOrder Module
## [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/smartorder-chart-module\#internet-function-method-modern)    Internet Function Method (Modern)

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
// Rajandran R - Creator of OpenAlgo
// Website - openalgo.in / marketcalls.in
// OpenAlgo - Amibroker SmartOrder Chart Trading Module v2.0
// Date - 12/12/2024

_SECTION_BEGIN("OpenAlgo SmartOrder Trading Module - Modern Methods");

RequestTimedRefresh(1, False);

// Define parameter controls
apikey = ParamStr("OpenAlgo API Key", "******");
strategy = ParamStr("Strategy", "Amibroker");
symbol = ParamStr("Symbol", "YESBANK");
exchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");
pricetype = ParamStr("Price Type", "MARKET");
product = ParamList("Product", "MIS|NRML|CNC");
quantity = Param("Quantity", 1, 1, 1000, 1);
position_size = Param("Position Size", 0, -1000, 1000, 1);

host = ParamStr("Host", "http://127.0.0.1:5000");
ver = ParamStr("API Version", "v1");

VoiceAlert = ParamList("Voice Alert", "Disable|Enable", 1);
EnableAlgo = ParamList("Algo Mode", "Disable|Enable", 0);
EnableButton = ParamList("Button Trading", "Disable|Enable", 0);

Entrydelay = Param("Entry Delay",0,0,1,1);
Exitdelay = Param("Exit Delay",0,0,1,1);

AlgoBuy = lastvalue(Ref(Buy,-Entrydelay));
AlgoSell = lastvalue(Ref(Sell,-Exitdelay));
AlgoShort = lastvalue(Ref(Short,-Entrydelay));
AlgoCover = lastvalue(Ref(Cover,-Exitdelay));

// Construct URL base
bridgeurl = host + "/api/" + ver;

static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = static_name_+interval(2)+strategy+"algostatus";

//OpenAlgo Dashboard

GfxSelectFont( "BOOK ANTIQUA", 14, 100 );
GfxSetBkMode( 1 );
if(EnableAlgo == "Enable")
{
AlgoStatus = "Algo Enabled";
GfxSetTextColor( colorGreen );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=1)
{
_TRACE("Algo Status : Enabled");
StaticVarSet(static_name_algo, 1);
}
}
if(EnableAlgo == "Disable")
{
AlgoStatus = "Algo Disabled";
GfxSetTextColor( colorRed );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=0)
{
_TRACE("Algo Status : Disabled");
StaticVarSet(static_name_algo, 0);
}
}

//Button Trading Controls

X0 = 20;
Y0 = 100;
X1 = 60;

LBClick = GetCursorMouseButtons() == 9;	// Click
MouseX  = Nz(GetCursorXPosition(1));		//
MouseY  = Nz(GetCursorYPosition(1));		//

procedure DrawButton (Text, x1, y1, x2, y2, colorFrom, colorTo)
{
	GfxSetOverlayMode(0);
	GfxSelectFont("Verdana", 9, 700);
	GfxSetBkMode(1);
	GfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);
	GfxDrawText(Text, x1, y1, x2, y2, 32|1|4|16);
}
GfxSetTextColor(colorWhite);

// Function to Place Smart Order
function PlaceSmartOrder(action, quantity, position_size) {
    postData = "{\"apikey\": \"" + apikey + "\", " +
               "\"strategy\": \"" + strategy + "\", " +
               "\"symbol\": \"" + symbol + "\", " +
               "\"action\": \"" + action + "\", " +
               "\"exchange\": \"" + exchange + "\", " +
               "\"pricetype\": \"" + pricetype + "\", " +
               "\"product\": \"" + product + "\", " +
               "\"quantity\": \"" + quantity + "\", " +
               "\"position_size\": \"" + position_size + "\"}";

    headers = "Content-Type: application/json\r\n" +
              "Accept-Encoding: gzip, deflate\r\n";
    InternetSetHeaders(headers);

    _TRACE("Smart Order Request Sent: " + postData); // Log request
    ih = InternetPostRequest(bridgeurl + "/placesmartorder", postData);

    if (ih) {
        response = "";
        while ((line = InternetReadString(ih)) != "") {
            response += line;
        }
        _TRACEF("Smart Order Response: %s", response);
        if (VoiceAlert == "Enable") Say(action + " Smart Order Placed.");
        InternetClose(ih);
    } else {
        _TRACE("Failed to place smart order.");
    }
}

// Function to Exit Order
function ExitOrder(action) {
    postData = "{\"apikey\": \"" + apikey + "\", " +
               "\"strategy\": \"" + strategy + "\", " +
               "\"symbol\": \"" + symbol + "\", " +
               "\"action\": \"" + action + "\", " +
               "\"exchange\": \"" + exchange + "\", " +
               "\"pricetype\": \"" + pricetype + "\", " +
               "\"product\": \"" + product + "\", " +
               "\"quantity\": \"0\", " +
               "\"position_size\": \"0\"}";

    headers = "Content-Type: application/json\r\n" +
              "Accept-Encoding: gzip, deflate\r\n";
    InternetSetHeaders(headers);

    _TRACE("Exit Order Request Sent: " + postData); // Log request
    ih = InternetPostRequest(bridgeurl + "/placesmartorder", postData);

    if (ih) {
        response = "";
        while ((line = InternetReadString(ih)) != "") {
            response += line;
        }
        _TRACEF("Exit Order Response: %s", response);
        if (VoiceAlert == "Enable") Say(action + " Exit Order Placed.");
        InternetClose(ih);
    } else {
        _TRACE("Failed to place exit order.");
    }
}

// Function to Square Off All Positions
function SquareOffAll() {
    postData = "{\"apikey\": \"" + apikey + "\", " +
               "\"strategy\": \"" + strategy + "\"}";

    headers = "Content-Type: application/json\r\n" +
              "Accept-Encoding: gzip, deflate\r\n";
    InternetSetHeaders(headers);

    _TRACE("Square Off Request Sent: " + postData); // Log request
    ih = InternetPostRequest(bridgeurl + "/closeposition", postData);

    if (ih) {
        response = "";
        while ((line = InternetReadString(ih)) != "") {
            response += line;
        }
        _TRACEF("Square Off Response: %s", response);
        if (VoiceAlert == "Enable") Say("All positions squared off.");
        InternetClose(ih);
    } else {
        _TRACE("Failed to square off positions.");
    }
}

// Execution Module
if (EnableAlgo != "Disable") {
    lasttime = StrFormat("%0.f", LastValue(BarIndex()));
    SetChartBkColor(colorDarkGrey);

    if (EnableAlgo == "Enable") {
        if (AlgoBuy == True AND AlgoCover == True AND StaticVarGet(static_name_ + "buyCoverAlgo") == 0 AND StaticVarGetText(static_name_ + "buyCoverAlgo_barvalue") != lasttime) {
            PlaceSmartOrder("BUY", quantity, quantity);
            if (VoiceAlert == "Enable") Say("Buy Order Triggered");

            StaticVarSetText(static_name_ + "buyCoverAlgo_barvalue", lasttime);
            StaticVarSet(static_name_ + "buyCoverAlgo", 1);
        } else if (AlgoBuy != True OR AlgoCover != True) {
            StaticVarSet(static_name_ + "buyCoverAlgo", 0);
            StaticVarSetText(static_name_ + "buyCoverAlgo_barvalue", "");
        }

        if (AlgoBuy == True AND AlgoCover != True AND StaticVarGet(static_name_ + "buyAlgo") == 0 AND StaticVarGetText(static_name_ + "buyAlgo_barvalue") != lasttime) {
            PlaceSmartOrder("BUY", quantity, position_size);
            if (VoiceAlert == "Enable") Say("Buy Order Triggered");

            StaticVarSetText(static_name_ + "buyAlgo_barvalue", lasttime);
            StaticVarSet(static_name_ + "buyAlgo", 1);
        } else if (AlgoBuy != True) {
            StaticVarSet(static_name_ + "buyAlgo", 0);
            StaticVarSetText(static_name_ + "buyAlgo_barvalue", "");
        }

        if (AlgoSell == true AND AlgoShort != True AND StaticVarGet(static_name_ + "sellAlgo") == 0 AND StaticVarGetText(static_name_ + "sellAlgo_barvalue") != lasttime) {
            ExitOrder("SELL");
            if (VoiceAlert == "Enable") Say("Sell Exit Order Triggered");

            StaticVarSetText(static_name_ + "sellAlgo_barvalue", lasttime);
            StaticVarSet(static_name_ + "sellAlgo", 1);
        } else if (AlgoSell != True) {
            StaticVarSet(static_name_ + "sellAlgo", 0);
            StaticVarSetText(static_name_ + "sellAlgo_barvalue", "");
        }

        if (AlgoShort == True AND AlgoSell == True AND StaticVarGet(static_name_ + "ShortSellAlgo") == 0 AND StaticVarGetText(static_name_ + "ShortSellAlgo_barvalue") != lasttime) {
            PlaceSmartOrder("SELL", quantity, -1 * quantity);
            if (VoiceAlert == "Enable") Say("Short Order Triggered");
            StaticVarSetText(static_name_ + "ShortSellAlgo_barvalue", lasttime);
            StaticVarSet(static_name_ + "ShortSellAlgo", 1);
        } else if (AlgoShort != True OR AlgoSell != True) {
            StaticVarSet(static_name_ + "ShortSellAlgo", 0);
            StaticVarSetText(static_name_ + "ShortSellAlgo_barvalue", "");
        }

        if (AlgoShort == True AND AlgoSell != True AND StaticVarGet(static_name_ + "ShortAlgo") == 0 AND StaticVarGetText(static_name_ + "ShortAlgo_barvalue") != lasttime) {
            PlaceSmartOrder("SELL", quantity, position_size);
            if (VoiceAlert == "Enable") Say("Short Order Triggered");

            StaticVarSetText(static_name_ + "ShortAlgo_barvalue", lasttime);
            StaticVarSet(static_name_ + "ShortAlgo", 1);
        } else if (AlgoShort != True) {
            StaticVarSet(static_name_ + "ShortAlgo", 0);
            StaticVarSetText(static_name_ + "ShortAlgo_barvalue", "");
        }

        if (AlgoCover == true AND AlgoBuy != True AND StaticVarGet(static_name_ + "CoverAlgo") == 0 AND StaticVarGetText(static_name_ + "CoverAlgo_barvalue") != lasttime) {
            ExitOrder("BUY");
            if (VoiceAlert == "Enable") Say("Short Exit Order Triggered");

            StaticVarSetText(static_name_ + "CoverAlgo_barvalue", lasttime);
            StaticVarSet(static_name_ + "CoverAlgo", 1);
        } else if (AlgoCover != True) {
            StaticVarSet(static_name_ + "CoverAlgo", 0);
            StaticVarSetText(static_name_ + "CoverAlgo_barvalue", "");
        }
    }

    if (EnableButton == "Enable") {
        DrawButton("BE", X0, Y0, X0 + X1, Y0 + 50, colorGreen, colorGreen);
        CursorInBEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 AND MouseY <= Y0 + 50;
        BEButtonClick = CursorInBEButton AND LBClick;

        DrawButton("BX", X0 + 65, Y0, X0 + X1 + 65, Y0 + 50, colorRed, colorRed);
        CursorInBXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 AND MouseY <= Y0 + 50;
        BXButtonClick = CursorInBXButton AND LBClick;

        DrawButton("SE", X0, Y0 + 55, X0 + X1, Y0 + 105, colorRed, colorRed);
        CursorInSEButton = MouseX >= X0 AND MouseX <= X0 + X1 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;
        SEButtonClick = CursorInSEButton AND LBClick;

        DrawButton("SX", X0 + 65, Y0 + 55, X0 + X1 + 65, Y0 + 105, colorGreen, colorGreen);
        CursorInSXButton = MouseX >= X0 + 65 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 55 AND MouseY <= Y0 + 105;
        SXButtonClick = CursorInSXButton AND LBClick;

        DrawButton("CLOSE ALL", X0, Y0 + 110, X0 + X1 + 65, Y0 + 155, colorRed, colorRed);
        CursorInCXButton = MouseX >= X0 AND MouseX <= X0 + X1 + 65 AND MouseY >= Y0 + 110 AND MouseY <= Y0 + 155;
        CXButtonClick = CursorInCXButton AND LBClick;

        if (BEButtonClick AND StaticVarGet(static_name_ + "BEAlgo") == 0) {
            PlaceSmartOrder("BUY", quantity, position_size);
            if (VoiceAlert == "Enable") {
                Say("Buy Order Triggered");
            }
            _TRACE("API Request: " + postData);
            StaticVarSet(static_name_ + "BEAlgo", 1);
        } else {
            StaticVarSet(static_name_ + "BEAlgo", 0);
        }

        if (BXButtonClick AND StaticVarGet(static_name_ + "BXAlgo") == 0) {
            PlaceSmartOrder("SELL", quantity, position_size);
            if (VoiceAlert == "Enable") {
                Say("Sell Order Triggered");
            }
            _TRACE("API Request: " + postData);
            StaticVarSet(static_name_ + "BXAlgo", 1);
        } else {
            StaticVarSet(static_name_ + "BXAlgo", 0);
        }

        if (SEButtonClick AND StaticVarGet(static_name_ + "SEAlgo") == 0) {
            PlaceSmartOrder("SELL", quantity, position_size);
            if (VoiceAlert == "Enable") {
                Say("Short Order Triggered");
            }
            _TRACE("API Request: " + postData);
            StaticVarSet(static_name_ + "SEAlgo", 1);
        } else {
            StaticVarSet(static_name_ + "SEAlgo", 0);
        }

        if (SXButtonClick AND StaticVarGet(static_name_ + "SXAlgo") == 0) {
            PlaceSmartOrder("BUY", quantity, position_size);
            if (VoiceAlert == "Enable") {
                Say("Cover Order Triggered");
            }
            _TRACE("API Request: " + postData);
            StaticVarSet(static_name_ + "SXAlgo", 1);
        } else {
            StaticVarSet(static_name_ + "SXAlgo", 0);
        }

        if (CXButtonClick AND StaticVarGet(Name() + GetChartID() + "CXAlgo") == 0) {
            SquareOffAll();
            if (VoiceAlert == "Enable") {
                Say("Square Off All Triggered");
            }
            _TRACE("API Request: " + postData);
            StaticVarSet(Name() + GetChartID() + "CXAlgo", 1);
        } else {
            StaticVarSet(Name() + GetChartID() + "CXAlgo", 0);
        }
    }
}

_SECTION_END();

```

## [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/smartorder-chart-module\#vb-script-method-legacy)    VB Script Method Legacy

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]

//Rajandran R - Creator of OpenAlgo
//website - openalgo.in / marketcalls.in
//OpenAlgo - Amibroker SmartOrder Chart Trading Module v1.0
//Date - 10/02/2024

_SECTION_BEGIN("OpenAlgo Trading Controls");

RequestTimedRefresh(1,False);

apikey = ParamStr("OpenAlgo API Key", "******");
strategy = ParamStr("Strategy", "Amibroker");
symbol = ParamStr("Symbol", "YESBANK");
exchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");
pricetype = ParamStr("Price Type", "MARKET");
product = ParamList("Product", "MIS|NRML|CNC");
quantity = Param("Quantity", 1,1,1000,1);

Entrydelay = Param("Entry Delay",0,0,1,1);
Exitdelay = Param("Exit Delay",0,0,1,1);

host = ParamStr("host","http://127.0.0.1:5000");
ver = ParamStr("API Version","v1");

VoiceAlert = ParamList("Voice Alert","Disable|Enable",1);
EnableButton = ParamList("Button Trading","Disable|Enable",0);
EnableAlgo = ParamList("Algo Mode","Disable|Enable",0); // Algo Mode

bridgeurl = host+"/api/"+ver;

AlgoBuy = lastvalue(Ref(Buy,-Entrydelay));
AlgoSell = lastvalue(Ref(Sell,-Exitdelay));
AlgoShort = lastvalue(Ref(Short,-Entrydelay));
AlgoCover = lastvalue(Ref(Cover,-Exitdelay));

static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = static_name_+interval(2)+strategy+"algostatus";

//OpenAlgo Dashboard

GfxSelectFont( "BOOK ANTIQUA", 14, 100 );
GfxSetBkMode( 1 );
if(EnableAlgo == "Enable")
{
AlgoStatus = "Algo Enabled";
GfxSetTextColor( colorGreen );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=1)
{
_TRACE("Algo Status : Enabled");
StaticVarSet(static_name_algo, 1);
}
}
if(EnableAlgo == "Disable")
{
AlgoStatus = "Algo Disabled";
GfxSetTextColor( colorRed );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=0)
{
_TRACE("Algo Status : Disabled");
StaticVarSet(static_name_algo, 0);
}
}

//Button Trading Controls

X0 = 20;
Y0 = 100;
X1 = 60;

LBClick = GetCursorMouseButtons() == 9;	// Click
MouseX  = Nz(GetCursorXPosition(1));		//
MouseY  = Nz(GetCursorYPosition(1));		//

procedure DrawButton (Text, x1, y1, x2, y2, colorFrom, colorTo)
{
	GfxSetOverlayMode(0);
	GfxSelectFont("Verdana", 9, 700);
	GfxSetBkMode(1);
	GfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);
	GfxDrawText(Text, x1, y1, x2, y2, 32|1|4|16);
}
GfxSetTextColor(colorWhite);

_SECTION_BEGIN("OpenAlgo Bridge Controls");

EnableScript("VBScript");
<%
Public Sub PlaceOrder(action, quantity)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placeorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " api_url :" & url


    AFL("api_request") = api_parameters
    AFL("api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub PlaceSmartOrder(action, quantity,position_size)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")



    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & _
    """,""position_size"":""" & position_size & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placesmartorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " Position Size :" & position_size & " api_url :" & url


    AFL("sm_api_request") = api_parameters
    AFL("sm_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub ExitOrder(action)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")
    position_size = "0"
    quantity = "0"


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & _
    """,""position_size"":""" & position_size & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placesmartorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " Position Size :" & position_size & " api_url :" & url


    AFL("ex_api_request") = api_parameters
    AFL("ex_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub SquareoffAll()
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/closeposition"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " api_url :" & url


    AFL("sq_api_request") = api_parameters
    AFL("sq_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

%>

openalgo = GetScriptObject();

//Execution Module

if(EnableAlgo != "Disable")
	{
		lasttime = StrFormat("%0.f",LastValue(BarIndex()));

		SetChartBkColor(colorDarkGrey);
		if(EnableButton == "Enable")

		{

			DrawButton("BE", X0, Y0, X0+X1, Y0+50, colorGreen, colorGreen);
			CursorInBEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0 AND MouseY <= Y0+50;
			BEButtonClick = CursorInBEButton AND LBClick;

			DrawButton("BX", X0+65, Y0, X0+X1+65, Y0+50, colorRed, colorRed);
			CursorInBXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0 AND MouseY <= Y0+50;
			BxButtonClick = CursorInBXButton AND LBClick;

			DrawButton("SE", X0, Y0+55, X0+X1, Y0+105, colorRed, colorRed);
			CursorInSEButton = MouseX >= X0 AND MouseX <= X0+X1 AND MouseY >= Y0+55 AND MouseY <= Y0+105;
			SEButtonClick = CursorInSEButton AND LBClick;

			DrawButton("SX", X0+65, Y0+55, X0+X1+65, Y0+105, colorGreen, colorGreen);
			CursorInSXButton = MouseX >= X0+65 AND MouseX <= X0+X1+65 AND MouseY >= Y0+55 AND MouseY <= Y0+105;
			SXButtonClick = CursorInSXButton AND LBClick;

			DrawButton("CLOSE ALL", X0, Y0+110, X0+X1+65, Y0+155, colorRed, colorRed);
			CursorInCXButton = MouseX >= X0 AND MouseX <= X0+X1+65 AND MouseY >= Y0+110 AND MouseY <= Y0+155;
			CXButtonClick = CursorInCXButton AND LBClick;

			if( BEButtonClick AND StaticVarGet(static_name_+"BEAlgo")==0 )
			{
				openalgo.placeorder("BUY",quantity);
				if(VoiceAlert == "Enable"){
						Say("Buy Order Triggered");
					}
				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

				StaticVarSet(static_name_+"BEAlgo",1);
			}
			else
			{
				StaticVarSet(static_name_+"BEAlgo",0);
			}
			if( BXButtonClick AND StaticVarGet(static_name_+"BXAlgo")==0 )
			{
				openalgo.placeorder("SELL",quantity);
				if(VoiceAlert == "Enable"){
						Say("Sell Order Triggered");
					}
				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);
				StaticVarSet(static_name_+"BXAlgo",1);
			}
			else
			{
				StaticVarSet(static_name_+"BXAlgo",0);
			}

			if( SEButtonClick AND StaticVarGet(static_name_+"SEAlgo")==0 )
			{
				openalgo.placeorder("SELL",quantity);
				if(VoiceAlert == "Enable"){
						Say("Short Order Triggered");
					}
				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);
				StaticVarSet(static_name_+"SEAlgo",1);
			}
			else
			{
				StaticVarSet(static_name_+"SEAlgo",0);
			}

			if( SXButtonClick AND StaticVarGet(static_name_+"SXAlgo")==0 )
			{
				openalgo.placeorder("BUY",quantity);
				if(VoiceAlert == "Enable"){
						Say("Cover Order Triggered");
					}
				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);
				StaticVarSet(static_name_+"SXAlgo",1);
			}
			else
			{
				StaticVarSet(static_name_+"SXAlgo",0);
			}

			if( CXButtonClick AND StaticVarGet(Name()+GetChartID()+"CXAlgo")==0 )
			{
				openalgo.Squareoffall();
				if(VoiceAlert == "Enable"){
						Say("Squareoff All Triggered");
					}
				_TRACE("API Request : "+sq_api_request);
				_TRACE("API Response : "+sq_api_response);
				StaticVarSet(Name()+GetChartID()+"CXAlgo",1);
			}
			else
			{
				StaticVarSet(Name()+GetChartID()+"CXAlgo",0);
			}

		}//button trading ends


	if(EnableAlgo == "Enable")
        {
            if (AlgoBuy==True AND AlgoCover == True AND StaticVarGet(static_name_+"buyCoverAlgo")==0 AND StaticVarGetText(static_name_+"buyCoverAlgo_barvalue") != lasttime )
            {

                openalgo.PlaceSmartOrder("BUY",quantity,quantity);
                if(VoiceAlert == "Enable"){
						Say("Buy Order Triggered");
					}
				_TRACE("API Request : "+sm_api_request);
				_TRACE("API Response : "+sm_api_response);
                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyCoverAlgo",1); //Algo Order was triggered, no more order on this bar


            }
            else if ((AlgoBuy != True OR AlgoCover != True))
            {
                StaticVarSet(static_name_+"buyCoverAlgo",0);
                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue","");
            }

            if (AlgoBuy==True AND AlgoCover != True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
            // Long Entry
                openalgo.PlaceOrder("BUY",quantity);
                if(VoiceAlert == "Enable"){
						Say("Buy Order Triggered");
					}
				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);
                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");

            }
            if (AlgoSell==true AND AlgoShort != True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
            // Long Exit
				openalgo.ExitOrder("SELL");
                if(VoiceAlert == "Enable"){
						Say("Sell Exit Order Triggered");
					}
				_TRACE("API Request : "+ex_api_request);
				_TRACE("API Response : "+ex_api_response);

                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }
            if (AlgoShort==True AND AlgoSell==True AND  StaticVarGet(static_name_+"ShortSellAlgo")==0 AND StaticVarGetText(static_name_+"ShortSellAlgo_barvalue") != lasttime)
            {
            // reverse Short Entry
				openalgo.PlaceSmartOrder("SELL",quantity,-1*quantity);
                if(VoiceAlert == "Enable"){
						Say("Short Order Triggered");
					}
				_TRACE("API Request : "+sm_api_request);
				_TRACE("API Response : "+sm_api_response);
                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortSellAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if ((AlgoShort != True OR AlgoSell != True))
            {
                StaticVarSet(static_name_+"ShortSellAlgo",0);
                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue","");
            }

            if (AlgoShort==True  AND  AlgoSell != True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND  StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
            // Short Entry
                openalgo.PlaceOrder("SELL",quantity);
                if(VoiceAlert == "Enable"){
						Say("Short Order Triggered");
					}
				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }
            if (AlgoCover==true AND AlgoBuy != True AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
            // Short Exit
				openalgo.ExitOrder("BUY");
                if(VoiceAlert == "Enable"){
						Say("Short Exit Order Triggered");
					}
				_TRACE("API Request : "+ex_api_request);
				_TRACE("API Response : "+ex_api_response);

                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if (AlgoCover != True )
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }

         else if(EnableAlgo == "LongOnly")
        {

            if (AlgoBuy==True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
            //  Long Entry
                openalgo.PlaceOrder("BUY",quantity);
                if(VoiceAlert == "Enable"){
						Say("Buy Order Triggered");
					}
				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);
                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");
            }
            if (AlgoSell==true AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
            // Long Exit
                openalgo.ExitOrder("SELL");
                if(VoiceAlert == "Enable"){
						Say("Sell Exit Order Triggered");
					}
				_TRACE("API Request : "+ex_api_request);
				_TRACE("API Response : "+ex_api_response);
                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }
        }
        else if(EnableAlgo == "ShortOnly")
        {
            if (AlgoShort==True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
            // Short Entry
                openalgo.PlaceOrder("SELL",quantity);
                if(VoiceAlert == "Enable"){
						Say("Short Order Triggered");
					}
                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }
            if (AlgoCover==true AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
            // Short Exit
                openalgo.ExitOrder("BUY");
                if(VoiceAlert == "Enable"){
						Say("Short Exit Order Triggered");
					}
				_TRACE("API Request : "+ex_api_request);
				_TRACE("API Response : "+ex_api_response);

                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if (AlgoCover != True)
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }

    }

```

[PreviousButton Trading with Stoploss](https://docs.openalgo.in/trading-platform/amibroker/button-trading-with-stoploss) [NextTrailing Stoploss Execution Module](https://docs.openalgo.in/trading-platform/amibroker/trailing-stoploss-execution-module)

Last updated 10 days ago

## Trailing Stoploss Execution
## [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/trailing-stoploss-execution-module\#internet-function-method)    Internet Function Method

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
// Rajandran R - Creator of OpenAlgo
// Website - openalgo.in / marketcalls.in
// OpenAlgo - Amibroker Trailing Stoploss Execution Module
// Date - 13/12/2024

_SECTION_BEGIN("OpenAlgo Trailing Stoploss Execution Module");

// Initial setup and parameters
RequestTimedRefresh(1, False);
EnableTextOutput(False);

// OpenAlgo Configuration Parameters
apikey = ParamStr("OpenAlgo API Key", "******");
strategy = ParamStr("Strategy", "TSL_Strategy");
symbol = ParamStr("Symbol", "YESBANK");
exchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");
product = ParamList("Product", "MIS|NRML|CNC");
quantity = Param("Quantity", 1, 1, 1000, 1);
host = ParamStr("Host", "http://127.0.0.1:5000");
ver = ParamStr("API Version", "v1");
VoiceAlert = ParamList("Voice Alert", "Disable|Enable", 1);
EnableAlgo = ParamList("Algo Mode", "Disable|Enable", 0);
TestMode = ParamList("Test Mode", "Disable|Enable", 0);

// TSL Specific Parameters
StopLevel = 1 - Param("Trailing Stop %", 3, 0.1, 10, 0.1)/100;
Order_TickSize = Param("Order Tick Size", 1, 0.01, 1, 0.01);
Entrydelay = Param("Entry Delay", 0, 0, 1, 1);
Exitdelay = Param("Exit Delay", 0, 0, 1, 1);

reset = ParamTrigger("Memory Reset","Reset Now");

// Function to round price to nearest tick size
function RoundToTickSize(price, tickSize) {
    return Floor(price/tickSize + 0.5) * tickSize;
}

// Initialize static variables
bridgeurl = host + "/api/" + ver;
static_name_ = Name() + GetChartID() + interval(2) + strategy;
static_name_algo = static_name_ + interval(2) + strategy + "algostatus";
static_name_tsl = static_name_ + "_tsl";
static_name_orderid = static_name_ + "_orderid";

if(reset)
{

StaticVarRemove(static_name_+"_tsl");
StaticVarRemove(static_name_+"_orderid");

}

// HTTP Post Request Function
function HttpPostRequest(url, postData) {
    headers = "Content-Type: application/json\r\n" +
              "Accept-Encoding: gzip, deflate\r\n";
    InternetSetHeaders(headers);
    ih = InternetPostRequest(url, postData);
    response = "";
    if(ih) {
        while((line = InternetReadString(ih)) != "")
            response += line;
        InternetClose(ih);
    }
    return response;
}

// JSON Value Extraction Function
function ExtractJsonValue(jsonStr, key, isNested) {
    result = "";
    jsonData = jsonStr;

    if(isNested) {
        dataStart = StrFind(jsonStr, "\"data\":{");
        if(dataStart > 0) dataStart = dataStart - 1;

        if(dataStart >= 0) {
            valueStart = dataStart + 7;
            valueEnd = valueStart;
            braceCount = 1;
            strLenJson = StrLen(jsonStr);

            while(valueEnd < strLenJson) {
                currChar = StrMid(jsonStr, valueEnd, 1);
                if(currChar == "{") braceCount++;
                if(currChar == "}") braceCount--;
                if(braceCount == 0) break;
                valueEnd++;
            }

            jsonData = StrMid(jsonStr, valueStart, valueEnd - valueStart);
        }
    }

    keyPos = StrFind(jsonData, "\"" + key + "\":");
    if(keyPos > 0) keyPos = keyPos - 1;

    if(keyPos > -1) {
        valueStart = keyPos + StrLen(key) + 3;
        while(StrMid(jsonData, valueStart, 1) == " ") valueStart++;

        firstValChar = StrMid(jsonData, valueStart, 1);
        isQuoted = (firstValChar == "\"");

        strLenData = StrLen(jsonData);
        valueEnd = valueStart;

        if(isQuoted) {
            valueStart++;
            valueEnd = valueStart;
            while(valueEnd < strLenData) {
                currChar = StrMid(jsonData, valueEnd, 1);
                if(currChar == "\"") break;
                valueEnd++;
            }
            result = StrMid(jsonData, valueStart, valueEnd - valueStart);
        } else {
            while(valueEnd < strLenData) {
                currChar = StrMid(jsonData, valueEnd, 1);
                if(currChar == "," OR currChar == "}") break;
                valueEnd++;
            }
            result = StrMid(jsonData, valueStart, valueEnd - valueStart);
        }
    }

    return result;
}

// Order Management Functions
function PlaceStopLossMarketOrder(action, triggerPrice) {
    postData = "{\"apikey\": \"" + apikey + "\", " +
               "\"strategy\": \"" + strategy + "\", " +
               "\"symbol\": \"" + symbol + "\", " +
               "\"action\": \"" + action + "\", " +
               "\"exchange\": \"" + exchange + "\", " +
               "\"pricetype\": \"SL-M\", " +
               "\"price\": \"0\", " +  // Price is 0 for SL-M orders
               "\"trigger_price\": \"" + triggerPrice + "\", " +
               "\"product\": \"" + product + "\", " +
               "\"quantity\": \"" + quantity + "\"}";
    _TRACE("SL-M Order Request: " + postData);
    response = HttpPostRequest(bridgeurl + "/placeorder", postData);
    _TRACE("SL-M Order Response: " + response);
    return response;
}

function CheckOrderStatus(orderid) {
    postData = "{\"apikey\": \"" + apikey + "\", " +
               "\"strategy\": \"" + strategy + "\", " +
               "\"orderid\": \"" + orderid + "\"}";
    response = HttpPostRequest(bridgeurl + "/orderstatus", postData);
    _TRACE("Order Status Check for OrderID " + orderid + " Response: " + response);
    return response;
}

function ModifyStopLossMarketOrder(orderid, triggerPrice) {
    postData = "{\"apikey\": \"" + apikey + "\", " +
               "\"strategy\": \"" + strategy + "\", " +
               "\"symbol\": \"" + symbol + "\", " +
               "\"action\": \"SELL\", " +  // Added action field
               "\"exchange\": \"" + exchange + "\", " +
               "\"orderid\": \"" + orderid + "\", " +
               "\"product\": \"" + product + "\", " +
               "\"pricetype\": \"SL-M\", " +
               "\"price\": \"0\", " +  // Price is 0 for SL-M orders
               "\"trigger_price\": \"" + triggerPrice + "\", " +
               "\"quantity\": \"" + quantity + "\", " +
               "\"disclosed_quantity\": \"0\"}";  // Added disclosed_quantity field
    _TRACE("Modify SL-M Order Request for OrderID " + orderid + ": " + postData);
    response = HttpPostRequest(bridgeurl + "/modifyorder", postData);
    _TRACE("Modify SL-M Order Response: " + response);
    return response;
}

function PlaceMarketEntry(action) {
    postData = "{\"apikey\": \"" + apikey + "\", " +
               "\"strategy\": \"" + strategy + "\", " +
               "\"symbol\": \"" + symbol + "\", " +
               "\"action\": \"" + action + "\", " +
               "\"exchange\": \"" + exchange + "\", " +
               "\"pricetype\": \"MARKET\", " +
               "\"product\": \"" + product + "\", " +
               "\"quantity\": \"" + quantity + "\"}";

    _TRACE("Market Entry Order Request: " + postData);
    response = HttpPostRequest(bridgeurl + "/placeorder", postData);
    _TRACE("Market Entry Order Response: " + response);
    return response;
}

// Trading signals
Buy = Cross(MACD(), Signal());
Sell = 0;
trailARRAY = Null;
trailstop = 0;

// Calculate Trailing Stop Level
for(i = 1; i < BarCount; i++) {
    if(trailstop == 0 AND Buy[i]) {
        trailstop = High[i] * StopLevel;
        //_TRACE("New TSL Level calculated: " + trailstop);
    }
    else Buy[i] = 0;

    if(trailstop > 0 AND Low[i] < trailstop) {
        Sell[i] = 1;
        SellPrice[i] = trailstop;
        //_TRACE("TSL Hit - Sell Signal Generated at: " + trailstop);
        trailstop = 0;
    }

    if(trailstop > 0) {
        newTSL = Max(High[i] * StopLevel, trailstop);
        if(newTSL != trailstop) {
            //_TRACE("TSL Level Updated from " + trailstop + " to " + newTSL);
            trailstop = newTSL;
        }
        trailARRAY[i] = trailstop;
    }
}

// Execution Logic
AlgoBuy = LastValue(Ref(Buy, -Entrydelay));
AlgoSell = LastValue(Ref(Sell, -Exitdelay));
currentTSL = RoundToTickSize(LastValue(trailARRAY), Order_TickSize);
//_TRACE("Raw TSL: " + LastValue(trailARRAY) + ", Rounded to tick size: " + currentTSL);

if(EnableAlgo == "Enable") {
    // Print current stored OrderID
    printf("\nAlgo Mode Enabled");
    storedOrderId = StaticVarGetText(static_name_orderid);
    printf("\nCurrent Stored OrderID: " + storedOrderId);
    printf("\nCurrent TSL: " + currentTSL);

    // Entry Logic
    if(AlgoBuy AND Nz(StaticVarGet(static_name_ + "entryAlgo")) == 0) {
        _TRACE("Buy Signal Detected - Executing Market Entry");
        entryResponse = PlaceMarketEntry("BUY");

        if(entryResponse != "") {
            _TRACE("Entry Order Executed Successfully");
            if(currentTSL > 0) {
                _TRACE("Placing Initial TSL SL-M Order at trigger: " + currentTSL);
                tslResponse = PlaceStopLossMarketOrder("SELL", currentTSL);

                if(tslResponse != "") {
                    orderid = ExtractJsonValue(tslResponse, "orderid", False);
                    if(orderid != "") {
                        StaticVarSetText(static_name_orderid, orderid);
                        StaticVarSet(static_name_tsl, currentTSL);
                        _TRACE("New TSL OrderID Stored: " + orderid);
                        if(VoiceAlert == "Enable") Say("Entry and TSL Orders Placed");
                    }
                }
            }
            StaticVarSet(static_name_ + "entryAlgo", 1);
        }
    }

    // TSL Modification Logic
    if(currentTSL > 0 AND currentTSL != StaticVarGet(static_name_tsl)) {
        orderid = StaticVarGetText(static_name_orderid);
        _TRACE("Checking TSL Order: " + orderid);

        if(orderid != "") {
            statusResponse = CheckOrderStatus(orderid);
            if(statusResponse != "") {
                orderStatus = ExtractJsonValue(statusResponse, "order_status", True);
                _TRACE("Current TSL Order Status: " + orderStatus);

                if(orderStatus == "open") {
                    _TRACE("Modifying SL-M Order " + orderid + " trigger from " + StaticVarGet(static_name_tsl) + " to " + currentTSL);
                    modifyResponse = ModifyStopLossMarketOrder(orderid, currentTSL);
                    if(modifyResponse != "") {
                        StaticVarSet(static_name_tsl, currentTSL);
                        _TRACE("TSL Order Modified Successfully");
                    }
                }
            }
        }
    }

    // Exit Logic
    if(AlgoSell AND Nz(StaticVarGet(static_name_ + "exitAlgo")) == 0) {
        orderid = StaticVarGetText(static_name_orderid);
        _TRACE("TSL Hit - Checking Order: " + orderid);

        if(orderid != "") {
            statusResponse = CheckOrderStatus(orderid);
            if(statusResponse != "") {
                orderStatus = ExtractJsonValue(statusResponse, "order_status", True);
                _TRACE("TSL Hit - Order Status: " + orderStatus);

                if(orderStatus == "complete") {
                    _TRACE("TSL Order " + orderid + " Executed Successfully");
                    if(VoiceAlert == "Enable") Say("Trailing Stop Loss Hit");
                    StaticVarSet(static_name_ + "exitAlgo", 1);
                    // Clear the stored OrderID
                    StaticVarSetText(static_name_orderid, "");
                }
            }
        }
    }
}

Plot(trailARRAY, "Trailing Stop Level", colorRed);

_SECTION_END();

_SECTION_BEGIN("Trading Signals");

//Plot the trading signals

/* Plot Buy and Sell Signal Arrows */
PlotShapes(IIf(Buy, shapeSquare, shapeNone),colorGreen, 0, L, Offset=-40);
PlotShapes(IIf(Buy, shapeSquare, shapeNone),colorLime, 0,L, Offset=-50);
PlotShapes(IIf(Buy, shapeUpArrow, shapeNone),colorWhite, 0,L, Offset=-45);
PlotShapes(IIf(Sell, shapeSquare, shapeNone),colorRed, 0, H, Offset=40);
PlotShapes(IIf(Sell, shapeSquare, shapeNone),colorOrange, 0,H, Offset=50);
PlotShapes(IIf(Sell, shapeDownArrow, shapeNone),colorWhite, 0,H, Offset=-45);

_SECTION_END();

_SECTION_BEGIN("Candlestick Charts with Date & Time Axis");

//Enable the Date & Time Axis
SetChartOptions(0, chartShowArrows | chartShowDates);

//Plotting Candlestick charts
Plot(Close,"Candle",colorDefault,styleCandle);

_SECTION_END();
```

[PreviousSmartOrder Chart Module](https://docs.openalgo.in/trading-platform/amibroker/smartorder-chart-module) [NextLine Trading Module](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module)

Last updated 1 month ago

## Line Trading Automation
The line Trading Automation tool is designed for Manual traders who want to perform level-based trade execution faster and also bring some advanced trade management in their trades (multiple entries, targets, stops, pyramiding, martingale, etc)

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FWOCUTuqgufDO7aE3rJIm%252Fimage.png%3Falt%3Dmedia%26token%3D80039c8b-9a61-4330-815e-76af5e6cac37&width=768&dpr=4&quality=100&sign=b7a73c5b&sv=2)

Line Trade Automation v1.0

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module\#what-is-line-trading-automation-1.0)    **What is Line Trading Automation 1.0?**

•Draw Horizontal Lines or Trend Lines in Amibroker When the levels are touched then the Line Trade Automation Module will convert into signals and orders will be transmitted to the broker automatically.

•Module **Supports Multiple Entry, Targets, Stoploss levels** can be drawn and converted into orders, Supports pyramiding.

•Module **prevents placing multiple orders** at the same signal

•Supports **Intraday and Positional Trades**

•Supports **3 Long Entry, 3 Long Exit(Target/Stoploss), 3 Short Entries**, and **3 Short Exit (Target/Stoploss)** Line based trading.

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
//Module - Line Pair Tading Automation Module
//Rajandran R - Creator of OpenAlgo
//website - openalgo.in / marketcalls.in
//OpenAlgo - Amibroker SmartOrder Chart Trading Module v1.0
//Date - 29/05/2024

_SECTION_BEGIN("OpenAlgo Trading Controls");

RequestTimedRefresh(1,False);

apikey = ParamStr("OpenAlgo API Key", "******");
strategy = ParamStr("Strategy", "Amibroker");
symbol = ParamStr("Symbol", "YESBANK");
exchange = ParamList("Exchange", "NSE|NFO|BSE|MCX|CDS");
pricetype = ParamStr("Price Type", "MARKET");
product = ParamList("Product", "MIS|NRML|CNC");
quantity = Param("Quantity", 1,1,1000,1);

Entrydelay = Param("Entry Delay",0,0,1,1);
Exitdelay = Param("Exit Delay",0,0,1,1);

host = ParamStr("host","http://127.0.0.1:5000");
ver = ParamStr("API Version","v1");

VoiceAlert = ParamList("Voice Alert","Disable|Enable",1);
EnableAlgo = ParamList("Algo Mode","Disable|Enable",0); // Algo Mode

bridgeurl = host+"/api/"+ver;
resp = "";

//Static Variables for Order protection

static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";
//Mapping of Orders

iBuy = "BUY";
iSell = "SELL";

GfxSelectFont( "BOOK ANTIQUA", 14, 100 );
GfxSetBkMode( 1 );
if(EnableAlgo == "Enable")
{
AlgoStatus = "Algo Enabled";
GfxSetTextColor( colorGreen );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=1)
{
_TRACE("Algo Status : Enabled");
StaticVarSet(static_name_algo, 1);
}
}
if(EnableAlgo == "Disable")
{
AlgoStatus = "Algo Disabled";
GfxSetTextColor( colorRed );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=0)
{
_TRACE("Algo Status : Disabled");
StaticVarSet(static_name_algo, 0);
}
}

_SECTION_BEGIN("OpenAlgo Bridge Controls");

EnableScript("VBScript");
<%
Public Sub PlaceOrder(action, quantity)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placeorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " api_url :" & url


    AFL("api_request") = api_parameters
    AFL("api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub PlaceSmartOrder(action, quantity,position_size)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")



    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & _
    """,""position_size"":""" & position_size & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placesmartorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " Position Size :" & position_size & " api_url :" & url


    AFL("sm_api_request") = api_parameters
    AFL("sm_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub ExitOrder(action)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")
    position_size = "0"
    quantity = "0"


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & _
    """,""position_size"":""" & position_size & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placesmartorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " Position Size :" & position_size & " api_url :" & url


    AFL("ex_api_request") = api_parameters
    AFL("ex_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub SquareoffAll()
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/closeposition"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " api_url :" & url


    AFL("sq_api_request") = api_parameters
    AFL("sq_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

%>

openalgo = GetScriptObject();

_SECTION_END();

_SECTION_BEGIN("Line Pair Trading Module");

SetBarsRequired(-2,-2); //turning off quick afl
SetChartOptions(0,chartShowArrows|chartShowDates);
_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 ) ) ));
Plot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() );
_SECTION_END();

//Static Variables will be saved in Amibroker every 60 seconds once
SetOption("StaticVarAutoSave",60);

// Send orders even if Amibroker is minimized or Chart is not active
RequestTimedRefresh(0.1, False);
EnableTextOutput(False);

IntradayMode = ParamList("Intraday Mode","ON|OFF",0);
StartTradeTime = ParamTime("Start Time","09:30");
EndTradeTime = ParamTime("End Time","15:00");
ExitTradeTime = ParamTime("Squareoff Time","15:15");

BuyMode=ParamToggle("Buy Mode","BUY ABOVE|BUY BELOW",0);
SellMode=ParamToggle("Sell Mode","SELL ABOVE|SELL BELOW",0);
ShortMode=ParamToggle("Short Mode","SHORT ABOVE|SHORT BELOW",1);
CoverMode=ParamToggle("Cover Mode","COVER ABOVE|COVER BELOW",1);

ExitPos = ParamList("Exit Positions","CURRENT|ALLOPENPOSITIONS");

buyquantity1 = Param("Buy Quantity1",1,0,10000,1);
buyquantity2 = Param("Buy Quantity2",1,0,10000,1);
buyquantity3 = Param("Buy Quantity3",1,0,10000,1);
shortquantity1 = Param("Short Quantity1",1,0,10000,1);
shortquantity2 = Param("Short Quantity2",1,0,10000,1);
shortquantity3 = Param("Short Quantity3",1,0,10000,1);

clear = ParamTrigger("Reset Trades and Signals","Press to Reset");
staticvar = Name()+Interval()+GetChartID();
if(clear)
{

StaticVarRemove(staticvar+"*");
_TRACE("Static Variables Cleared");
}

Plot( C, "Price", colorBlack, styleCandle );

if(BuyMode==0) 	Buydisplaytext = "Buy Above";
if(BuyMode==1)  Buydisplaytext = "Buy Below";
if(SellMode==0) Selldisplaytext = "Sell Above";
if(SellMode==1) Selldisplaytext = "Sell Below";

if(ShortMode==0) Shortdisplaytext = "Short Above";
if(ShortMode==1) Shortdisplaytext = "Short Below";
if(CoverMode==0) Coverdisplaytext = "Cover Above";
if(CoverMode==1) Coverdisplaytext = "Cover Below";

B1 = LastValue(Study("B1", GetChartID() ));
B2 = LastValue(Study("B2", GetChartID() ));
B3 = LastValue(Study("B3", GetChartID() ));
X1 = LastValue(Study("X1", GetChartID() ));
X2 = LastValue(Study("X2", GetChartID() ));
X3 = LastValue(Study("X3", GetChartID() ));

S1 = LastValue(Study("S1", GetChartID() ));
S2 = LastValue(Study("S2", GetChartID() ));
S3 = LastValue(Study("S3", GetChartID() ));
C1 = LastValue(Study("C1", GetChartID() ));
C2 = LastValue(Study("C2", GetChartID() ));
C3 = LastValue(Study("C3", GetChartID() ));

function lineplot(value,text,quantity,displaytext)
{



textcolor = IIf(text=="B1" OR text=="B2" OR text=="B3", colorGreen,
				IIf(text=="X1" OR text=="X2" OR text=="X3", colorRed,
					IIf(text=="S1" OR text=="S2" OR text=="S3", colorBrown,
						IIf(text=="C1" OR text=="C2" OR text=="C3", colorBlue,colorGrey40))));

x = LastValue( ValueWhen( ExRem( value, 0 ), DateTime() ) );
if( x!= 0 AND (text=="B1" OR text=="B2" OR text=="B3"))
  PlotText(text+"    "+Displaytext+" : "+value+"    Qty ="+quantity,BarCount-40,value,colorWhite,textcolor,10);

if( x!= 0  AND (text=="S1" OR text=="S2" OR text=="S3"))
  PlotText(text+"    "+Displaytext+" : "+value+"    Qty ="+quantity,BarCount-40,value,colorWhite,textcolor,10);

if( x!= 0 AND ExitPos=="CURRENT" AND (text=="X1" OR text=="X2" OR text=="X3"))
  PlotText(text+"    "+Displaytext+" : "+value+"    Qty ="+quantity,BarCount-40,value,colorWhite,textcolor,10);

if( x!= 0 AND ExitPos=="CURRENT" AND (text=="C1" OR text=="C2" OR text=="C3"))
  PlotText(text+"    "+Displaytext+" : "+value+"    Qty ="+quantity,BarCount-40,value,colorWhite,textcolor,10);

if( x!= 0 AND ExitPos=="ALLOPENPOSITIONS" AND (text=="X1" OR text=="X2" OR text=="X3"))
  PlotText(text+"    "+Displaytext+" : "+value+"    Qty = All",BarCount-40,value,colorWhite,textcolor,10);

if( x!= 0 AND ExitPos=="ALLOPENPOSITIONS" AND (text=="C1" OR text=="C2" OR text=="C3"))
  PlotText(text+"    "+Displaytext+" : "+value+"   Qty = All",BarCount-40,value,colorWhite,textcolor,10);

}

lineplot(B1,"B1",buyquantity1,Buydisplaytext);
lineplot(B2,"B2",buyquantity2,Buydisplaytext);
lineplot(B3,"B3",buyquantity3,Buydisplaytext);
lineplot(X1,"X1",buyquantity1,Selldisplaytext);
lineplot(X2,"X2",buyquantity2,Selldisplaytext);
lineplot(X3,"X3",buyquantity3,Selldisplaytext);
lineplot(S1,"S1",shortquantity1,Shortdisplaytext);
lineplot(S2,"S2",shortquantity2,Shortdisplaytext);
lineplot(S3,"S3",shortquantity3,Shortdisplaytext);
lineplot(C1,"C1",shortquantity1,Coverdisplaytext);
lineplot(C2,"C2",shortquantity2,Coverdisplaytext);
lineplot(C3,"C3",shortquantity3,Coverdisplaytext);

if(EnableAlgo != "Disable")
{
    lasttime = StrFormat("%0.f",LastValue(BarIndex()));
    SetChartBkColor(colorDarkGrey);

if(IntradayMode=="ON" AND LastValue(TimeNum())== ExitTradeTime AND Nz(StaticVarGet(staticvar+"SquareOff"))==0)
{

openalgo.ExitOrder("SELL");

StaticVarSet(staticvar+"SquareOffIndex",LastValue(BarIndex()));
StaticVarSet(staticvar+"SquareOff",1);
_TRACE("Squareoff Alert Triggered");
}

if(BuyMode==0 AND LastValue(Cross(H,B1)) AND Nz(StaticVarGet(staticvar+"B1"))==0)
{

if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

openalgo.placeorder("BUY",buyquantity1);
StaticVarSet(staticvar+"B1index",LastValue(BarIndex()));
StaticVarSet(staticvar+"B1",1);
_TRACE("Buy Above B1 Triggered");
}
}

if(BuyMode==1 AND LastValue(Cross(B1,L)) AND Nz(StaticVarGet(staticvar+"B1"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("BUY",buyquantity1);
StaticVarSet(staticvar+"B1index",LastValue(BarIndex()));
StaticVarSet(staticvar+"B1",1);
_TRACE("Buy Below B1 Triggered");
}
}

if(BuyMode==0 AND LastValue(Cross(H,B2)) AND Nz(StaticVarGet(staticvar+"B2"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("BUY",buyquantity2);
StaticVarSet(staticvar+"B2index",LastValue(BarIndex()));
StaticVarSet(staticvar+"B2",1);
_TRACE("Buy Above B2 Triggered");
}
}

if(BuyMode==1 AND LastValue(Cross(B2,L)) AND Nz(StaticVarGet(staticvar+"B2"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("BUY",buyquantity2);
StaticVarSet(staticvar+"B2index",LastValue(BarIndex()));
StaticVarSet(staticvar+"B2",1);
_TRACE("Buy Below B2 Triggered");
}
}

if(BuyMode==0 AND LastValue(Cross(H,B3)) AND Nz(StaticVarGet(staticvar+"B3"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("BUY",buyquantity3);
StaticVarSet(staticvar+"B3index",LastValue(BarIndex()));
StaticVarSet(staticvar+"B3",1);
_TRACE("Buy Above B3 Triggered");
}
}

if(BuyMode==1 AND LastValue(Cross(B3,L)) AND Nz(StaticVarGet(staticvar+"B3"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("BUY",buyquantity3);
StaticVarSet(staticvar+"B3index",LastValue(BarIndex()));
StaticVarSet(staticvar+"B3",1);
_TRACE("Buy Below B3 Triggered");
}
}

if(SellMode==0 AND LastValue(Cross(H,X1)) AND Nz(StaticVarGet(staticvar+"X1"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.placeorder("SELL",buyquantity1);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("SELL");
}

StaticVarSet(staticvar+"X1index",LastValue(BarIndex()));
StaticVarSet(staticvar+"X1",1);
_TRACE("Sell Above X1 Triggered");
}
}

if(SellMode==1 AND LastValue(Cross(X1,L)) AND Nz(StaticVarGet(staticvar+"X1"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.placeorder("SELL",buyquantity1);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("SELL");
}

StaticVarSet(staticvar+"X1index",LastValue(BarIndex()));
StaticVarSet(staticvar+"X1",1);
_TRACE("Sell Below X1 Triggered");
}
}
if(SellMode==0 AND LastValue(Cross(H,X2)) AND Nz(StaticVarGet(staticvar+"X2"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.placeorder("SELL",buyquantity2);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("SELL");
}

StaticVarSet(staticvar+"X2index",LastValue(BarIndex()));
StaticVarSet(staticvar+"X2",1);
_TRACE("Sell Above X2 Triggered");
}
}
if(SellMode==1 AND LastValue(Cross(X2,L)) AND Nz(StaticVarGet(staticvar+"X2"))==0)
{
if((IntradayMode=="ON" AND TimeNum()== ExitTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.placeorder("SELL",buyquantity2);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("SELL");
}

StaticVarSet(staticvar+"X2index",LastValue(BarIndex()));
StaticVarSet(staticvar+"X2",1);
_TRACE("Sell Below X2 Triggered");
}
}
if(SellMode==0 AND LastValue(Cross(H,X3)) AND Nz(StaticVarGet(staticvar+"X3"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.placeorder("SELL",buyquantity3);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("SELL");
}

StaticVarSet(staticvar+"X3index",LastValue(BarIndex()));
StaticVarSet(staticvar+"X3",1);
_TRACE("Sell Above X3 Triggered");
}
}
if(SellMode==1 AND LastValue(Cross(X3,L)) AND Nz(StaticVarGet(staticvar+"X3"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.placeorder("SELL",buyquantity3);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("SELL");
}

StaticVarSet(staticvar+"X3index",LastValue(BarIndex()));
StaticVarSet(staticvar+"X3",1);
_TRACE("Sell Below X3 Triggered");
}
}

if(ShortMode==0 AND LastValue(Cross(H,S1)) AND Nz(StaticVarGet(staticvar+"S1"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("SELL",shortquantity1);
StaticVarSet(staticvar+"S1index",LastValue(BarIndex()));
StaticVarSet(staticvar+"S1",1);
_TRACE("Short Above S1 Triggered");
}
}

if(ShortMode==1 AND LastValue(Cross(S1,L)) AND Nz(StaticVarGet(staticvar+"S1"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("SELL",shortquantity1);
StaticVarSet(staticvar+"S1index",LastValue(BarIndex()));
StaticVarSet(staticvar+"S1",1);
_TRACE("Short Below S1 Triggered");
}
}

if(ShortMode==0 AND LastValue(Cross(H,S2)) AND Nz(StaticVarGet(staticvar+"S2"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("SELL",shortquantity2);
StaticVarSet(staticvar+"S2index",LastValue(BarIndex()));
StaticVarSet(staticvar+"S2",1);
_TRACE("Short Above S2 Triggered");
}
}

if(ShortMode==1 AND LastValue(Cross(S2,L)) AND Nz(StaticVarGet(staticvar+"S2"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("SELL",shortquantity2);
StaticVarSet(staticvar+"S2index",LastValue(BarIndex()));
StaticVarSet(staticvar+"S2",1);
_TRACE("Short Below S2 Triggered");
}
}

if(ShortMode==0 AND LastValue(Cross(H,S3)) AND Nz(StaticVarGet(staticvar+"S3"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("SELL",shortquantity3);
StaticVarSet(staticvar+"S3index",LastValue(BarIndex()));
StaticVarSet(staticvar+"S3",1);
_TRACE("Short Above S3 Triggered");
}
}

if(ShortMode==1 AND LastValue(Cross(S3,L)) AND Nz(StaticVarGet(staticvar+"S3"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{
openalgo.placeorder("SELL",shortquantity3);
StaticVarSet(staticvar+"S3index",LastValue(BarIndex()));
StaticVarSet(staticvar+"S3",1);
_TRACE("Short Below S3 Triggered");
}
}

if(CoverMode==0 AND LastValue(Cross(H,C1)) AND Nz(StaticVarGet(staticvar+"C1"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.PlaceOrder("BUY",shortquantity1);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("BUY");
}

StaticVarSet(staticvar+"C1index",LastValue(BarIndex()));
StaticVarSet(staticvar+"C1",1);
_TRACE("Cover Above C1 Triggered");
}
}

if(CoverMode==1 AND LastValue(Cross(C1,L)) AND Nz(StaticVarGet(staticvar+"C1"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.PlaceOrder("BUY",shortquantity1);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("BUY");
}

StaticVarSet(staticvar+"C1index",LastValue(BarIndex()));
StaticVarSet(staticvar+"C1",1);
_TRACE("Cover Below C1 Triggered");
}
}

if(CoverMode==0 AND LastValue(Cross(H,C2)) AND Nz(StaticVarGet(staticvar+"C2"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.PlaceOrder("BUY",shortquantity2);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("BUY");
}

StaticVarSet(staticvar+"C2index",LastValue(BarIndex()));
StaticVarSet(staticvar+"C2",1);
_TRACE("Cover Above C2 Triggered");
}
}
if(CoverMode==1 AND LastValue(Cross(C2,L)) AND Nz(StaticVarGet(staticvar+"C2"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.PlaceOrder("BUY",shortquantity2);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("BUY");
}

StaticVarSet(staticvar+"C2index",LastValue(BarIndex()));
StaticVarSet(staticvar+"C2",1);
_TRACE("Cover Below C2 Triggered");
}
}

if(CoverMode==0 AND LastValue(Cross(H,C3)) AND Nz(StaticVarGet(staticvar+"C3"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.PlaceOrder("BUY",shortquantity3);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("BUY");
}

StaticVarSet(staticvar+"C3index",LastValue(BarIndex()));
StaticVarSet(staticvar+"C3",1);
_TRACE("Cover Above C3 Triggered");
}
}

if(CoverMode==1 AND LastValue(Cross(C3,L)) AND Nz(StaticVarGet(staticvar+"C3"))==0)
{
if((IntradayMode=="ON" AND LastValue(TimeNum())>= StartTradeTime AND LastValue(TimeNum()) <= EndTradeTime) OR IntradayMode=="OFF")
{

if(ExitPos=="CURRENT")
{
//If positive open positions are there only then exit the Current Order Quantity
openalgo.PlaceOrder("BUY",shortquantity3);
}
if(ExitPos=="ALLOPENPOSITIONS")
{
//If positive open positions are there only then exit the All Open Positions
openalgo.ExitOrder("BUY");
}

StaticVarSet(staticvar+"C3index",LastValue(BarIndex()));
StaticVarSet(staticvar+"C3",1);
_TRACE("Cover Below C3 Triggered");
}
}

//Plot Signals and Arrows
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B1index"), shapeSquare, shapeNone),colorGreen, 0, L, Offset=-40);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B1index"), shapeSquare, shapeNone),colorLime, 0,L, Offset=-50);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B1index"), shapeUpArrow, shapeNone),colorWhite, 0,L, Offset=-45);

PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B2index"), shapeSquare, shapeNone),colorGreen, 0, L, Offset=-40);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B2index"), shapeSquare, shapeNone),colorLime, 0,L, Offset=-50);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B2index"), shapeUpArrow, shapeNone),colorWhite, 0,L, Offset=-45);

PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B3index"), shapeSquare, shapeNone),colorGreen, 0, L, Offset=-40);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B3index"), shapeSquare, shapeNone),colorLime, 0,L, Offset=-50);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"B3index"), shapeUpArrow, shapeNone),colorWhite, 0,L, Offset=-45);

PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S1index"), shapeSquare, shapeNone),colorRed, 0, H, Offset=40);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S1index"), shapeSquare, shapeNone),colorOrange, 0,H, Offset=50);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S1index"), shapeDownArrow, shapeNone),colorWhite, 0,H, Offset=-45);

PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S2index"), shapeSquare, shapeNone),colorRed, 0, H, Offset=40);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S2index"), shapeSquare, shapeNone),colorOrange, 0,H, Offset=50);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S2index"), shapeDownArrow, shapeNone),colorWhite, 0,H, Offset=-45);

PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S3index"), shapeSquare, shapeNone),colorRed, 0, H, Offset=40);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S3index"), shapeSquare, shapeNone),colorOrange, 0,H, Offset=50);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"S3index"), shapeDownArrow, shapeNone),colorWhite, 0,H, Offset=-45);

PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"X1index"),  shapeStar,shapeNone), colorBrightGreen, 0, High, 12);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"X2index"),  shapeStar,shapeNone), colorBrightGreen, 0, High, 12);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"X3index"),  shapeStar,shapeNone), colorBrightGreen, 0, High, 12);

PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"C1index"),  shapeStar,shapeNone), colorRed, 0, Low, -12);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"C2index"),  shapeStar,shapeNone), colorRed, 0, Low, -12);
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"C3index"),  shapeStar,shapeNone), colorRed, 0, Low, -12);

if(IntradayMode=="ON")
{
PlotShapes(IIf(BarIndex()==StaticVarGet(staticvar+"SquareOffIndex"),  shapeStar,shapeNone), colorYellow, 0, Low, -12);
}

}

_SECTION_END();
```

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module\#smart-order-exits)    **Smart Order Exits**

• **Smart Orders** are enabled while exiting the position.

•If there are no open positions and if exit orders are triggered then those orders are **smartly ignored**.

•Provision to close only **Current Quantity** and **All Open Positions** is provided so that traders can flexibly use their own exit methods

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module\#requirements)    **Requirements**

●OpenAlgo Downloaded and Configured

●OpenAlgo Supported Broker

●Amibroker 6.0 or Higher

●Realtime Datafeed Subscription

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module\#type-of-entry-and-exits-amibroker-terms)    **Type of Entry and Exits (Amibroker Terms)**

where the characters ‘B’. ‘X’, ‘S’, ‘C’ are used along with horizontal or trendline study names.

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FbeoThr4tjuPBzQ9xkH6A%252Fimage.png%3Falt%3Dmedia%26token%3D4fd3370f-6f5e-4a23-94fe-f8aecebdda61&width=768&dpr=4&quality=100&sign=3c6e5edc&sv=2)

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module\#type-of-trendline-signals)    Type of Trendline Signals

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FBoCbLdkJ9SwJY9htECe5%252Fimage.png%3Falt%3Dmedia%26token%3Dcae7782f-1525-4bbf-be9f-a1cb47994f2b&width=768&dpr=4&quality=100&sign=606f15bc&sv=2)

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module\#type-of-entry-and-exit-trendlines)    Type of Entry and Exit Trendlines

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252FV8b7fssK3QrZxVU7BWA0%252Fimage.png%3Falt%3Dmedia%26token%3Dd8db84f3-06f1-404f-80fd-ff1ed8b9d57c&width=768&dpr=4&quality=100&sign=f6494cc0&sv=2)

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module\#drawing-trend-line-and-assigning-study-name)    Drawing Trend Line and Assigning Study Name

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252F9LPUU3J0b5mA8MElIGWb%252Fimage.png%3Falt%3Dmedia%26token%3D8d69fc74-110d-44da-8684-8b3b8d2d492d&width=768&dpr=4&quality=100&sign=c4e46514&sv=2)

Drawing trendlines and Assigning study ID

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module\#pyramiding-and-pyramiding-settings-with-targets)    Pyramiding and Pyramiding Settings with Targets

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fs2CD8xRPaldLd2N4TH1D%252Fimage.png%3Falt%3Dmedia%26token%3D113b0d19-e4a1-44ac-9c91-63a07c4a914c&width=768&dpr=4&quality=100&sign=9bf8cbf0&sv=2)

Using Line Automation for Pyramiding

### [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module\#creating-multiple-entries-and-multiple-stops-using-line-automation-module)    Creating Multiple Entries and Multiple Stops using Line Automation Module

![](https://docs.openalgo.in/~gitbook/image?url=https%3A%2F%2F17901342-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FmBwEhITzgv0O0fEGIIRN%252Fuploads%252Fh56pGaJmFQ7caMyPADGR%252Fimage.png%3Falt%3Dmedia%26token%3Dd52c93d7-5638-404f-9d31-7acd1fd70777&width=768&dpr=4&quality=100&sign=e47d750&sv=2)

Using Line Automation with Multiple Long Entry and Long Exit Signals

[PreviousTrailing Stoploss Execution Module](https://docs.openalgo.in/trading-platform/amibroker/trailing-stoploss-execution-module) [NextEquity Exploration Module](https://docs.openalgo.in/trading-platform/amibroker/equity-exploration-module)

Last updated 7 months ago

## AmiBroker Equity Exploration
## [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/equity-exploration-module\#internet-functions-module-modern-method)    Internet Functions Module (Modern Method)

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
//OpenAlgo - Intraday Cash Exploration Module
//Avoid using the code for running positional strategies
//If in case one have run for cash to cash intraday then ensure that symbol
//string manipulation is done according to the data vendor symbol format to match the
//brokers equity market symbols.

//Modernized code using AmiBroker's Internet functions

//////////////////////////////////////////////
//Amibroker Equity Exploration Module
//Coded by Rajandran R - Creator, OpenAlgo
//Date : 17/12/2024
//////////////////////////////////////////////

_SECTION_BEGIN("Exploration Module Order Controls");

strategy = ParamStr("Strategy Name", "Exploration Strategy");
apikey = ParamStr("OpenAlgo API Key", "******");
exchange = ParamList("Exchange","NSE|BSE",0);
pricetype = ParamStr("Price Type", "MARKET");
product = ParamList("Product", "MIS|CNC",0);
host = ParamStr("host","http://127.0.0.1:5000");
ver = ParamStr("API Version","v1");

bridgeurl = host+"/api/"+ver;

// Mapping of Equity Symbol
symbol = Name(); // Adjust symbol mapping as per data vendor if needed
// Example:
// symbol = StrReplace(Name(),".NSE","")+"-EQ";    // For Globaldatafeeds

Position = Param("Position Size (Rupee Terms)",1000,1,10000000,1);

EntryDelay = Param("Entry Delay",0,0,1,1);
ExitDelay = Param("Exit Delay",0,0,1,1);
EnableAlgo = ParamList("OpenAlgo","Disable|Enable|LongOnly|ShortOnly");

//Configure Trade Execution Delay (for recent signals)
AlgoBuy = LastValue(Ref(Buy,-EntryDelay));
AlgoSell = LastValue(Ref(Sell,-ExitDelay));
AlgoShort = LastValue(Ref(Short,-EntryDelay));
AlgoCover = LastValue(Ref(Cover,-ExitDelay));

//multiple order supression purpose we need static variables
static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";

//Algo Dashboard
GfxSelectFont( "BOOK ANTIQUA", 14, 100 );
GfxSetBkMode( 1 );
if(EnableAlgo == "Enable")
{
    AlgoStatus = "Algo Enabled";
    GfxSetTextColor( colorGreen );
    GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
    if(Nz(StaticVarGet(static_name_algo),0)!=1)
    {
        _TRACE("Algo Status : Enabled");
        StaticVarSet(static_name_algo, 1);
    }
}
if(EnableAlgo == "Disable")
{
    AlgoStatus = "Algo Disabled";
    GfxSetTextColor( colorRed );
    GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
    if(Nz(StaticVarGet(static_name_algo),0)!=0)
    {
        _TRACE("Algo Status : Disabled");
        StaticVarSet(static_name_algo, 0);
    }
}
if(EnableAlgo == "LongOnly")
{
    AlgoStatus = "Long Only";
    GfxSetTextColor( colorYellow );
    GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
    if(Nz(StaticVarGet(static_name_algo),0)!=2)
    {
        _TRACE("Algo Status : Long Only");
        StaticVarSet(static_name_algo, 2);
    }
}
if(EnableAlgo == "ShortOnly")
{
    AlgoStatus = "Short Only";
    GfxSetTextColor( colorOrange );
    GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
    if(Nz(StaticVarGet(static_name_algo),0)!=3)
    {
        _TRACE("Algo Status : Short Only");
        StaticVarSet(static_name_algo, 3);
    }
}

// Function to Place Order using Internet Functions
function PlaceOrder(action, quantity)
{
    // Construct JSON body
    postData = "{"+
       "\"apikey\":\"" + apikey + "\"," +
       "\"strategy\":\"" + strategy + "\"," +
       "\"symbol\":\"" + symbol + "\"," +
       "\"action\":\"" + action + "\"," +
       "\"exchange\":\"" + exchange + "\"," +
       "\"pricetype\":\"" + pricetype + "\"," +
       "\"product\":\"" + product + "\"," +
       "\"quantity\":\"" + quantity + "\"}";

    headers = "Content-Type: application/json\r\n" +
              "Cache-Control: no-cache\r\n" +
              "Pragma: no-cache\r\n";

    InternetSetHeaders(headers);
    _TRACE("API Request (POST /placeorder): " + postData);

    ih = InternetPostRequest(bridgeurl + "/placeorder", postData);
    if(ih)
    {
        response = "";
        line = "";
        while((line = InternetReadString(ih)) != "")
        {
            response += line;
        }
        InternetClose(ih);

        _TRACE("API Response: " + response);
    }
    else
    {
        _TRACE("Failed to execute InternetPostRequest");
    }
}

if(Status("action") == actionExplore)
{
    entryquantity = int(Position/Close);
    exitbuyquantity = ValueWhen(Buy ,int(Position/Close));
    exitshortquantity = ValueWhen(Short ,int(Position/Close));

    bsr = Buy AND Cover;
    ssr = Short AND Sell;

    iSignal  = IIf(bsr,'L',IIf(ssr,'R',IIf(Buy,'B',IIf(Sell,'S',IIf(Short,'S','B')))));
    Filter = Buy OR Sell OR Short OR Cover;
    AddTextColumn(symbol,"Trading Symbol");
    AddColumn(IIf(Buy,'B','-'), "Long Entry",format=formatChar);
    AddColumn(IIf(Sell,'X','-'), "Long Exit",format=formatChar);
    AddColumn(IIf(Short,'S','-'), "Short Entry",format=formatChar);
    AddColumn(IIf(Cover,'C','-'), "Short  Exit",format=formatChar);
    AddColumn(IIf(bsr, entryquantity+exitshortquantity,IIf(ssr,entryquantity+exitbuyquantity,IIf(Buy OR Short,entryquantity,IIf(Sell,exitbuyquantity,IIf(Cover,exitshortquantity,Null))))),"Trading Quantity",1);
    AddColumn(iSignal, "Signal Value",format=formatChar);
    AddColumn(C,"LTP",1.2);
    SetSortColumns(2);

    // Execution Module
    if(EnableAlgo != "Disable")
    {
        lasttime = StrFormat("%0.f",LastValue(BarIndex()));
        SetChartBkColor(colorDarkGrey);

        if(EnableAlgo == "Enable")
        {
            // Reverse Long Entry - Buy & Cover together
            if (AlgoBuy==True AND AlgoCover == True AND StaticVarGet(static_name_+"buyCoverAlgo")==0 AND StaticVarGetText(static_name_+"buyCoverAlgo_barvalue") != lasttime )
            {
                quantity = lastvalue(entryquantity+exitshortquantity);
                PlaceOrder("BUY", quantity);
                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyCoverAlgo",1);
            }
            else if ((AlgoBuy != True OR AlgoCover != True))
            {
                StaticVarSet(static_name_+"buyCoverAlgo",0);
                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue","");
            }

            // Long Entry Only
            if (AlgoBuy==True AND AlgoCover != True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
                quantity = LastValue(entryquantity);
                PlaceOrder("BUY",quantity);
                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1);
            }
            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");
            }

            // Long Exit Only
            if (AlgoSell==true AND AlgoShort != True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
                quantity = LastValue(exitbuyquantity);
                PlaceOrder("SELL",quantity);
                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1);
            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }

            // Reverse Short Entry - Short & Sell together
            if (AlgoShort==True AND AlgoSell==True AND  StaticVarGet(static_name_+"ShortSellAlgo")==0 AND StaticVarGetText(static_name_+"ShortSellAlgo_barvalue") != lasttime)
            {
                quantity = LastValue(exitbuyquantity+entryquantity);
                PlaceOrder("SELL",quantity);
                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortSellAlgo",1);
            }
            else if ((AlgoShort != True OR AlgoSell != True))
            {
                StaticVarSet(static_name_+"ShortSellAlgo",0);
                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue","");
            }

            // Short Entry Only
            if (AlgoShort==True  AND  AlgoSell != True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND  StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
                quantity = LastValue(entryquantity);
                PlaceOrder("SELL",quantity);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1);
            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }

            // Short Exit Only
            if (AlgoCover==true AND AlgoBuy != True AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
                quantity = LastValue(exitshortquantity);
                PlaceOrder("BUY",quantity);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1);
            }
            else if (AlgoCover != True )
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }

        else if(EnableAlgo == "LongOnly")
        {
            // Long Only Entry
            if (AlgoBuy==True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
                quantity = LastValue(entryquantity);
                PlaceOrder("BUY",quantity);
                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1);
            }
            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");
            }

            // Long Only Exit
            if (AlgoSell==true AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
                quantity = LastValue(exitbuyquantity);
                PlaceOrder("SELL",quantity);
                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1);
            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }
        }
        else if(EnableAlgo == "ShortOnly")
        {
            // Short Only Entry
            if (AlgoShort==True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
                quantity = LastValue(entryquantity);
                PlaceOrder("SELL",quantity);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1);
            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }

            // Short Only Exit
            if (AlgoCover==true AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
                quantity = LastValue(exitshortquantity);
                PlaceOrder("BUY",quantity);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1);
                _TRACE("Strategy : "+ strategy +" AlgoStatus : "+ EnableAlgo +" Chart Symbol : "+ Name() +"  Trading Symbol : "+  symbol +"  Quantity : "+ quantity +"  Signal : Cover Signal  TimeFrame : "+ Interval(2)+"  ChardId : "+ GetChartID() + " Latest Price : "+LastValue(C));
            }
            else if (AlgoCover != True)
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }
    }
}

_SECTION_END();

```

## [Direct link to heading](https://docs.openalgo.in/trading-platform/amibroker/equity-exploration-module\#vb-script-module-legacy-method)    VB Script Module (Legacy Method)

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]

//OpenAlgo - Intraday Cash Exploration Module
//Avoid using the code for running positional strategies
//If in case one have run for cash to cash intraday then ensure that symbol
//string manipulation is done according to the data vendor symbol format to match the
//brokers equity market symbols.

//////////////////////////////////////////////
//Amibroker Equity Exploration Module
//Coded by Rajandran R - Creator, OpenAlgo
//Date : 10/04/2024
//////////////////////////////////////////////

_SECTION_BEGIN("Exploration Module Order Controls");

strategy = ParamStr("Strategy Name", "Exploration Strategy");
apikey = ParamStr("OpenAlgo API Key", "******");
exchange = ParamList("Exchange","NSE|BSE",0);
pricetype = ParamStr("Price Type", "MARKET");
product = ParamList("Product", "MIS|CNC",0);
host = ParamStr("host","http://127.0.0.1:5000");
ver = ParamStr("API Version","v1");

bridgeurl = host+"/api/"+ver;

//////////////////////////////////////////////////////////////////////////////////////////

//Mapping of Equity Symbol needs to be done which matches with the OpenAlgo Trading Symbol

symbol = Name(); //AccelPix Symbol Mapping

//symbol = StrReplace(Name(),".NSE","")+"-EQ";    //Globaldatafeed Symbol mapping

//////////////////////////////////////////////////////////////////////////////////////////

Position = Param("Position Size (Rupee Terms)",1000,1,10000000,1);

EntryDelay = Param("Entry Delay",0,0,1,1);
ExitDelay = Param("Exit Delay",0,0,1,1);
EnableAlgo = ParamList("OpenAlgo","Disable|Enable|LongOnly|ShortOnly");

//Configure Trade Execution Delay (for recently signals)

AlgoBuy = LastValue(Ref(Buy,-EntryDelay));
AlgoSell = LastValue(Ref(Sell,-ExitDelay));
AlgoShort = LastValue(Ref(Short,-EntryDelay));
AlgoCover = LastValue(Ref(Cover,-ExitDelay));

//multiple order supression purpose we need static variables
static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";

//Algo Dashboard

GfxSelectFont( "BOOK ANTIQUA", 14, 100 );
GfxSetBkMode( 1 );
if(EnableAlgo == "Enable")
{
AlgoStatus = "Algo Enabled";
GfxSetTextColor( colorGreen );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=1)
{
_TRACE("Algo Status : Enabled");
StaticVarSet(static_name_algo, 1);
}
}
if(EnableAlgo == "Disable")
{
AlgoStatus = "Algo Disabled";
GfxSetTextColor( colorRed );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=0)
{
_TRACE("Algo Status : Disabled");
StaticVarSet(static_name_algo, 0);
}
}
if(EnableAlgo == "LongOnly")
{
AlgoStatus = "Long Only";
GfxSetTextColor( colorYellow );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=2)
{
_TRACE("Algo Status : Long Only");
StaticVarSet(static_name_algo, 2);
}
}
if(EnableAlgo == "ShortOnly")
{
AlgoStatus = "Short Only";
GfxSetTextColor( colorOrange );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=3)
{
_TRACE("Algo Status : Short Only");
StaticVarSet(static_name_algo, 3);
}
}

EnableScript("VBScript");
<%
Public Sub PlaceOrder(action, quantity)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("symbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placeorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " api_url :" & url


    AFL("api_request") = api_parameters
    AFL("api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

%>

openalgo = GetScriptObject();

//Execution Module

if(Status("action") == actionExplore)
//if(Status("action") == actionIndicator)
{

entryquantity = int(position/close);
exitbuyquantity = ValueWhen(Buy ,int(position/close));
exitshortquantity = ValueWhen(short ,int(position/close));

bsr = Buy AND Cover;
ssr = Short AND Sell;

iSignal  = IIf(bsr,'L',IIf(ssr,'R',IIf(Buy,'B',IIf(Sell,'S',IIf(Short,'S','B')))));
Filter = Buy OR Sell OR Short OR Cover;
AddTextColumn(symbol,"Trading Symbol");
AddColumn(IIf(Buy,'B','-'), "Long Entry",format=formatChar);
AddColumn(IIf(Sell,'X','-'), "Long Exit",format=formatChar);
AddColumn(IIf(Short,'S','-'), "Short Entry",format=formatChar);
AddColumn(IIf(Cover,'C','-'), "Short  Exit",format=formatChar);
AddColumn(IIf(bsr, entryquantity+exitshortquantity,IIf(ssr,entryquantity+exitbuyquantity,IIf(Buy OR Short,entryquantity,IIf(Sell,exitbuyquantity,IIf(Cover,exitshortquantity,Null))))),"Trading Quantity",1);
AddColumn(iSignal, "Signal Value",format=formatChar);
AddColumn(C,"LTP",1.2);
SetSortColumns(2);



//Execution Module

if(EnableAlgo != "Disable")
    {
        lasttime = StrFormat("%0.f",LastValue(BarIndex()));

        SetChartBkColor(colorDarkGrey);
        if(EnableAlgo == "Enable")
        {
            if (AlgoBuy==True AND AlgoCover == True AND StaticVarGet(static_name_+"buyCoverAlgo")==0 AND StaticVarGetText(static_name_+"buyCoverAlgo_barvalue") != lasttime )
            {
            // reverse Long Entry
				quantity = lastvalue(entryquantity+exitshortquantity);
                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyCoverAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if ((AlgoBuy != True OR AlgoCover != True))
            {
                StaticVarSet(static_name_+"buyCoverAlgo",0);
                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue","");
            }

            if (AlgoBuy==True AND AlgoCover != True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
            // Long Entry
				quantity = LastValue(entryquantity);

                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar
            }

            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");

            }
            if (AlgoSell==true AND AlgoShort != True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
            // Long Exit
				quantity = LastValue(exitbuyquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }
            if (AlgoShort==True AND AlgoSell==True AND  StaticVarGet(static_name_+"ShortSellAlgo")==0 AND StaticVarGetText(static_name_+"ShortSellAlgo_barvalue") != lasttime)
            {
            // reverse Short Entry
				quantity = LastValue(exitbuyquantity+entryquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortSellAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if ((AlgoShort != True OR AlgoSell != True))
            {
                StaticVarSet(static_name_+"ShortSellAlgo",0);
                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue","");
            }

            if (AlgoShort==True  AND  AlgoSell != True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND  StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
            // Short Entry
				quantity = LastValue(entryquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }
            if (AlgoCover==true AND AlgoBuy != True AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
            // Short Exit
				quantity = LastValue(exitshortquantity);

                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoCover != True )
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }

           else if(EnableAlgo == "LongOnly")
        {

            if (AlgoBuy==True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
            //  Long Entry
				quantity = LastValue(entryquantity);

                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");
            }
            if (AlgoSell==true AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
            // Long Exit
				quantity = LastValue(exitbuyquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }
        }
        else if(EnableAlgo == "ShortOnly")
        {
            if (AlgoShort==True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
            // Short Entry
				quantity = LastValue(entryquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }
            if (AlgoCover==true AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
            // Short Exit
				quantity = LastValue(exitshortquantity);

                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar
                _TRACE("Strategy : "+ strategy +"AlgoStatus : "+ EnableAlgo +"Chart Symbol : "+ Name() +"  Trading Symbol : "+  symbol +"  Quantity : "+ quantity +"  Signal : Cover Signal  TimeFrame : "+ Interval(2)+"  Response : "+ resp +"  ChardId : "+ GetChartID() + " Latest Price : "+LastValue(C));
            }
            else if (AlgoCover != True)
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }


    }//end main if

}

_SECTION_END();

```

[PreviousLine Trading Module](https://docs.openalgo.in/trading-platform/amibroker/line-trading-module) [NextCSV Exploration Module](https://docs.openalgo.in/trading-platform/amibroker/csv-exploration-module)

Last updated 1 month ago

## CSV Exploration Module
This CSV Exploration Module can be used to trade intraday/positional strategies for any exchanges

Download the CSV Files (Keep the csv file in the filepath defined in the AFL Code path)

[261B\\
\\
symbols.zip\\
\\
archive](https://17901342-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FmBwEhITzgv0O0fEGIIRN%2Fuploads%2FgoMRd7j6VhuYbm2NWhxX%2Fsymbols.zip?alt=media&token=d6f911e4-b94c-4868-8f76-208c57ece9ba)

Amibroker AFL Code for CSV Exploration Module (Internet Functions Module - Modern Method)

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
////////////////////////////////////////////////////////////
// OpenAlgo - CSV Exploration Module (Refactored to Modern Methods)
// Ensure CSV file is placed in the specified path
// Ensure Symbol mapping is done in the CSV properly
// Ensure corresponding Watchlist Symbols are created for Exploration
//
// Coded by Rajandran R - Creator, OpenAlgo
// Original Date : 19/08/2024
// Refactored to Modern Methods : (Current Date)
////////////////////////////////////////////////////////////

_SECTION_BEGIN("Exploration Module Order Controls");

RequestTimedRefresh(1, False); // Optional if you want periodic refresh

strategy = ParamStr("Strategy Name", "Exploration Strategy");
apikey = ParamStr("OpenAlgo API Key", "******");
pricetype = ParamStr("Price Type", "MARKET");
host = ParamStr("host","http://127.0.0.1:5000");
ver = ParamStr("API Version","v1");

bridgeurl = host+"/api/"+ver;

EntryDelay = Param("Entry Delay",0,0,1,1);
ExitDelay = Param("Exit Delay",0,0,1,1);
filepath = ParamStr("Filepath","C:\\symbols\\symbols.csv");
EnableAlgo = ParamList("OpenAlgo","Disable|Enable|LongOnly|ShortOnly");

// Configure Trade Execution Delay (for recently generated signals)
AlgoBuy = LastValue(Ref(Buy,-EntryDelay));
AlgoSell = LastValue(Ref(Sell,-ExitDelay));
AlgoShort = LastValue(Ref(Short,-EntryDelay));
AlgoCover = LastValue(Ref(Cover,-ExitDelay));

// multiple order suppression purpose - need static variables
static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";

// Algo Dashboard
GfxSelectFont("BOOK ANTIQUA", 14, 100);
GfxSetBkMode(1);

if(EnableAlgo == "Enable")
{
    AlgoStatus = "Algo Enabled";
    GfxSetTextColor(colorGreen);
    GfxTextOut("Algostatus : "+AlgoStatus , 20, 40);
    if(Nz(StaticVarGet(static_name_algo),0)!=1)
    {
        _TRACE("Algo Status : Enabled");
        StaticVarSet(static_name_algo, 1);
    }
}
if(EnableAlgo == "Disable")
{
    AlgoStatus = "Algo Disabled";
    GfxSetTextColor(colorRed);
    GfxTextOut("Algostatus : "+AlgoStatus , 20, 40);
    if(Nz(StaticVarGet(static_name_algo),0)!=0)
    {
        _TRACE("Algo Status : Disabled");
        StaticVarSet(static_name_algo, 0);
    }
}
if(EnableAlgo == "LongOnly")
{
    AlgoStatus = "Long Only";
    GfxSetTextColor(colorYellow);
    GfxTextOut("Algostatus : "+AlgoStatus , 20, 40);
    if(Nz(StaticVarGet(static_name_algo),0)!=2)
    {
        _TRACE("Algo Status : Long Only");
        StaticVarSet(static_name_algo, 2);
    }
}
if(EnableAlgo == "ShortOnly")
{
    AlgoStatus = "Short Only";
    GfxSetTextColor(colorOrange);
    GfxTextOut("Algostatus : "+AlgoStatus , 20, 40);
    if(Nz(StaticVarGet(static_name_algo),0)!=3)
    {
        _TRACE("Algo Status : Short Only");
        StaticVarSet(static_name_algo, 3);
    }
}

// Function to place order using modern methods (InternetPostRequest)
function PlaceOrder(action, quantity, symbol, exchange, pricetype, product, apikey, strategy)
{
    jsonRequestBody =
        "{"+
        "\"apikey\":\"" + apikey + "\"," +
        "\"strategy\":\"" + strategy + "\"," +
        "\"symbol\":\"" + symbol + "\"," +
        "\"action\":\"" + action + "\"," +
        "\"exchange\":\"" + exchange + "\"," +
        "\"pricetype\":\"" + pricetype + "\"," +
        "\"product\":\"" + product + "\"," +
        "\"quantity\":\"" + quantity + "\"" +
        "}";

    url = bridgeurl + "/placeorder";

    headers = "Content-Type: application/json\r\n" +
              "Cache-Control: no-cache\r\n" +
              "Pragma: no-cache\r\n";
    InternetSetHeaders(headers);

    _TRACE("API Request: " + jsonRequestBody + " URL: " + url);

    ih = InternetPostRequest(url, jsonRequestBody);
    if (ih)
    {
        response = "";
        line = "";
        while((line = InternetReadString(ih)) != "")
        {
            response += line;
        }
        InternetClose(ih);
        _TRACE("API Response: " + response);
    }
    else
    {
        _TRACE("Failed to place order. Check if API server is running.");
    }

    return;
}

// Execution Module
if(Status("action") == actionExplore)
{
    symbol= "";
    tradingsymbol = "";
    exchange = "";
    product = "";
    quantity = 0;

    fh = fopen(filepath,"r");

    if(fh)
    {
        while(!feof(fh))
        {
            data = fgets(fh); //read the single line of content

            symbol = StrExtract(data,0);
            itradingsymbol = StrExtract(data,1);
            iexchange = StrExtract(data,2);
            iproduct = StrExtract(data,3);
            iquantity = StrExtract(data,4);

            if(symbol == Name())
            {
                tradingsymbol = itradingsymbol;
                exchange = iexchange;
                product = iproduct;
                quantity = StrToNum(iquantity);

                printf("Symbol :"+symbol);
                printf("\nTrading Symbol :"+tradingsymbol);
                printf("\nExchange :"+exchange);
                printf("\nProduct :"+product);
                printf("\nQuantity :"+quantity);
            }
        }
    }
    else
    {
        printf("Error Opening the file");
    }

    fclose(fh);

    entryquantity = quantity;
    exitbuyquantity = quantity;
    exitshortquantity = quantity;

    bsr = Buy AND Cover;
    ssr = Short AND Sell;

    iSignal  = IIf(bsr,'L', IIf(ssr,'R', IIf(Buy,'B', IIf(Sell,'S', IIf(Short,'S','B')))));
    Filter = Buy OR Sell OR Short OR Cover;

    AddTextColumn(tradingsymbol,"Trading Symbol");
    AddTextColumn(exchange,"Exchange");
    AddTextColumn(product,"Product");
    AddColumn(IIf(Buy,'B','-'), "Long Entry",format=formatChar);
    AddColumn(IIf(Sell,'X','-'), "Long Exit",format=formatChar);
    AddColumn(IIf(Short,'S','-'), "Short Entry",format=formatChar);
    AddColumn(IIf(Cover,'C','-'), "Short  Exit",format=formatChar);
    AddColumn(IIf(bsr, entryquantity+exitshortquantity,
            IIf(ssr, entryquantity+exitbuyquantity,
            IIf(Buy OR Short, entryquantity,
            IIf(Sell, exitbuyquantity,
            IIf(Cover, exitshortquantity, Null))))),
            "Trading Quantity",1);
    AddColumn(iSignal, "Signal Value",format=formatChar);
    AddColumn(C,"LTP",1.2);
    SetSortColumns(2);

    //Execution Module
    if(EnableAlgo != "Disable")
    {
        lasttime = StrFormat("%0.f",LastValue(BarIndex()));
        SetChartBkColor(colorDarkGrey);

        if(EnableAlgo == "Enable")
        {
            // Reverse Long Entry
            if (AlgoBuy==True AND AlgoCover == True AND StaticVarGet(static_name_+"buyCoverAlgo")==0 AND StaticVarGetText(static_name_+"buyCoverAlgo_barvalue") != lasttime )
            {
                PlaceOrder("BUY", LastValue(entryquantity+exitshortquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyCoverAlgo",1);
            }
            else if ((AlgoBuy != True OR AlgoCover != True))
            {
                StaticVarSet(static_name_+"buyCoverAlgo",0);
                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue","");
            }

            // Long Entry
            if (AlgoBuy==True AND AlgoCover != True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
                PlaceOrder("BUY", LastValue(entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1);
            }
            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");
            }

            // Long Exit
            if (AlgoSell==true AND AlgoShort != True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
                PlaceOrder("SELL", LastValue(exitbuyquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1);
            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }

            // Reverse Short Entry
            if (AlgoShort==True AND AlgoSell==True AND StaticVarGet(static_name_+"ShortSellAlgo")==0 AND StaticVarGetText(static_name_+"ShortSellAlgo_barvalue") != lasttime)
            {
                PlaceOrder("SELL", LastValue(exitbuyquantity+entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortSellAlgo",1);
            }
            else if ((AlgoShort != True OR AlgoSell != True))
            {
                StaticVarSet(static_name_+"ShortSellAlgo",0);
                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue","");
            }

            // Short Entry
            if (AlgoShort==True  AND  AlgoSell != True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND  StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
                PlaceOrder("SELL", LastValue(entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1);
            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }

            // Short Exit
            if (AlgoCover==true AND AlgoBuy != True AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
                PlaceOrder("BUY", LastValue(exitshortquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1);
            }
            else if (AlgoCover != True )
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }

        else if(EnableAlgo == "LongOnly")
        {
            // Long Entry
            if (AlgoBuy==True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
                PlaceOrder("BUY", LastValue(entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1);
            }
            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");
            }

            // Long Exit
            if (AlgoSell==true AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
                PlaceOrder("SELL", LastValue(exitbuyquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1);
            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }
        }

        else if(EnableAlgo == "ShortOnly")
        {
            // Short Entry
            if (AlgoShort==True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
                PlaceOrder("SELL", LastValue(entryquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1);
            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }

            // Short Exit
            if (AlgoCover==true AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
                PlaceOrder("BUY", LastValue(exitshortquantity), tradingsymbol, exchange, pricetype, product, apikey, strategy);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1);
                _TRACE("Strategy : "+ strategy +" AlgoStatus : "+ EnableAlgo +" Chart Symbol : "+ Name() +"  Trading Symbol : "+  symbol +"  Quantity : "+ quantity +"  Signal : Cover Signal  TimeFrame : "+ Interval(2)+"  Latest Price : "+LastValue(C));
            }
            else if (AlgoCover != True)
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }
    }
}

_SECTION_END();

```

Amibroker AFL Code for CSV Exploration Module (VB Script Module - Legacy Method)

Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]

//OpenAlgo - CSV Exploration Module
//Ensure CSV file is placed in the right path
//Ensure Symbol mapping is done in the CSV properly
//Ensure Corresponding Watchlist Symbols are Created for Exploration

//////////////////////////////////////////////
//Amibroker CSV Exploration Module
//Coded by Rajandran R - Creator, OpenAlgo
//Date : 19/08/2024
//////////////////////////////////////////////

_SECTION_BEGIN("Exploration Module Order Controls");

strategy = ParamStr("Strategy Name", "Exploration Strategy");
apikey = ParamStr("OpenAlgo API Key", "******");
pricetype = ParamStr("Price Type", "MARKET");
host = ParamStr("host","http://127.0.0.1:5000");
ver = ParamStr("API Version","v1");

bridgeurl = host+"/api/"+ver;

EntryDelay = Param("Entry Delay",0,0,1,1);
ExitDelay = Param("Exit Delay",0,0,1,1);
filepath = ParamStr("Filepath","C:\\symbols\\symbols.csv");
EnableAlgo = ParamList("OpenAlgo","Disable|Enable|LongOnly|ShortOnly");

//Configure Trade Execution Delay (for recently signals)

AlgoBuy = LastValue(Ref(Buy,-EntryDelay));
AlgoSell = LastValue(Ref(Sell,-ExitDelay));
AlgoShort = LastValue(Ref(Short,-EntryDelay));
AlgoCover = LastValue(Ref(Cover,-ExitDelay));

//multiple order supression purpose we need static variables
static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";

//Algo Dashboard

GfxSelectFont( "BOOK ANTIQUA", 14, 100 );
GfxSetBkMode( 1 );
if(EnableAlgo == "Enable")
{
AlgoStatus = "Algo Enabled";
GfxSetTextColor( colorGreen );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=1)
{
_TRACE("Algo Status : Enabled");
StaticVarSet(static_name_algo, 1);
}
}
if(EnableAlgo == "Disable")
{
AlgoStatus = "Algo Disabled";
GfxSetTextColor( colorRed );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=0)
{
_TRACE("Algo Status : Disabled");
StaticVarSet(static_name_algo, 0);
}
}
if(EnableAlgo == "LongOnly")
{
AlgoStatus = "Long Only";
GfxSetTextColor( colorYellow );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=2)
{
_TRACE("Algo Status : Long Only");
StaticVarSet(static_name_algo, 2);
}
}
if(EnableAlgo == "ShortOnly")
{
AlgoStatus = "Short Only";
GfxSetTextColor( colorOrange );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=3)
{
_TRACE("Algo Status : Short Only");
StaticVarSet(static_name_algo, 3);
}
}

EnableScript("VBScript");
<%
Public Sub PlaceOrder(action, quantity)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy, symbol , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")
    symbol = AFL.Var("tradingsymbol")
    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placeorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " api_url :" & url


    AFL("api_request") = api_parameters
    AFL("api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

%>

openalgo = GetScriptObject();

//Execution Module

if(Status("action") == actionExplore)
//if(Status("action") == actionIndicator)
{

symbol= "";
tradingsymbol = "";
exchange = "";
product = "";
quantity = "";

fh = fopen(filepath,"r");

if(fh)
{

while(!feof(fh))
{

data = fgets(fh); //read the single line of content

symbol = StrExtract(data,0);
itradingsymbol = StrExtract(data,1);
iexchange = StrExtract(data,2);
iproduct = StrExtract(data,3);
iquantity = StrExtract(data,4);

if(symbol == Name())
{

tradingsymbol = itradingsymbol;
exchange = iexchange;
product = iproduct;
quantity = StrToNum(iquantity);

printf("Symbol :"+symbol);
printf("\nTrading Symbol :"+tradingsymbol);
printf("\nExchange :"+exchange);
printf("\nProduct :"+product);
printf("\nQuantity :"+quantity);

} //end of if

} //end of while

} //end of if

else
{

printf("Error Opening the file");

}

fclose(fh);

entryquantity = quantity;
exitbuyquantity = quantity;
exitshortquantity = quantity;

bsr = Buy AND Cover;
ssr = Short AND Sell;

iSignal  = IIf(bsr,'L',IIf(ssr,'R',IIf(Buy,'B',IIf(Sell,'S',IIf(Short,'S','B')))));
Filter = Buy OR Sell OR Short OR Cover;
AddTextColumn(tradingsymbol,"Trading Symbol");
AddTextColumn(exchange,"Exchange");
AddTextColumn(product,"Product");
AddColumn(IIf(Buy,'B','-'), "Long Entry",format=formatChar);
AddColumn(IIf(Sell,'X','-'), "Long Exit",format=formatChar);
AddColumn(IIf(Short,'S','-'), "Short Entry",format=formatChar);
AddColumn(IIf(Cover,'C','-'), "Short  Exit",format=formatChar);
AddColumn(IIf(bsr, entryquantity+exitshortquantity,IIf(ssr,entryquantity+exitbuyquantity,IIf(Buy OR Short,entryquantity,IIf(Sell,exitbuyquantity,IIf(Cover,exitshortquantity,Null))))),"Trading Quantity",1);
AddColumn(iSignal, "Signal Value",format=formatChar);
AddColumn(C,"LTP",1.2);
SetSortColumns(2);



//Execution Module

if(EnableAlgo != "Disable")
    {
        lasttime = StrFormat("%0.f",LastValue(BarIndex()));

        SetChartBkColor(colorDarkGrey);
        if(EnableAlgo == "Enable")
        {
            if (AlgoBuy==True AND AlgoCover == True AND StaticVarGet(static_name_+"buyCoverAlgo")==0 AND StaticVarGetText(static_name_+"buyCoverAlgo_barvalue") != lasttime )
            {
            // reverse Long Entry
				quantity = lastvalue(entryquantity+exitshortquantity);
                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyCoverAlgo",1); //Algo Order was triggered, no more order on this bar

            }
            else if ((AlgoBuy != True OR AlgoCover != True))
            {
                StaticVarSet(static_name_+"buyCoverAlgo",0);
                StaticVarSetText(static_name_+"buyCoverAlgo_barvalue","");
            }

            if (AlgoBuy==True AND AlgoCover != True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
            // Long Entry
				quantity = LastValue(entryquantity);

                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar
            }

            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");

            }
            if (AlgoSell==true AND AlgoShort != True AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
            // Long Exit
				quantity = LastValue(exitbuyquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }
            if (AlgoShort==True AND AlgoSell==True AND  StaticVarGet(static_name_+"ShortSellAlgo")==0 AND StaticVarGetText(static_name_+"ShortSellAlgo_barvalue") != lasttime)
            {
            // reverse Short Entry
				quantity = LastValue(exitbuyquantity+entryquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortSellAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if ((AlgoShort != True OR AlgoSell != True))
            {
                StaticVarSet(static_name_+"ShortSellAlgo",0);
                StaticVarSetText(static_name_+"ShortsellAlgo_barvalue","");
            }

            if (AlgoShort==True  AND  AlgoSell != True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND  StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
            // Short Entry
				quantity = LastValue(entryquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }
            if (AlgoCover==true AND AlgoBuy != True AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
            // Short Exit
				quantity = LastValue(exitshortquantity);

                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);

                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoCover != True )
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }

           else if(EnableAlgo == "LongOnly")
        {

            if (AlgoBuy==True AND StaticVarGet(static_name_+"buyAlgo")==0 AND StaticVarGetText(static_name_+"buyAlgo_barvalue") != lasttime)
            {
            //  Long Entry
				quantity = LastValue(entryquantity);

                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"buyAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"buyAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoBuy != True)
            {
                StaticVarSet(static_name_+"buyAlgo",0);
                StaticVarSetText(static_name_+"buyAlgo_barvalue","");
            }
            if (AlgoSell==true AND StaticVarGet(static_name_+"sellAlgo")==0 AND StaticVarGetText(static_name_+"sellAlgo_barvalue") != lasttime)
            {
            // Long Exit
				quantity = LastValue(exitbuyquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"sellAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"sellAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoSell != True )
            {
                StaticVarSet(static_name_+"sellAlgo",0);
                StaticVarSetText(static_name_+"sellAlgo_barvalue","");
            }
        }
        else if(EnableAlgo == "ShortOnly")
        {
            if (AlgoShort==True AND StaticVarGet(static_name_+"ShortAlgo")==0 AND StaticVarGetText(static_name_+"ShortAlgo_barvalue") != lasttime)
            {
            // Short Entry
				quantity = LastValue(entryquantity);

                openalgo.PlaceOrder("SELL",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"ShortAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"ShortAlgo",1); //Algo Order was triggered, no more order on this bar
            }
            else if (AlgoShort != True )
            {
                StaticVarSet(static_name_+"ShortAlgo",0);
                StaticVarSetText(static_name_+"ShortAlgo_barvalue","");
            }
            if (AlgoCover==true AND StaticVarGet(static_name_+"CoverAlgo")==0 AND StaticVarGetText(static_name_+"CoverAlgo_barvalue") != lasttime)
            {
            // Short Exit
				quantity = LastValue(exitshortquantity);

                openalgo.PlaceOrder("BUY",quantity);

				_TRACE("API Request : "+api_request);
				_TRACE("API Response : "+api_response);


                StaticVarSetText(static_name_+"CoverAlgo_barvalue",lasttime);
                StaticVarSet(static_name_+"CoverAlgo",1); //Algo Order was triggered, no more order on this bar
                _TRACE("Strategy : "+ strategy +"AlgoStatus : "+ EnableAlgo +"Chart Symbol : "+ Name() +"  Trading Symbol : "+  symbol +"  Quantity : "+ quantity +"  Signal : Cover Signal  TimeFrame : "+ Interval(2)+"  Response : "+ resp +"  ChardId : "+ GetChartID() + " Latest Price : "+LastValue(C));
            }
            else if (AlgoCover != True)
            {
                StaticVarSet(static_name_+"CoverAlgo",0);
                StaticVarSetText(static_name_+"CoverAlgo_barvalue","");
            }
        }


    }//end main if

}

_SECTION_END();

```

[PreviousEquity Exploration Module](https://docs.openalgo.in/trading-platform/amibroker/equity-exploration-module) [NextOptions Button Trading Module](https://docs.openalgo.in/trading-platform/amibroker/options-button-trading-module)

Last updated 1 month ago

## Options Trading Module
Copy

```inline-grid min-w-full grid-cols-[auto_1fr] p-2 [count-reset:line]
//Rajandran R - Creator of OpenAlgo
//website - openalgo.in / marketcalls.in
//OpenAlgo - Amibroker Options Button Trading Module v1.0
//Date - 20/08/2024

_SECTION_BEGIN("OpenAlgo Options Button Trading");

RequestTimedRefresh(1,False);

EnableTextOutput(False);

SetOption("StaticVarAutoSave", 30 );

apikey = ParamStr("OpenAlgo API Key", "******");

strategy = ParamStr("Strategy Name", "Test Strategy");

spot = Paramlist("Spot Symbol","NIFTY|BANKNIFTY|FINNIFTY|SENSEX");
expiry = ParamStr("Expiry Date","22AUG24");

exchange = ParamList("Exchange","NFO|BFO|MCX",0);
Symbol = ParamStr("Underlying Symbol","NIFTY");
iInterval= Param("Strike Interval",50,1,10000,1);
StrikeCalculation = Paramlist("Strike Calculation","PREVOPEN|PREVCLOSE|TODAYSOPEN",0);
LotSize = Param("Lot Size",25,1,10000,1);

ATMoffsetCE = Param("ATM CE Offset",0,-40,40,1);
ITMoffsetCE = Param("ITM CE Offset",-2,-40,-1,1);
OTMoffsetCE = Param("OTM CE Offset",4,1,40,1);

ATMoffsetPE = Param("ATM PE Offset",0,-40,40,1);
ITMoffsetPE = Param("ITM PE Offset",-2,-40,-1,1);
OTMoffsetPE = Param("OTM PE Offset",4,1,40,1);

pricetype = ParamList("Order Type","MARKET",0);
product = ParamList("Product","MIS|NRML",1);
tradetype = ParamList("Option Trade Type","BUY|SELL",0);

quantity = Param("quanity(Lot Size)",1,0,10000)*LotSize;
price = 0;
disclosed_quantity = 0;
trigger_price = 0;

host = ParamStr("host","http://127.0.0.1:5000");
ver = ParamStr("API Version","v1");

VoiceAlert = ParamList("Voice Alert","Disable|Enable",1);

EnableAlgo = ParamList("AlgoStatus","Disable|Enable",0);

bridgeurl = host+"/api/"+ver;
resp = "";

//Static Variables for Order protection

static_name_ = Name()+GetChartID()+interval(2)+strategy;
static_name_algo = Name()+GetChartID()+interval(2)+strategy+"algostatus";

//OpenAlgo Dashboard

GfxSelectFont( "BOOK ANTIQUA", 14, 100 );
GfxSetBkMode( 1 );
if(EnableAlgo == "Enable")
{
AlgoStatus = "Algo Enabled";
GfxSetTextColor( colorGreen );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=1)
{
_TRACE("Algo Status : Enabled");
StaticVarSet(static_name_algo, 1);
}
}
if(EnableAlgo == "Disable")
{
AlgoStatus = "Algo Disabled";
GfxSetTextColor( colorRed );
GfxTextOut( "Algostatus : "+AlgoStatus , 20, 40);
if(Nz(StaticVarGet(static_name_algo),0)!=0)
{
_TRACE("Algo Status : Disabled");
StaticVarSet(static_name_algo, 0);
}
}

if(StrikeCalculation=="PREVOPEN")
{
SetForeign(Symbol);
spotC = LastValue(Ref(OPEN,-1));
RestorePriceArrays();
}

if(StrikeCalculation=="PREVCLOSE")
{
SetForeign(Symbol);
spotC = LastValue(Ref(Close,-1));
RestorePriceArrays();
}

if(StrikeCalculation=="TODAYSOPEN")
{
SetForeign(Symbol);
spotC = LastValue(TimeFrameGetPrice("O",inDaily));
RestorePriceArrays();
}

//Maintain Array to Store ATM Strikes for each and every bar
strike = IIf(spotC % iInterval > iInterval/2, spotC - (spotC%iInterval) + iInterval,
			spotC - (spotC%iInterval));

//ATM/ITM/OTM Entry/Exit Strikes

ATMstrikeCE = strike + (ATMoffsetCE * iInterval);
ATMstrikePE = strike - (ATMoffsetPE * iInterval);

ITMstrikeCE = strike + (ITMoffsetCE * iInterval);
ITMstrikePE = strike - (ITMoffsetPE * iInterval);

OTMstrikeCE = strike + (OTMoffsetCE * iInterval);
OTMstrikePE = strike - (OTMoffsetPE * iInterval);

//ATM/ITM/OTM OpenAlgoSymbol Format

ATMsymbolCE = spot+expiry+ATMstrikeCE+"CE";
ATMsymbolPE = spot+expiry+ATMstrikePE+"PE";

ITMsymbolCE = spot+expiry+ITMstrikeCE+"CE";
ITMsymbolPE = spot+expiry+ITMstrikePE+"PE";

OTMsymbolCE = spot+expiry+OTMstrikeCE+"CE";
OTMsymbolPE = spot+expiry+OTMstrikePE+"PE";

printf("\nATMsymbolCE = "+ATMsymbolCE);
printf("\nATMsymbolPE = "+ATMsymbolPE);

printf("\nITMsymbolCE = "+ITMsymbolCE);
printf("\nITMsymbolPE = "+ITMsymbolPE);

printf("\nOTMsymbolCE = "+OTMsymbolCE);
printf("\nOTMsymbolPE = "+OTMsymbolPE);

printf("\n ------Internal Memory-------");
printf("\n ATMsymbolCE is : " + StaticVarGetText(static_name_+"ATMsymbolCE"));
printf("\n ITMsymbolCE is : " + StaticVarGetText(static_name_+"ITMsymbolCE"));
printf("\n OTMsymbolCE is : " + StaticVarGetText(static_name_+"OTMsymbolCE"));

printf("\n ATMsymbolPE is : " + StaticVarGetText(static_name_+"ATMsymbolPE"));
printf("\n ITMsymbolPE is : " + StaticVarGetText(static_name_+"ITMsymbolPE"));
printf("\n OTMsymbolPE is : " + StaticVarGetText(static_name_+"OTMsymbolPE"));

_SECTION_BEGIN("OpenAlgo Bridge Controls");

EnableScript("VBScript");
<%
Public Sub PlaceOrder(symbol,action, quantity)

    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")

    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & action & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placeorder"

    ' MsgBox "API Request: " & jsonRequestBody, vbInformation, "API Information"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " api_url :" & url


    ' MsgBox "API Request: " & oXMLHTTP.responseText, vbInformation, "API Information"


    AFL("api_request") = api_parameters
    AFL("api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub ExitOrder(symbol)
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy , exchange, pricetype, product
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")

    exchange = AFL.Var("exchange")
    pricetype = AFL.Var("pricetype")
    product = AFL.Var("product")
    position_size = "0"
    quantity = "0"


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & _
    """,""symbol"":""" & symbol & _
    """,""action"":""" & "SELL" & _
    """,""exchange"":""" & exchange & _
    """,""pricetype"":""" & pricetype & _
    """,""product"":""" & product & _
    """,""quantity"":""" & quantity & _
    """,""position_size"":""" & position_size & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/placesmartorder"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " Symbol :" & symbol & " Exchange :" & exchange & _
                 " Action :" & action & " Pricetype :" & pricetype & _
                 " Product :" & product & " Quantity:" & quantity & _
                 " Position Size :" & position_size & " api_url :" & url


    AFL("ex_api_request") = api_parameters
    AFL("ex_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

Public Sub SquareoffAll()
    Dim oXMLHTTP
    Dim oStream
    Set oXMLHTTP = CreateObject("Msxml2.XMLHTTP")
    ' Define variables with the specified values
    Dim apikey, strategy
    apikey = AFL.Var("apikey")
    strategy = AFL.Var("strategy")


    ' Construct the JSON string for the POST message
    Dim jsonRequestBody
    jsonRequestBody = "{""apikey"":""" & apikey & _
    """,""strategy"":""" & strategy & """}"

    ' Set the URL
    Dim url
    url = AFL.Var("bridgeurl")&"/closeposition"

    ' Configure the HTTP request for POST method
    oXMLHTTP.Open "POST", url, False
    oXMLHTTP.setRequestHeader "Content-Type", "application/json"
    oXMLHTTP.setRequestHeader "Cache-Control", "no-cache"
    oXMLHTTP.setRequestHeader "Pragma", "no-cache"

    ' Send the request with the JSON body
    oXMLHTTP.Send jsonRequestBody

    api_parameters = "Strategy :" & strategy & " api_url :" & url


    AFL("sq_api_request") = api_parameters
    AFL("sq_api_response") = oXMLHTTP.responseText


    ' Optionally, handle the response here
    ' Dim response
    ' response = oXMLHTTP.responseText
    ' Response handling code...
End Sub

%>

openalgo = GetScriptObject();

_SECTION_BEGIN("Button Trading -  For Old Amibroker Versions");

X0 = 20;
Y0 = 100;
X1 = 60;

X2 = 20;
Y2 = 240;
X3 = 60;

LBClick = GetCursorMouseButtons() == 9;	// Click
MouseX  = Nz(GetCursorXPosition(1));		//
MouseY  = Nz(GetCursorYPosition(1));		//

procedure DrawButton (Text, x1, y1, x2, y2, colorFrom, colorTo)
{
	GfxSetOverlayMode(0);
	GfxSelectFont("Verdana", 9, 700);
	GfxSetBkMode(1);
	GfxGradientRect(x1, y1, x2, y2, colorFrom, colorTo);
	GfxDrawText(Text, x1, y1, x2, y2, 32|1|4|16);
}
GfxSetTextColor(colorWhite);

if(EnableAlgo == "Enable")
{

	DrawButton("ATM CE", X0, Y0, X0+X1+50, Y0+50, colorGreen, colorGreen);
	CursorInATMCEButton = MouseX >= X0 AND MouseX <= X0+X1+50 AND MouseY >= Y0 AND MouseY <= Y0+50;
	ATMCEButtonClick = CursorInATMCEButton AND LBClick;

	DrawButton("ITM CE", X0+115, Y0, X0+X1+165, Y0+50, colorRed, colorRed);
	CursorInITMCEButton = MouseX >= X0+115 AND MouseX <= X0+X1+165 AND MouseY >= Y0 AND MouseY <= Y0+50;
	ITMCEButtonClick = CursorInITMCEButton AND LBClick;

	DrawButton("OTM CE", X0+230, Y0, X0+X1+280, Y0+50, colorBlue, colorBlue);
	CursorInOTMCEButton = MouseX >= X0+230 AND MouseX <= X0+X1+280 AND MouseY >= Y0 AND MouseY <= Y0+50;
	OTMCEButtonClick = CursorInOTMCEButton AND LBClick;

	DrawButton("x ATM CE", X0, Y0+55, X0+X1+50, Y0+105, colorGreen, colorGreen);
	xCursorInATMCEButton = MouseX >= X0 AND MouseX <= X0+X1+50 AND MouseY >= Y0+55 AND MouseY <= Y0+105;
	xATMCEButtonClick = xCursorInATMCEButton AND LBClick;

	DrawButton("x ITM CE", X0+115, Y0+55, X0+X1+165, Y0+105, colorRed, colorRed);
	xCursorInITMCEButton = MouseX >= X0+115 AND MouseX <= X0+X1+165 AND MouseY >= Y0+55 AND MouseY <= Y0+105;
	xITMCEButtonClick = xCursorInITMCEButton AND LBClick;

	DrawButton("x OTM CE", X0+230, Y0+55, X0+X1+280, Y0+105, colorBlue, colorBlue);
	xCursorInOTMCEButton = MouseX >= X0+230 AND MouseX <= X0+X1+280 AND MouseY >= Y0+55 AND MouseY <= Y0+105;
	xOTMCEButtonClick = xCursorInOTMCEButton AND LBClick;


	DrawButton("ATM PE", X2, Y2, X2+X3+50, Y2+50, colorGreen, colorGreen);
	CursorInATMPEButton = MouseX >= X2 AND MouseX <= X2+X3+50 AND MouseY >= Y2 AND MouseY <= Y2+50;
	ATMPEButtonClick = CursorInATMPEButton AND LBClick;

	DrawButton("ITM PE", X2+115, Y2, X2+X3+165, Y2+50, colorRed, colorRed);
	CursorInITMPEButton = MouseX >= X2+115 AND MouseX <= X2+X3+165 AND MouseY >= Y2 AND MouseY <= Y2+50;
	ITMPEButtonClick = CursorInITMPEButton AND LBClick;

	DrawButton("OTM PE", X2+230, Y2, X2+X3+280, Y2+50, colorBlue, colorBlue);
	CursorInOTMPEButton = MouseX >= X2+230 AND MouseX <= X2+X3+280 AND MouseY >= Y2 AND MouseY <= Y2+50;
	OTMPEButtonClick = CursorInOTMPEButton AND LBClick;

	DrawButton("x ATM PE", X2, Y2+55, X2+X3+50, Y2+105, colorGreen, colorGreen);
	xCursorInATMPEButton = MouseX >= X2 AND MouseX <= X2+X3+50 AND MouseY >= Y2+55 AND MouseY <= Y2+105;
	xATMPEButtonClick = xCursorInATMPEButton AND LBClick;

	DrawButton("x ITM PE", X2+115, Y2+55, X2+X3+165, Y2+105, colorRed, colorRed);
	xCursorInITMPEButton = MouseX >= X2+115 AND MouseX <= X2+X3+165 AND MouseY >= Y2+55 AND MouseY <= Y2+105;
	xITMPEButtonClick = xCursorInITMPEButton AND LBClick;

	DrawButton("x OTM PE", X2+230, Y2+55, X2+X3+280, Y2+105, colorBlue, colorBlue);
	xCursorInOTMPEButton = MouseX >= X2+230 AND MouseX <= X2+X3+280 AND MouseY >= Y2+55 AND MouseY <= Y2+105;
	xOTMPEButtonClick = xCursorInOTMPEButton AND LBClick;


	DrawButton("CLOSE ALL", X0, Y0+270, X0+X1+65, Y0+320, colorRed, colorRed);
	CursorInCXButton = MouseX >= X0 AND MouseX <= X0+X1+65 AND MouseY >= Y0+270 AND MouseY <= Y0+320;
	CXButtonClick = CursorInCXButton AND LBClick;



	// Logic for all buttons
	// ATM CE entry and exit logic
	if (ATMCEButtonClick AND StaticVarGet(static_name_ + "ATMCEAlgo") == 0) {
		_TRACE("Placing ATM CE Entry Order");
		openalgo.placeorder(ATMsymbolCE, tradetype, quantity);
		StaticVarSetText(static_name_+"ATMsymbolCE",ATMsymbolCE,True);
		if (VoiceAlert == "Enable") { Say("ATM CE Order Triggered"); }
		_TRACE("API Request : " + api_request);
		_TRACE("API Response : " + api_response);
		StaticVarSet(static_name_ + "ATMCEAlgo", 1);
	} else { StaticVarSet(static_name_ + "ATMCEAlgo", 0); }

	if (xATMCEButtonClick AND StaticVarGet(static_name_ + "xATMCEAlgo") == 0) {
		_TRACE("Placing ATM CE Exit Order");
		exitsymbol = StaticVarGetText(static_name_+"ATMsymbolCE");
		if(exitsymbol!="")
		{
		openalgo.exitorder(exitsymbol);
		StaticVarSetText(static_name_+"ATMsymbolCE","");
		if (VoiceAlert == "Enable") { Say("Exit ATM CE Order Triggered"); }
		_TRACE("API Request : " + ex_api_request);
		_TRACE("API Response : " + ex_api_response);
		StaticVarSet(static_name_ + "xATMCEAlgo", 1);
		}
		else
		{
		Say("No Open Orders to Exit");
		_TRACE("No Open Orders to Exit");
		}
	} else { StaticVarSet(static_name_ + "xATMCEAlgo", 0); }

	// ITM CE entry and exit logic
	if (ITMCEButtonClick AND StaticVarGet(static_name_ + "ITMCEAlgo") == 0) {
		_TRACE("Placing ITM CE Entry Order");
		openalgo.placeorder(ITMsymbolCE, tradetype, quantity);
		StaticVarSetText(static_name_+"ITMsymbolCE",ITMsymbolCE,True);
		if (VoiceAlert == "Enable") { Say("ITM CE Order Triggered"); }
		_TRACE("API Request : " + api_request);
		_TRACE("API Response : " + api_response);
		StaticVarSet(static_name_ + "ITMCEAlgo", 1);
	} else { StaticVarSet(static_name_ + "ITMCEAlgo", 0); }

	if (xITMCEButtonClick AND StaticVarGet(static_name_ + "xITMCEAlgo") == 0) {
		_TRACE("Placing ITM CE Exit Order");
		exitsymbol = StaticVarGetText(static_name_+"ITMsymbolCE");
		if(exitsymbol!="")
		{
		openalgo.exitorder(exitsymbol);
		StaticVarSetText(static_name_+"ITMsymbolCE","");
		if (VoiceAlert == "Enable") { Say("Exit ITM CE Order Triggered"); }
		_TRACE("API Request : " + ex_api_request);
		_TRACE("API Response : " + ex_api_response);
		StaticVarSet(static_name_ + "xITMCEAlgo", 1);
		}
		else
		{
		Say("No Open Orders to Exit");
		_TRACE("No Open Orders to Exit");
		}
	} else { StaticVarSet(static_name_ + "xITMCEAlgo", 0); }

	// OTM CE entry and exit logic
	if (OTMCEButtonClick AND StaticVarGet(static_name_ + "OTMCEAlgo") == 0) {
		_TRACE("Placing OTM CE Entry Order");
		openalgo.placeorder(OTMsymbolCE, tradetype, quantity);
		StaticVarSetText(static_name_+"OTMsymbolCE",OTMsymbolCE,True);
		if (VoiceAlert == "Enable") { Say("OTM CE Order Triggered"); }
		_TRACE("API Request : " + api_request);
		_TRACE("API Response : " + api_response);
		StaticVarSet(static_name_ + "OTMCEAlgo", 1);
	} else { StaticVarSet(static_name_ + "OTMCEAlgo", 0); }

	if (xOTMCEButtonClick AND StaticVarGet(static_name_ + "xOTMCEAlgo") == 0) {
		_TRACE("Placing OTM CE Exit Order");
		exitsymbol = StaticVarGetText(static_name_+"OTMsymbolCE");
		if(exitsymbol!="")
		{
		openalgo.exitorder(exitsymbol);
		StaticVarSetText(static_name_+"OTMsymbolCE","");
		if (VoiceAlert == "Enable") { Say("Exit OTM CE Order Triggered"); }
		_TRACE("API Request : " + ex_api_request);
		_TRACE("API Response : " + ex_api_response);
		StaticVarSet(static_name_ + "xOTMCEAlgo", 1);
		}
		else
		{
		Say("No Open Orders to Exit");
		_TRACE("No Open Orders to Exit");
		}
	} else { StaticVarSet(static_name_ + "xOTMCEAlgo", 0); }

	// ATM PE entry and exit logic
	if (ATMPEButtonClick AND StaticVarGet(static_name_ + "ATMPEAlgo") == 0) {
		_TRACE("Placing ATM PE Entry Order");
		openalgo.placeorder(ATMsymbolPE, tradetype, quantity);
		StaticVarSetText(static_name_+"ATMsymbolPE",ATMsymbolPE,True);
		if (VoiceAlert == "Enable") { Say("ATM PE Order Triggered"); }
		_TRACE("API Request : " + api_request);
		_TRACE("API Response : " + api_response);
		StaticVarSet(static_name_ + "ATMPEAlgo", 1);
	} else { StaticVarSet(static_name_ + "ATMPEAlgo", 0); }

	if (xATMPEButtonClick AND StaticVarGet(static_name_ + "xATMPEAlgo") == 0) {
		_TRACE("Placing ATM PE Exit Order");
		exitsymbol = StaticVarGetText(static_name_+"ATMsymbolPE");
		if(exitsymbol!="")
		{
		openalgo.exitorder(exitsymbol);
		StaticVarSetText(static_name_+"ATMsymbolPE","");
		if (VoiceAlert == "Enable") { Say("Exit ATM PE Order Triggered"); }
		_TRACE("API Request : " + ex_api_request);
		_TRACE("API Response : " + ex_api_response);
		StaticVarSet(static_name_ + "xATMPEAlgo", 1);
		}
		else
		{
		Say("No Open Orders to Exit");
		_TRACE("No Open Orders to Exit");
		}
	} else { StaticVarSet(static_name_ + "xATMPEAlgo", 0); }

	// ITM PE entry and exit logic
	if (ITMPEButtonClick AND StaticVarGet(static_name_ + "ITMPEAlgo") == 0) {
		_TRACE("Placing ITM PE Entry Order");
		openalgo.placeorder(ITMsymbolPE, tradetype, quantity);
		StaticVarSetText(static_name_+"ITMsymbolPE",ITMsymbolPE,True);
		if (VoiceAlert == "Enable") { Say("ITM PE Order Triggered"); }
		_TRACE("API Request : " + api_request);
		_TRACE("API Response : " + api_response);
		StaticVarSet(static_name_ + "ITMPEAlgo", 1);

	} else { StaticVarSet(static_name_ + "ITMPEAlgo", 0); }

	if (xITMPEButtonClick AND StaticVarGet(static_name_ + "xITMPEAlgo") == 0) {
		_TRACE("Placing ITM PE Exit Order");
				exitsymbol = StaticVarGetText(static_name_+"ITMsymbolPE");
		if(exitsymbol!="")
		{
		openalgo.exitorder(exitsymbol);
		StaticVarSetText(static_name_+"ITMsymbolPE","");
		if (VoiceAlert == "Enable") { Say("Exit ITM PE Order Triggered"); }
		_TRACE("API Request : " + ex_api_request);
		_TRACE("API Response : " + ex_api_response);
		StaticVarSet(static_name_ + "xITMPEAlgo", 1);
		}
		else
		{
		Say("No Open Orders to Exit");
		_TRACE("No Open Orders to Exit");
		}
	} else { StaticVarSet(static_name_ + "xITMPEAlgo", 0); }

	// OTM PE entry and exit logic
	if (OTMPEButtonClick AND StaticVarGet(static_name_ + "OTMPEAlgo") == 0) {
		_TRACE("Placing OTM PE Entry Order");
		openalgo.placeorder(OTMsymbolPE, tradetype, quantity);
		StaticVarSetText(static_name_+"OTMsymbolPE",OTMsymbolPE,True);
		if (VoiceAlert == "Enable") { Say("OTM PE Order Triggered"); }
		_TRACE("API Request : " + api_request);
		_TRACE("API Response : " + api_response);
		StaticVarSet(static_name_ + "OTMPEAlgo", 1);
	} else { StaticVarSet(static_name_ + "OTMPEAlgo", 0); }

	if (xOTMPEButtonClick AND StaticVarGet(static_name_ + "xOTMPEAlgo") == 0) {
		_TRACE("Placing OTM PE Exit Order");
		exitsymbol = StaticVarGetText(static_name_+"OTMsymbolPE");
		if(exitsymbol!="")
		{
		openalgo.exitorder(exitsymbol);
		StaticVarSetText(static_name_+"OTMsymbolPE","");
		if (VoiceAlert == "Enable") { Say("Exit OTM PE Order Triggered"); }
		_TRACE("API Request : " + ex_api_request);
		_TRACE("API Response : " + ex_api_response);
		StaticVarSet(static_name_ + "xOTMPEAlgo", 1);
		}
		else
		{
		Say("No Open Orders to Exit");
		_TRACE("No Open Orders to Exit");
		}
	} else { StaticVarSet(static_name_ + "xOTMPEAlgo", 0); }



	if( CXButtonClick AND StaticVarGet(Name()+GetChartID()+"CXAlgo")==0 )
	{
		openalgo.Squareoffall();
		if(VoiceAlert == "Enable"){
				Say("Squareoff All Triggered");
			}
		_TRACE("API Request : "+sq_api_request);
		_TRACE("API Response : "+sq_api_response);
		StaticVarSet(Name()+GetChartID()+"CXAlgo",1);
	}
	else
	{
		StaticVarSet(Name()+GetChartID()+"CXAlgo",0);
	}


}

_SECTION_END();

_SECTION_BEGIN("Candlestick Charts with Date & Time Axis");

//Enable the Date & Time Axis
SetChartOptions(0, chartShowArrows | chartShowDates);

//Plotting Candlestick charts
Plot(Close,"Candle",colorDefault,styleCandle);

_SECTION_END();

```

[PreviousCSV Exploration Module](https://docs.openalgo.in/trading-platform/amibroker/csv-exploration-module) [NextSpot/Futures to Options Module (Single Leg)](https://docs.openalgo.in/trading-platform/amibroker/spot-futures-to-options-module-single-leg)

Last updated 3 months ago

